{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/unzip.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import arrayFilter from './_arrayFilter.js';\nimport arrayMap from './_arrayMap.js';\nimport baseProperty from './_baseProperty.js';\nimport baseTimes from './_baseTimes.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.zip` except that it accepts an array of grouped\n * elements and creates an array regrouping the elements to their pre-zip\n * configuration.\n *\n * @static\n * @memberOf _\n * @since 1.2.0\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n * // => [['a', 1, true], ['b', 2, false]]\n *\n * _.unzip(zipped);\n * // => [['a', 'b'], [1, 2], [true, false]]\n */\nfunction unzip(array) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  var length = 0;\n  array = arrayFilter(array, function(group) {\n    if (isArrayLikeObject(group)) {\n      length = nativeMax(group.length, length);\n      return true;\n    }\n  });\n  return baseTimes(length, function(index) {\n    return arrayMap(array, baseProperty(index));\n  });\n}\n\nexport default unzip;\n",
      "start": 1714699768554,
      "end": 1714699768581,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import arrayFilter from './_arrayFilter.js';\nimport arrayMap from './_arrayMap.js';\nimport baseProperty from './_baseProperty.js';\nimport baseTimes from './_baseTimes.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.zip` except that it accepts an array of grouped\n * elements and creates an array regrouping the elements to their pre-zip\n * configuration.\n *\n * @static\n * @memberOf _\n * @since 1.2.0\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n * // => [['a', 1, true], ['b', 2, false]]\n *\n * _.unzip(zipped);\n * // => [['a', 'b'], [1, 2], [true, false]]\n */\nfunction unzip(array) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  var length = 0;\n  array = arrayFilter(array, function(group) {\n    if (isArrayLikeObject(group)) {\n      length = nativeMax(group.length, length);\n      return true;\n    }\n  });\n  return baseTimes(length, function(index) {\n    return arrayMap(array, baseProperty(index));\n  });\n}\n\nexport default unzip;\n",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768581,
      "end": 1714699768581,
      "order": "normal"
    }
  ]
}

{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseSortedIndex.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import baseSortedIndexBy from './_baseSortedIndexBy.js';\nimport identity from './identity.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n/**\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n * performs a binary search of `array` to determine the index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction baseSortedIndex(array, value, retHighest) {\n  var low = 0,\n      high = array == null ? low : array.length;\n\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = (low + high) >>> 1,\n          computed = array[mid];\n\n      if (computed !== null && !isSymbol(computed) &&\n          (retHighest ? (computed <= value) : (computed < value))) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return high;\n  }\n  return baseSortedIndexBy(array, value, identity, retHighest);\n}\n\nexport default baseSortedIndex;\n",
      "start": 1714699768748,
      "end": 1714699768761,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import baseSortedIndexBy from './_baseSortedIndexBy.js';\nimport identity from './identity.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n/**\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n * performs a binary search of `array` to determine the index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction baseSortedIndex(array, value, retHighest) {\n  var low = 0,\n      high = array == null ? low : array.length;\n\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = (low + high) >>> 1,\n          computed = array[mid];\n\n      if (computed !== null && !isSymbol(computed) &&\n          (retHighest ? (computed <= value) : (computed < value))) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return high;\n  }\n  return baseSortedIndexBy(array, value, identity, retHighest);\n}\n\nexport default baseSortedIndex;\n",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768761,
      "end": 1714699768761,
      "order": "normal"
    }
  ]
}

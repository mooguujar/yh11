{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/v-x-e-table/src/commands.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import XEUtils from 'xe-utils';\nimport { warnLog } from '../../tools/log';\nvar VXECommandsStore = /** @class */ (function () {\n    function VXECommandsStore() {\n        this.store = {};\n    }\n    VXECommandsStore.prototype.mixin = function (options) {\n        var _this = this;\n        XEUtils.each(options, function (item, key) {\n            _this.add(key, item);\n        });\n        return this;\n    };\n    VXECommandsStore.prototype.has = function (name) {\n        return !!this.get(name);\n    };\n    VXECommandsStore.prototype.get = function (name) {\n        return this.store[name];\n    };\n    VXECommandsStore.prototype.add = function (name, render) {\n        var conf = this.store[name];\n        // 兼容\n        if (XEUtils.isFunction(render)) {\n            if (process.env.NODE_ENV === 'development') {\n                warnLog('vxe.error.delProp', ['commands -> callback', 'commandMethod']);\n            }\n            render = {\n                commandMethod: render\n            };\n        }\n        // 检测是否覆盖\n        if (process.env.NODE_ENV === 'development') {\n            var confKeys_1 = XEUtils.keys(conf);\n            XEUtils.each(render, function (item, key) {\n                if (confKeys_1.includes(key)) {\n                    warnLog('vxe.error.coverProp', [name, key]);\n                }\n            });\n        }\n        this.store[name] = conf ? XEUtils.merge(conf, render) : render;\n        return this;\n    };\n    VXECommandsStore.prototype.delete = function (name) {\n        delete this.store[name];\n    };\n    VXECommandsStore.prototype.forEach = function (callback) {\n        XEUtils.objectEach(this.store, callback);\n    };\n    return VXECommandsStore;\n}());\nexport var commands = new VXECommandsStore();\nif (process.env.NODE_ENV === 'development') {\n    Object.assign(commands, { _name: 'Commands' });\n}\n",
      "start": 1714699767724,
      "end": 1714699767739,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import XEUtils from 'xe-utils';\nimport { warnLog } from '../../tools/log';\nvar VXECommandsStore = /** @class */ (function () {\n    function VXECommandsStore() {\n        this.store = {};\n    }\n    VXECommandsStore.prototype.mixin = function (options) {\n        var _this = this;\n        XEUtils.each(options, function (item, key) {\n            _this.add(key, item);\n        });\n        return this;\n    };\n    VXECommandsStore.prototype.has = function (name) {\n        return !!this.get(name);\n    };\n    VXECommandsStore.prototype.get = function (name) {\n        return this.store[name];\n    };\n    VXECommandsStore.prototype.add = function (name, render) {\n        var conf = this.store[name];\n        // 兼容\n        if (XEUtils.isFunction(render)) {\n            if (process.env.NODE_ENV === 'development') {\n                warnLog('vxe.error.delProp', ['commands -> callback', 'commandMethod']);\n            }\n            render = {\n                commandMethod: render\n            };\n        }\n        // 检测是否覆盖\n        if (process.env.NODE_ENV === 'development') {\n            var confKeys_1 = XEUtils.keys(conf);\n            XEUtils.each(render, function (item, key) {\n                if (confKeys_1.includes(key)) {\n                    warnLog('vxe.error.coverProp', [name, key]);\n                }\n            });\n        }\n        this.store[name] = conf ? XEUtils.merge(conf, render) : render;\n        return this;\n    };\n    VXECommandsStore.prototype.delete = function (name) {\n        delete this.store[name];\n    };\n    VXECommandsStore.prototype.forEach = function (callback) {\n        XEUtils.objectEach(this.store, callback);\n    };\n    return VXECommandsStore;\n}());\nexport var commands = new VXECommandsStore();\nif (process.env.NODE_ENV === 'development') {\n    Object.assign(commands, { _name: 'Commands' });\n}\n",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import XEUtils from \"xe-utils\";\nimport { warnLog } from \"../../tools/log\";\nvar VXECommandsStore = (\n  /** @class */\n  function() {\n    function VXECommandsStore2() {\n      this.store = {};\n    }\n    VXECommandsStore2.prototype.mixin = function(options) {\n      var _this = this;\n      XEUtils.each(options, function(item, key) {\n        _this.add(key, item);\n      });\n      return this;\n    };\n    VXECommandsStore2.prototype.has = function(name) {\n      return !!this.get(name);\n    };\n    VXECommandsStore2.prototype.get = function(name) {\n      return this.store[name];\n    };\n    VXECommandsStore2.prototype.add = function(name, render) {\n      var conf = this.store[name];\n      if (XEUtils.isFunction(render)) {\n        if (false) {\n          warnLog(\"vxe.error.delProp\", [\"commands -> callback\", \"commandMethod\"]);\n        }\n        render = {\n          commandMethod: render\n        };\n      }\n      if (false) {\n        var confKeys_1 = XEUtils.keys(conf);\n        XEUtils.each(render, function(item, key) {\n          if (confKeys_1.includes(key)) {\n            warnLog(\"vxe.error.coverProp\", [name, key]);\n          }\n        });\n      }\n      this.store[name] = conf ? XEUtils.merge(conf, render) : render;\n      return this;\n    };\n    VXECommandsStore2.prototype.delete = function(name) {\n      delete this.store[name];\n    };\n    VXECommandsStore2.prototype.forEach = function(callback) {\n      XEUtils.objectEach(this.store, callback);\n    };\n    return VXECommandsStore2;\n  }()\n);\nexport var commands = new VXECommandsStore();\nif (false) {\n  Object.assign(commands, { _name: \"Commands\" });\n}\n",
      "start": 1714699767739,
      "end": 1714699767798,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1714699767798,
      "end": 1714699767798,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767798,
      "end": 1714699767798,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767798,
      "end": 1714699767798,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767798,
      "end": 1714699767798,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767798,
      "end": 1714699767798,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767798,
      "end": 1714699767798,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767798,
      "end": 1714699767798,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767798,
      "end": 1714699767798,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767798,
      "end": 1714699767798,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767798,
      "end": 1714699767798,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767798,
      "end": 1714699767798,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767798,
      "end": 1714699767798,
      "order": "normal"
    }
  ]
}

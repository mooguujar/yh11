{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/filter/src/panel.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { defineComponent, h, computed, inject } from 'vue';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { VXETable } from '../../v-x-e-table';\nimport { formatText } from '../../tools/utils';\nimport { getPropClass } from '../../tools/dom';\nimport { getSlotVNs } from '../../tools/vn';\nexport default defineComponent({\n    name: 'VxeTableFilter',\n    props: {\n        filterStore: Object\n    },\n    setup: function (props) {\n        var $xetable = inject('$xetable', {});\n        var tableReactData = $xetable.reactData, tableInternalData = $xetable.internalData, getComputeMaps = $xetable.getComputeMaps;\n        var computeFilterOpts = getComputeMaps().computeFilterOpts;\n        var computeHasCheckOption = computed(function () {\n            var filterStore = props.filterStore;\n            return filterStore && filterStore.options.some(function (option) { return option.checked; });\n        });\n        // 全部筛选事件\n        var filterCheckAllEvent = function (evnt, value) {\n            var filterStore = props.filterStore;\n            filterStore.options.forEach(function (option) {\n                option._checked = value;\n                option.checked = value;\n            });\n            filterStore.isAllSelected = value;\n            filterStore.isIndeterminate = false;\n        };\n        /*************************\n         * Publish methods\n         *************************/\n        // 确认筛选\n        var confirmFilter = function (evnt) {\n            var filterStore = props.filterStore;\n            filterStore.options.forEach(function (option) {\n                option.checked = option._checked;\n            });\n            $xetable.confirmFilterEvent(evnt);\n        };\n        // （单选）筛选发生改变\n        var changeRadioOption = function (evnt, checked, item) {\n            var filterStore = props.filterStore;\n            filterStore.options.forEach(function (option) {\n                option._checked = false;\n            });\n            item._checked = checked;\n            $xetable.checkFilterOptions();\n            confirmFilter(evnt);\n        };\n        /**\n         * 重置筛选\n         * 当筛选面板中的重置按钮被按下时触发\n         * @param {Event} evnt 事件\n         */\n        var resetFilter = function (evnt) {\n            var filterStore = props.filterStore;\n            $xetable.handleClearFilter(filterStore.column);\n            $xetable.confirmFilterEvent(evnt);\n        };\n        // （多选）筛选发生改变\n        var changeMultipleOption = function (evnt, checked, item) {\n            item._checked = checked;\n            $xetable.checkFilterOptions();\n        };\n        // 筛选发生改变\n        var changeOption = function (evnt, checked, item) {\n            var filterStore = props.filterStore;\n            if (filterStore.multiple) {\n                changeMultipleOption(evnt, checked, item);\n            }\n            else {\n                changeRadioOption(evnt, checked, item);\n            }\n        };\n        var changeAllOption = function (evnt, checked) {\n            var filterStore = props.filterStore;\n            if (filterStore.multiple) {\n                filterCheckAllEvent(evnt, checked);\n            }\n            else {\n                resetFilter(evnt);\n            }\n        };\n        /*************************\n         * Publish methods\n         *************************/\n        var $panel = {\n            changeRadioOption: changeRadioOption,\n            changeMultipleOption: changeMultipleOption,\n            changeAllOption: changeAllOption,\n            changeOption: changeOption,\n            confirmFilter: confirmFilter,\n            resetFilter: resetFilter\n        };\n        var renderOptions = function (filterRender, compConf) {\n            var filterStore = props.filterStore;\n            var column = filterStore.column, multiple = filterStore.multiple, maxHeight = filterStore.maxHeight;\n            var slots = column.slots;\n            var filterSlot = slots ? slots.filter : null;\n            var params = Object.assign({}, tableInternalData._currFilterParams, { $panel: $panel, $table: $xetable });\n            if (filterSlot) {\n                return [\n                    h('div', {\n                        class: 'vxe-table--filter-template'\n                    }, $xetable.callSlot(filterSlot, params))\n                ];\n            }\n            else if (compConf && compConf.renderFilter) {\n                return [\n                    h('div', {\n                        class: 'vxe-table--filter-template'\n                    }, getSlotVNs(compConf.renderFilter(filterRender, params)))\n                ];\n            }\n            var isAllChecked = multiple ? filterStore.isAllSelected : !filterStore.options.some(function (item) { return item._checked; });\n            var isAllIndeterminate = multiple && filterStore.isIndeterminate;\n            return [\n                h('ul', {\n                    class: 'vxe-table--filter-header'\n                }, [\n                    h('li', {\n                        class: ['vxe-table--filter-option', {\n                                'is--checked': isAllChecked,\n                                'is--indeterminate': isAllIndeterminate\n                            }],\n                        title: GlobalConfig.i18n(multiple ? 'vxe.table.allTitle' : 'vxe.table.allFilter'),\n                        onClick: function (evnt) {\n                            changeAllOption(evnt, !filterStore.isAllSelected);\n                        }\n                    }, (multiple ? [\n                        h('span', {\n                            class: ['vxe-checkbox--icon', isAllIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]\n                        })\n                    ] : []).concat([\n                        h('span', {\n                            class: 'vxe-checkbox--label'\n                        }, GlobalConfig.i18n('vxe.table.allFilter'))\n                    ]))\n                ]),\n                h('ul', {\n                    class: 'vxe-table--filter-body',\n                    style: maxHeight ? {\n                        maxHeight: \"\".concat(maxHeight, \"px\")\n                    } : {}\n                }, filterStore.options.map(function (item) {\n                    var isChecked = item._checked;\n                    var isIndeterminate = false;\n                    return h('li', {\n                        class: ['vxe-table--filter-option', {\n                                'is--checked': item._checked\n                            }],\n                        title: item.label,\n                        onClick: function (evnt) {\n                            changeOption(evnt, !item._checked, item);\n                        }\n                    }, (multiple ? [\n                        h('span', {\n                            class: ['vxe-checkbox--icon', isIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]\n                        })\n                    ] : []).concat([\n                        h('span', {\n                            class: 'vxe-checkbox--label'\n                        }, formatText(item.label, 1))\n                    ]));\n                }))\n            ];\n        };\n        var renderFooters = function () {\n            var filterStore = props.filterStore;\n            var column = filterStore.column, multiple = filterStore.multiple;\n            var filterOpts = computeFilterOpts.value;\n            var hasCheckOption = computeHasCheckOption.value;\n            var filterRender = column.filterRender;\n            var compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n            var isDisabled = !hasCheckOption && !filterStore.isAllSelected && !filterStore.isIndeterminate;\n            return multiple && (!compConf || compConf.showFilterFooter !== false) ? [\n                h('div', {\n                    class: 'vxe-table--filter-footer'\n                }, [\n                    h('button', {\n                        class: {\n                            'is--disabled': isDisabled\n                        },\n                        disabled: isDisabled,\n                        onClick: confirmFilter\n                    }, filterOpts.confirmButtonText || GlobalConfig.i18n('vxe.table.confirmFilter')),\n                    h('button', {\n                        onClick: resetFilter\n                    }, filterOpts.resetButtonText || GlobalConfig.i18n('vxe.table.resetFilter'))\n                ])\n            ] : [];\n        };\n        var renderVN = function () {\n            var filterStore = props.filterStore;\n            var initStore = tableReactData.initStore;\n            var column = filterStore.column;\n            var filterRender = column ? column.filterRender : null;\n            var compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n            var filterClassName = compConf ? compConf.filterClassName : '';\n            var params = Object.assign({}, tableInternalData._currFilterParams, { $panel: $panel, $table: $xetable });\n            return h('div', {\n                class: [\n                    'vxe-table--filter-wrapper',\n                    'filter--prevent-default',\n                    getPropClass(filterClassName, params),\n                    {\n                        'is--animat': $xetable.props.animat,\n                        'is--multiple': filterStore.multiple,\n                        'is--active': filterStore.visible\n                    }\n                ],\n                style: filterStore.style\n            }, initStore.filter && filterStore.visible ? renderOptions(filterRender, compConf).concat(renderFooters()) : []);\n        };\n        return renderVN;\n    }\n});\n",
      "start": 1714699767728,
      "end": 1714699767743,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767743,
      "end": 1714699767743,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767743,
      "end": 1714699767743,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767743,
      "end": 1714699767743,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767743,
      "end": 1714699767743,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767743,
      "end": 1714699767743,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767743,
      "end": 1714699767743,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import { defineComponent, h, computed, inject } from 'vue';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { VXETable } from '../../v-x-e-table';\nimport { formatText } from '../../tools/utils';\nimport { getPropClass } from '../../tools/dom';\nimport { getSlotVNs } from '../../tools/vn';\nexport default defineComponent({\n    name: 'VxeTableFilter',\n    props: {\n        filterStore: Object\n    },\n    setup: function (props) {\n        var $xetable = inject('$xetable', {});\n        var tableReactData = $xetable.reactData, tableInternalData = $xetable.internalData, getComputeMaps = $xetable.getComputeMaps;\n        var computeFilterOpts = getComputeMaps().computeFilterOpts;\n        var computeHasCheckOption = computed(function () {\n            var filterStore = props.filterStore;\n            return filterStore && filterStore.options.some(function (option) { return option.checked; });\n        });\n        // 全部筛选事件\n        var filterCheckAllEvent = function (evnt, value) {\n            var filterStore = props.filterStore;\n            filterStore.options.forEach(function (option) {\n                option._checked = value;\n                option.checked = value;\n            });\n            filterStore.isAllSelected = value;\n            filterStore.isIndeterminate = false;\n        };\n        /*************************\n         * Publish methods\n         *************************/\n        // 确认筛选\n        var confirmFilter = function (evnt) {\n            var filterStore = props.filterStore;\n            filterStore.options.forEach(function (option) {\n                option.checked = option._checked;\n            });\n            $xetable.confirmFilterEvent(evnt);\n        };\n        // （单选）筛选发生改变\n        var changeRadioOption = function (evnt, checked, item) {\n            var filterStore = props.filterStore;\n            filterStore.options.forEach(function (option) {\n                option._checked = false;\n            });\n            item._checked = checked;\n            $xetable.checkFilterOptions();\n            confirmFilter(evnt);\n        };\n        /**\n         * 重置筛选\n         * 当筛选面板中的重置按钮被按下时触发\n         * @param {Event} evnt 事件\n         */\n        var resetFilter = function (evnt) {\n            var filterStore = props.filterStore;\n            $xetable.handleClearFilter(filterStore.column);\n            $xetable.confirmFilterEvent(evnt);\n        };\n        // （多选）筛选发生改变\n        var changeMultipleOption = function (evnt, checked, item) {\n            item._checked = checked;\n            $xetable.checkFilterOptions();\n        };\n        // 筛选发生改变\n        var changeOption = function (evnt, checked, item) {\n            var filterStore = props.filterStore;\n            if (filterStore.multiple) {\n                changeMultipleOption(evnt, checked, item);\n            }\n            else {\n                changeRadioOption(evnt, checked, item);\n            }\n        };\n        var changeAllOption = function (evnt, checked) {\n            var filterStore = props.filterStore;\n            if (filterStore.multiple) {\n                filterCheckAllEvent(evnt, checked);\n            }\n            else {\n                resetFilter(evnt);\n            }\n        };\n        /*************************\n         * Publish methods\n         *************************/\n        var $panel = {\n            changeRadioOption: changeRadioOption,\n            changeMultipleOption: changeMultipleOption,\n            changeAllOption: changeAllOption,\n            changeOption: changeOption,\n            confirmFilter: confirmFilter,\n            resetFilter: resetFilter\n        };\n        var renderOptions = function (filterRender, compConf) {\n            var filterStore = props.filterStore;\n            var column = filterStore.column, multiple = filterStore.multiple, maxHeight = filterStore.maxHeight;\n            var slots = column.slots;\n            var filterSlot = slots ? slots.filter : null;\n            var params = Object.assign({}, tableInternalData._currFilterParams, { $panel: $panel, $table: $xetable });\n            if (filterSlot) {\n                return [\n                    h('div', {\n                        class: 'vxe-table--filter-template'\n                    }, $xetable.callSlot(filterSlot, params))\n                ];\n            }\n            else if (compConf && compConf.renderFilter) {\n                return [\n                    h('div', {\n                        class: 'vxe-table--filter-template'\n                    }, getSlotVNs(compConf.renderFilter(filterRender, params)))\n                ];\n            }\n            var isAllChecked = multiple ? filterStore.isAllSelected : !filterStore.options.some(function (item) { return item._checked; });\n            var isAllIndeterminate = multiple && filterStore.isIndeterminate;\n            return [\n                h('ul', {\n                    class: 'vxe-table--filter-header'\n                }, [\n                    h('li', {\n                        class: ['vxe-table--filter-option', {\n                                'is--checked': isAllChecked,\n                                'is--indeterminate': isAllIndeterminate\n                            }],\n                        title: GlobalConfig.i18n(multiple ? 'vxe.table.allTitle' : 'vxe.table.allFilter'),\n                        onClick: function (evnt) {\n                            changeAllOption(evnt, !filterStore.isAllSelected);\n                        }\n                    }, (multiple ? [\n                        h('span', {\n                            class: ['vxe-checkbox--icon', isAllIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]\n                        })\n                    ] : []).concat([\n                        h('span', {\n                            class: 'vxe-checkbox--label'\n                        }, GlobalConfig.i18n('vxe.table.allFilter'))\n                    ]))\n                ]),\n                h('ul', {\n                    class: 'vxe-table--filter-body',\n                    style: maxHeight ? {\n                        maxHeight: \"\".concat(maxHeight, \"px\")\n                    } : {}\n                }, filterStore.options.map(function (item) {\n                    var isChecked = item._checked;\n                    var isIndeterminate = false;\n                    return h('li', {\n                        class: ['vxe-table--filter-option', {\n                                'is--checked': item._checked\n                            }],\n                        title: item.label,\n                        onClick: function (evnt) {\n                            changeOption(evnt, !item._checked, item);\n                        }\n                    }, (multiple ? [\n                        h('span', {\n                            class: ['vxe-checkbox--icon', isIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]\n                        })\n                    ] : []).concat([\n                        h('span', {\n                            class: 'vxe-checkbox--label'\n                        }, formatText(item.label, 1))\n                    ]));\n                }))\n            ];\n        };\n        var renderFooters = function () {\n            var filterStore = props.filterStore;\n            var column = filterStore.column, multiple = filterStore.multiple;\n            var filterOpts = computeFilterOpts.value;\n            var hasCheckOption = computeHasCheckOption.value;\n            var filterRender = column.filterRender;\n            var compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n            var isDisabled = !hasCheckOption && !filterStore.isAllSelected && !filterStore.isIndeterminate;\n            return multiple && (!compConf || compConf.showFilterFooter !== false) ? [\n                h('div', {\n                    class: 'vxe-table--filter-footer'\n                }, [\n                    h('button', {\n                        class: {\n                            'is--disabled': isDisabled\n                        },\n                        disabled: isDisabled,\n                        onClick: confirmFilter\n                    }, filterOpts.confirmButtonText || GlobalConfig.i18n('vxe.table.confirmFilter')),\n                    h('button', {\n                        onClick: resetFilter\n                    }, filterOpts.resetButtonText || GlobalConfig.i18n('vxe.table.resetFilter'))\n                ])\n            ] : [];\n        };\n        var renderVN = function () {\n            var filterStore = props.filterStore;\n            var initStore = tableReactData.initStore;\n            var column = filterStore.column;\n            var filterRender = column ? column.filterRender : null;\n            var compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n            var filterClassName = compConf ? compConf.filterClassName : '';\n            var params = Object.assign({}, tableInternalData._currFilterParams, { $panel: $panel, $table: $xetable });\n            return h('div', {\n                class: [\n                    'vxe-table--filter-wrapper',\n                    'filter--prevent-default',\n                    getPropClass(filterClassName, params),\n                    {\n                        'is--animat': $xetable.props.animat,\n                        'is--multiple': filterStore.multiple,\n                        'is--active': filterStore.visible\n                    }\n                ],\n                style: filterStore.style\n            }, initStore.filter && filterStore.visible ? renderOptions(filterRender, compConf).concat(renderFooters()) : []);\n        };\n        return renderVN;\n    }\n});\n",
      "start": 1714699767743,
      "end": 1714699767743,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767743,
      "end": 1714699767743,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767743,
      "end": 1714699767743,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767743,
      "end": 1714699767743,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767743,
      "end": 1714699767743,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767743,
      "end": 1714699767743,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767743,
      "end": 1714699767743,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767743,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    }
  ]
}

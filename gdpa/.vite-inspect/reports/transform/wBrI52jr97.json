{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/v-x-e-table/src/renderer.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { h, resolveComponent } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from './conf';\nimport { getCellValue, setCellValue } from '../../table/src/util';\nimport { getFuncText, formatText, isEmptyValue } from '../../tools/utils';\nimport { errLog, warnLog } from '../../tools/log';\nimport { getOnName } from '../../tools/vn';\nvar componentDefaultModelProp = 'modelValue';\nvar defaultCompProps = { transfer: true };\nfunction getModelEvent(renderOpts) {\n    switch (renderOpts.name) {\n        case 'input':\n        case 'textarea':\n            return 'input';\n    }\n    return 'update:modelValue';\n}\nfunction getChangeEvent(renderOpts) {\n    switch (renderOpts.name) {\n        case 'input':\n        case 'textarea':\n        case '$input':\n        case '$textarea':\n            return 'input';\n    }\n    return 'change';\n}\nfunction parseDate(value, props) {\n    return value && props.valueFormat ? XEUtils.toStringDate(value, props.valueFormat) : value;\n}\nfunction getFormatDate(value, props, defaultFormat) {\n    var _a = props.dateConfig, dateConfig = _a === void 0 ? {} : _a;\n    return XEUtils.toDateString(parseDate(value, props), dateConfig.labelFormat || defaultFormat);\n}\nfunction getLabelFormatDate(value, props) {\n    return getFormatDate(value, props, GlobalConfig.i18n(\"vxe.input.date.labelFormat.\".concat(props.type)));\n}\nfunction getComponentName(name) {\n    return \"vxe-\".concat(name.replace('$', ''));\n}\nfunction getDefaultComponent(_a) {\n    var name = _a.name;\n    return resolveComponent(getComponentName(name));\n}\nfunction handleConfirmFilter(params, checked, option) {\n    var $panel = params.$panel;\n    $panel.changeOption({}, checked, option);\n}\nfunction getNativeAttrs(renderOpts) {\n    var name = renderOpts.name, attrs = renderOpts.attrs;\n    if (name === 'input') {\n        attrs = Object.assign({ type: 'text' }, attrs);\n    }\n    return attrs;\n}\nfunction getInputImmediateModel(renderOpts) {\n    var name = renderOpts.name, immediate = renderOpts.immediate, props = renderOpts.props;\n    if (!immediate) {\n        if (name === '$input') {\n            var type = (props || {}).type;\n            return !(!type || type === 'text' || type === 'number' || type === 'integer' || type === 'float');\n        }\n        if (name === 'input' || name === 'textarea' || name === '$textarea') {\n            return false;\n        }\n        return true;\n    }\n    return immediate;\n}\nfunction getCellEditProps(renderOpts, params, value, defaultProps) {\n    var _a;\n    return XEUtils.assign({ immediate: getInputImmediateModel(renderOpts) }, defaultCompProps, defaultProps, renderOpts.props, (_a = {}, _a[componentDefaultModelProp] = value, _a));\n}\nfunction getCellEditFilterProps(renderOpts, params, value, defaultProps) {\n    var _a;\n    return XEUtils.assign({}, defaultCompProps, defaultProps, renderOpts.props, (_a = {}, _a[componentDefaultModelProp] = value, _a));\n}\nfunction getComponentFormItemProps(renderOpts, params, value, defaultProps) {\n    var _a;\n    return XEUtils.assign({}, defaultCompProps, defaultProps, renderOpts.props, (_a = {}, _a[componentDefaultModelProp] = value, _a));\n}\nfunction isImmediateCell(renderOpts, params) {\n    return params.$type === 'cell' || getInputImmediateModel(renderOpts);\n}\nfunction getCellLabelVNs(renderOpts, params, cellLabel) {\n    var placeholder = renderOpts.placeholder;\n    return [\n        h('span', {\n            class: 'vxe-cell--label'\n        }, placeholder && isEmptyValue(cellLabel) ? [\n            h('span', {\n                class: 'vxe-cell--placeholder'\n            }, formatText(getFuncText(placeholder), 1))\n        ] : formatText(cellLabel, 1))\n    ];\n}\n/**\n * 原生事件处理\n * @param renderOpts\n * @param params\n * @param modelFunc\n * @param changeFunc\n */\nfunction getElementOns(renderOpts, params, modelFunc, changeFunc) {\n    var events = renderOpts.events;\n    var modelEvent = getModelEvent(renderOpts);\n    var changeEvent = getChangeEvent(renderOpts);\n    var isSameEvent = changeEvent === modelEvent;\n    var ons = {};\n    if (events) {\n        XEUtils.objectEach(events, function (func, key) {\n            ons[getOnName(key)] = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                func.apply(void 0, __spreadArray([params], args, false));\n            };\n        });\n    }\n    if (modelFunc) {\n        ons[getOnName(modelEvent)] = function (targetEvnt) {\n            modelFunc(targetEvnt);\n            if (isSameEvent && changeFunc) {\n                changeFunc(targetEvnt);\n            }\n            if (events && events[modelEvent]) {\n                events[modelEvent](params, targetEvnt);\n            }\n        };\n    }\n    if (!isSameEvent && changeFunc) {\n        ons[getOnName(changeEvent)] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            changeFunc.apply(void 0, args);\n            if (events && events[changeEvent]) {\n                events[changeEvent].apply(events, __spreadArray([params], args, false));\n            }\n        };\n    }\n    return ons;\n}\n/**\n * 组件事件处理\n * @param renderOpts\n * @param params\n * @param modelFunc\n * @param changeFunc\n */\nfunction getComponentOns(renderOpts, params, modelFunc, changeFunc) {\n    var events = renderOpts.events;\n    var modelEvent = getModelEvent(renderOpts);\n    var changeEvent = getChangeEvent(renderOpts);\n    var ons = {};\n    XEUtils.objectEach(events, function (func, key) {\n        ons[getOnName(key)] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (process.env.NODE_ENV === 'development') {\n                if (!XEUtils.isFunction(func)) {\n                    errLog('vxe.error.errFunc', [func]);\n                }\n            }\n            func.apply(void 0, __spreadArray([params], args, false));\n        };\n    });\n    if (modelFunc) {\n        ons[getOnName(modelEvent)] = function (targetEvnt) {\n            modelFunc(targetEvnt);\n            if (events && events[modelEvent]) {\n                events[modelEvent](params, targetEvnt);\n            }\n        };\n    }\n    if (changeFunc) {\n        ons[getOnName(changeEvent)] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            changeFunc.apply(void 0, args);\n            if (events && events[changeEvent]) {\n                events[changeEvent].apply(events, __spreadArray([params], args, false));\n            }\n        };\n    }\n    return ons;\n}\nfunction getEditOns(renderOpts, params) {\n    var $table = params.$table, row = params.row, column = params.column;\n    var name = renderOpts.name;\n    var model = column.model;\n    var isImmediate = isImmediateCell(renderOpts, params);\n    return getComponentOns(renderOpts, params, function (cellValue) {\n        // 处理 model 值双向绑定\n        if (isImmediate) {\n            setCellValue(row, column, cellValue);\n        }\n        else {\n            model.update = true;\n            model.value = cellValue;\n        }\n    }, function (eventParams) {\n        // 处理 change 事件相关逻辑\n        if (!isImmediate && (name === '$input' || name === '$textarea')) {\n            var cellValue = eventParams.value;\n            model.update = true;\n            model.value = cellValue;\n            $table.updateStatus(params, cellValue);\n        }\n        else {\n            $table.updateStatus(params);\n        }\n    });\n}\nfunction getFilterOns(renderOpts, params, option) {\n    return getComponentOns(renderOpts, params, function (value) {\n        // 处理 model 值双向绑定\n        option.data = value;\n    }, function () {\n        handleConfirmFilter(params, !XEUtils.eqNull(option.data), option);\n    });\n}\nfunction getItemOns(renderOpts, params) {\n    var $form = params.$form, data = params.data, property = params.property;\n    return getComponentOns(renderOpts, params, function (value) {\n        // 处理 model 值双向绑定\n        XEUtils.set(data, property, value);\n    }, function () {\n        // 处理 change 事件相关逻辑\n        $form.updateStatus(params);\n    });\n}\nfunction getNativeEditOns(renderOpts, params) {\n    var $table = params.$table, row = params.row, column = params.column;\n    var model = column.model;\n    return getElementOns(renderOpts, params, function (evnt) {\n        // 处理 model 值双向绑定\n        var cellValue = evnt.target.value;\n        if (isImmediateCell(renderOpts, params)) {\n            setCellValue(row, column, cellValue);\n        }\n        else {\n            model.update = true;\n            model.value = cellValue;\n        }\n    }, function (evnt) {\n        // 处理 change 事件相关逻辑\n        var cellValue = evnt.target.value;\n        $table.updateStatus(params, cellValue);\n    });\n}\nfunction getNativeFilterOns(renderOpts, params, option) {\n    return getElementOns(renderOpts, params, function (evnt) {\n        // 处理 model 值双向绑定\n        option.data = evnt.target.value;\n    }, function () {\n        handleConfirmFilter(params, !XEUtils.eqNull(option.data), option);\n    });\n}\nfunction getNativeItemOns(renderOpts, params) {\n    var $form = params.$form, data = params.data, property = params.property;\n    return getElementOns(renderOpts, params, function (evnt) {\n        // 处理 model 值双向绑定\n        var itemValue = evnt.target.value;\n        XEUtils.set(data, property, itemValue);\n    }, function () {\n        // 处理 change 事件相关逻辑\n        $form.updateStatus(params);\n    });\n}\n/**\n * 单元格可编辑渲染-原生的标签\n * input、textarea、select\n */\nfunction nativeEditRender(renderOpts, params) {\n    var row = params.row, column = params.column;\n    var name = renderOpts.name;\n    var cellValue = isImmediateCell(renderOpts, params) ? getCellValue(row, column) : column.model.value;\n    return [\n        h(name, __assign(__assign(__assign({ class: \"vxe-default-\".concat(name) }, getNativeAttrs(renderOpts)), { value: cellValue }), getNativeEditOns(renderOpts, params)))\n    ];\n}\nfunction defaultEditRender(renderOpts, params) {\n    var row = params.row, column = params.column;\n    var cellValue = getCellValue(row, column);\n    return [\n        h(getDefaultComponent(renderOpts), __assign(__assign({}, getCellEditProps(renderOpts, params, cellValue)), getEditOns(renderOpts, params)))\n    ];\n}\nfunction defaultButtonEditRender(renderOpts, params) {\n    return [\n        h(resolveComponent('vxe-button'), __assign(__assign({}, getCellEditProps(renderOpts, params, null)), getComponentOns(renderOpts, params)))\n    ];\n}\nfunction defaultButtonsEditRender(renderOpts, params) {\n    return renderOpts.children.map(function (childRenderOpts) { return defaultButtonEditRender(childRenderOpts, params)[0]; });\n}\nfunction renderNativeOptgroups(renderOpts, params, renderOptionsMethods) {\n    var optionGroups = renderOpts.optionGroups, _a = renderOpts.optionGroupProps, optionGroupProps = _a === void 0 ? {} : _a;\n    var groupOptions = optionGroupProps.options || 'options';\n    var groupLabel = optionGroupProps.label || 'label';\n    return optionGroups.map(function (group, gIndex) {\n        return h('optgroup', {\n            key: gIndex,\n            label: group[groupLabel]\n        }, renderOptionsMethods(group[groupOptions], renderOpts, params));\n    });\n}\n/**\n * 渲染原生的 option 标签\n */\nfunction renderNativeOptions(options, renderOpts, params) {\n    var _a = renderOpts.optionProps, optionProps = _a === void 0 ? {} : _a;\n    var row = params.row, column = params.column;\n    var labelProp = optionProps.label || 'label';\n    var valueProp = optionProps.value || 'value';\n    var disabledProp = optionProps.disabled || 'disabled';\n    var cellValue = isImmediateCell(renderOpts, params) ? getCellValue(row, column) : column.model.value;\n    return options.map(function (option, oIndex) {\n        return h('option', {\n            key: oIndex,\n            value: option[valueProp],\n            disabled: option[disabledProp],\n            /* eslint-disable eqeqeq */\n            selected: option[valueProp] == cellValue\n        }, option[labelProp]);\n    });\n}\nfunction nativeFilterRender(renderOpts, params) {\n    var column = params.column;\n    var name = renderOpts.name;\n    var attrs = getNativeAttrs(renderOpts);\n    return column.filters.map(function (option, oIndex) {\n        return h(name, __assign(__assign(__assign({ key: oIndex, class: \"vxe-default-\".concat(name) }, attrs), { value: option.data }), getNativeFilterOns(renderOpts, params, option)));\n    });\n}\nfunction defaultFilterRender(renderOpts, params) {\n    var column = params.column;\n    return column.filters.map(function (option, oIndex) {\n        var optionValue = option.data;\n        return h(getDefaultComponent(renderOpts), __assign(__assign({ key: oIndex }, getCellEditFilterProps(renderOpts, renderOpts, optionValue)), getFilterOns(renderOpts, params, option)));\n    });\n}\nfunction handleFilterMethod(_a) {\n    var option = _a.option, row = _a.row, column = _a.column;\n    var data = option.data;\n    var cellValue = XEUtils.get(row, column.property);\n    /* eslint-disable eqeqeq */\n    return cellValue == data;\n}\nfunction nativeSelectEditRender(renderOpts, params) {\n    return [\n        h('select', __assign(__assign({ class: 'vxe-default-select' }, getNativeAttrs(renderOpts)), getNativeEditOns(renderOpts, params)), renderOpts.optionGroups ? renderNativeOptgroups(renderOpts, params, renderNativeOptions) : renderNativeOptions(renderOpts.options, renderOpts, params))\n    ];\n}\nfunction defaultSelectEditRender(renderOpts, params) {\n    var row = params.row, column = params.column;\n    var options = renderOpts.options, optionProps = renderOpts.optionProps, optionGroups = renderOpts.optionGroups, optionGroupProps = renderOpts.optionGroupProps;\n    var cellValue = getCellValue(row, column);\n    return [\n        h(getDefaultComponent(renderOpts), __assign(__assign({}, getCellEditProps(renderOpts, params, cellValue, { options: options, optionProps: optionProps, optionGroups: optionGroups, optionGroupProps: optionGroupProps })), getEditOns(renderOpts, params)))\n    ];\n}\nfunction getSelectCellValue(renderOpts, _a) {\n    var row = _a.row, column = _a.column;\n    var _b = renderOpts.props, props = _b === void 0 ? {} : _b, options = renderOpts.options, optionGroups = renderOpts.optionGroups, _c = renderOpts.optionProps, optionProps = _c === void 0 ? {} : _c, _d = renderOpts.optionGroupProps, optionGroupProps = _d === void 0 ? {} : _d;\n    var cellValue = XEUtils.get(row, column.property);\n    var selectItem;\n    var labelProp = optionProps.label || 'label';\n    var valueProp = optionProps.value || 'value';\n    if (!isEmptyValue(cellValue)) {\n        return XEUtils.map(props.multiple ? cellValue : [cellValue], optionGroups ? function (value) {\n            var groupOptions = optionGroupProps.options || 'options';\n            for (var index = 0; index < optionGroups.length; index++) {\n                /* eslint-disable eqeqeq */\n                selectItem = XEUtils.find(optionGroups[index][groupOptions], function (item) { return item[valueProp] == value; });\n                if (selectItem) {\n                    break;\n                }\n            }\n            return selectItem ? selectItem[labelProp] : value;\n        } : function (value) {\n            /* eslint-disable eqeqeq */\n            selectItem = XEUtils.find(options, function (item) { return item[valueProp] == value; });\n            return selectItem ? selectItem[labelProp] : value;\n        }).join(', ');\n    }\n    return '';\n}\n/**\n * 渲染表单-项\n * 用于渲染原生的标签\n */\nfunction nativeItemRender(renderOpts, params) {\n    var data = params.data, property = params.property;\n    var name = renderOpts.name;\n    var attrs = getNativeAttrs(renderOpts);\n    var itemValue = XEUtils.get(data, property);\n    return [\n        h(name, __assign(__assign(__assign({ class: \"vxe-default-\".concat(name) }, attrs), { value: attrs && name === 'input' && (attrs.type === 'submit' || attrs.type === 'reset') ? null : itemValue }), getNativeItemOns(renderOpts, params)))\n    ];\n}\nfunction defaultItemRender(renderOpts, params) {\n    var data = params.data, property = params.property;\n    var itemValue = XEUtils.get(data, property);\n    return [\n        h(getDefaultComponent(renderOpts), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, itemValue)), getItemOns(renderOpts, params)))\n    ];\n}\nfunction defaultButtonItemRender(renderOpts, params) {\n    return [\n        h(resolveComponent('vxe-button'), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, null)), getComponentOns(renderOpts, params)))\n    ];\n}\nfunction defaultButtonsItemRender(renderOpts, params) {\n    return renderOpts.children.map(function (childRenderOpts) { return defaultButtonItemRender(childRenderOpts, params)[0]; });\n}\n/**\n * 渲染原生的 select 标签\n */\nfunction renderNativeFormOptions(options, renderOpts, params) {\n    var data = params.data, property = params.property;\n    var _a = renderOpts.optionProps, optionProps = _a === void 0 ? {} : _a;\n    var labelProp = optionProps.label || 'label';\n    var valueProp = optionProps.value || 'value';\n    var disabledProp = optionProps.disabled || 'disabled';\n    var cellValue = XEUtils.get(data, property);\n    return options.map(function (item, oIndex) {\n        return h('option', {\n            key: oIndex,\n            value: item[valueProp],\n            disabled: item[disabledProp],\n            /* eslint-disable eqeqeq */\n            selected: item[valueProp] == cellValue\n        }, item[labelProp]);\n    });\n}\nfunction handleExportSelectMethod(params) {\n    var row = params.row, column = params.column, options = params.options;\n    return options.original ? getCellValue(row, column) : getSelectCellValue(column.editRender || column.cellRender, params);\n}\n/**\n * 渲染表单-项中\n * 单选框和复选框\n */\nfunction defaultFormItemRadioAndCheckboxRender(renderOpts, params) {\n    var name = renderOpts.name, options = renderOpts.options, _a = renderOpts.optionProps, optionProps = _a === void 0 ? {} : _a;\n    var data = params.data, property = params.property;\n    var labelProp = optionProps.label || 'label';\n    var valueProp = optionProps.value || 'value';\n    var disabledProp = optionProps.disabled || 'disabled';\n    var itemValue = XEUtils.get(data, property);\n    var compName = getComponentName(name);\n    // 如果是分组\n    if (options) {\n        return [\n            h(resolveComponent(\"\".concat(compName, \"-group\")), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, itemValue)), getItemOns(renderOpts, params)), {\n                default: function () {\n                    return options.map(function (item, index) {\n                        return h(resolveComponent(compName), {\n                            key: index,\n                            label: item[valueProp],\n                            content: item[labelProp],\n                            disabled: item[disabledProp]\n                        });\n                    });\n                }\n            })\n        ];\n    }\n    return [\n        h(resolveComponent(compName), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, itemValue)), getItemOns(renderOpts, params)))\n    ];\n}\n/**\n * 内置的组件渲染\n */\nvar renderMap = {\n    input: {\n        autofocus: 'input',\n        renderEdit: nativeEditRender,\n        renderDefault: nativeEditRender,\n        renderFilter: nativeFilterRender,\n        defaultFilterMethod: handleFilterMethod,\n        renderItemContent: nativeItemRender\n    },\n    textarea: {\n        autofocus: 'textarea',\n        renderEdit: nativeEditRender,\n        renderItemContent: nativeItemRender\n    },\n    select: {\n        renderEdit: nativeSelectEditRender,\n        renderDefault: nativeSelectEditRender,\n        renderCell: function (renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getSelectCellValue(renderOpts, params));\n        },\n        renderFilter: function (renderOpts, params) {\n            var column = params.column;\n            return column.filters.map(function (option, oIndex) {\n                return h('select', __assign(__assign({ key: oIndex, class: 'vxe-default-select' }, getNativeAttrs(renderOpts)), getNativeFilterOns(renderOpts, params, option)), renderOpts.optionGroups ? renderNativeOptgroups(renderOpts, params, renderNativeOptions) : renderNativeOptions(renderOpts.options, renderOpts, params));\n            });\n        },\n        defaultFilterMethod: handleFilterMethod,\n        renderItemContent: function (renderOpts, params) {\n            return [\n                h('select', __assign(__assign({ class: 'vxe-default-select' }, getNativeAttrs(renderOpts)), getNativeItemOns(renderOpts, params)), renderOpts.optionGroups ? renderNativeOptgroups(renderOpts, params, renderNativeFormOptions) : renderNativeFormOptions(renderOpts.options, renderOpts, params))\n            ];\n        },\n        cellExportMethod: handleExportSelectMethod\n    },\n    $input: {\n        autofocus: '.vxe-input--inner',\n        renderEdit: defaultEditRender,\n        renderCell: function (renderOpts, params) {\n            var _a = renderOpts.props, props = _a === void 0 ? {} : _a;\n            var row = params.row, column = params.column;\n            var digits = props.digits || GlobalConfig.input.digits;\n            var cellValue = XEUtils.get(row, column.property);\n            if (cellValue) {\n                switch (props.type) {\n                    case 'date':\n                    case 'week':\n                    case 'month':\n                    case 'year':\n                        cellValue = getLabelFormatDate(cellValue, props);\n                        break;\n                    case 'float':\n                        cellValue = XEUtils.toFixed(XEUtils.floor(cellValue, digits), digits);\n                        break;\n                }\n            }\n            return getCellLabelVNs(renderOpts, params, cellValue);\n        },\n        renderDefault: defaultEditRender,\n        renderFilter: defaultFilterRender,\n        defaultFilterMethod: handleFilterMethod,\n        renderItemContent: defaultItemRender\n    },\n    $textarea: {\n        autofocus: '.vxe-textarea--inner',\n        renderItemContent: defaultItemRender\n    },\n    $button: {\n        renderDefault: defaultButtonEditRender,\n        renderItemContent: defaultButtonItemRender\n    },\n    $buttons: {\n        renderDefault: defaultButtonsEditRender,\n        renderItemContent: defaultButtonsItemRender\n    },\n    $select: {\n        autofocus: '.vxe-input--inner',\n        renderEdit: defaultSelectEditRender,\n        renderDefault: defaultSelectEditRender,\n        renderCell: function (renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getSelectCellValue(renderOpts, params));\n        },\n        renderFilter: function (renderOpts, params) {\n            var column = params.column;\n            var options = renderOpts.options, optionProps = renderOpts.optionProps, optionGroups = renderOpts.optionGroups, optionGroupProps = renderOpts.optionGroupProps;\n            return column.filters.map(function (option, oIndex) {\n                var optionValue = option.data;\n                return h(getDefaultComponent(renderOpts), __assign(__assign({ key: oIndex }, getCellEditFilterProps(renderOpts, params, optionValue, { options: options, optionProps: optionProps, optionGroups: optionGroups, optionGroupProps: optionGroupProps })), getFilterOns(renderOpts, params, option)));\n            });\n        },\n        defaultFilterMethod: handleFilterMethod,\n        renderItemContent: function (renderOpts, params) {\n            var data = params.data, property = params.property;\n            var options = renderOpts.options, optionProps = renderOpts.optionProps, optionGroups = renderOpts.optionGroups, optionGroupProps = renderOpts.optionGroupProps;\n            var itemValue = XEUtils.get(data, property);\n            return [\n                h(getDefaultComponent(renderOpts), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, itemValue, { options: options, optionProps: optionProps, optionGroups: optionGroups, optionGroupProps: optionGroupProps })), getItemOns(renderOpts, params)))\n            ];\n        },\n        cellExportMethod: handleExportSelectMethod\n    },\n    $radio: {\n        autofocus: '.vxe-radio--input',\n        renderItemContent: defaultFormItemRadioAndCheckboxRender\n    },\n    $checkbox: {\n        autofocus: '.vxe-checkbox--input',\n        renderItemContent: defaultFormItemRadioAndCheckboxRender\n    },\n    $switch: {\n        autofocus: '.vxe-switch--button',\n        renderEdit: defaultEditRender,\n        renderDefault: defaultEditRender,\n        renderItemContent: defaultItemRender\n    }\n};\n/**\n * 全局渲染器\n */\nexport var renderer = {\n    mixin: function (opts) {\n        XEUtils.each(opts, function (options, name) { return renderer.add(name, options); });\n        return renderer;\n    },\n    get: function (name) {\n        return renderMap[name] || null;\n    },\n    add: function (name, options) {\n        if (name && options) {\n            var renders_1 = renderMap[name];\n            if (renders_1) {\n                // 检测是否覆盖\n                if (process.env.NODE_ENV === 'development') {\n                    XEUtils.each(options, function (val, key) {\n                        if (!XEUtils.eqNull(renders_1[key]) && renders_1[key] !== val) {\n                            warnLog('vxe.error.coverProp', [\"Renderer.\".concat(name), key]);\n                        }\n                    });\n                }\n                Object.assign(renders_1, options);\n            }\n            else {\n                renderMap[name] = options;\n            }\n        }\n        return renderer;\n    },\n    delete: function (name) {\n        delete renderMap[name];\n        return renderer;\n    }\n};\n",
      "start": 1714699767723,
      "end": 1714699767739,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { h, resolveComponent } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from './conf';\nimport { getCellValue, setCellValue } from '../../table/src/util';\nimport { getFuncText, formatText, isEmptyValue } from '../../tools/utils';\nimport { errLog, warnLog } from '../../tools/log';\nimport { getOnName } from '../../tools/vn';\nvar componentDefaultModelProp = 'modelValue';\nvar defaultCompProps = { transfer: true };\nfunction getModelEvent(renderOpts) {\n    switch (renderOpts.name) {\n        case 'input':\n        case 'textarea':\n            return 'input';\n    }\n    return 'update:modelValue';\n}\nfunction getChangeEvent(renderOpts) {\n    switch (renderOpts.name) {\n        case 'input':\n        case 'textarea':\n        case '$input':\n        case '$textarea':\n            return 'input';\n    }\n    return 'change';\n}\nfunction parseDate(value, props) {\n    return value && props.valueFormat ? XEUtils.toStringDate(value, props.valueFormat) : value;\n}\nfunction getFormatDate(value, props, defaultFormat) {\n    var _a = props.dateConfig, dateConfig = _a === void 0 ? {} : _a;\n    return XEUtils.toDateString(parseDate(value, props), dateConfig.labelFormat || defaultFormat);\n}\nfunction getLabelFormatDate(value, props) {\n    return getFormatDate(value, props, GlobalConfig.i18n(\"vxe.input.date.labelFormat.\".concat(props.type)));\n}\nfunction getComponentName(name) {\n    return \"vxe-\".concat(name.replace('$', ''));\n}\nfunction getDefaultComponent(_a) {\n    var name = _a.name;\n    return resolveComponent(getComponentName(name));\n}\nfunction handleConfirmFilter(params, checked, option) {\n    var $panel = params.$panel;\n    $panel.changeOption({}, checked, option);\n}\nfunction getNativeAttrs(renderOpts) {\n    var name = renderOpts.name, attrs = renderOpts.attrs;\n    if (name === 'input') {\n        attrs = Object.assign({ type: 'text' }, attrs);\n    }\n    return attrs;\n}\nfunction getInputImmediateModel(renderOpts) {\n    var name = renderOpts.name, immediate = renderOpts.immediate, props = renderOpts.props;\n    if (!immediate) {\n        if (name === '$input') {\n            var type = (props || {}).type;\n            return !(!type || type === 'text' || type === 'number' || type === 'integer' || type === 'float');\n        }\n        if (name === 'input' || name === 'textarea' || name === '$textarea') {\n            return false;\n        }\n        return true;\n    }\n    return immediate;\n}\nfunction getCellEditProps(renderOpts, params, value, defaultProps) {\n    var _a;\n    return XEUtils.assign({ immediate: getInputImmediateModel(renderOpts) }, defaultCompProps, defaultProps, renderOpts.props, (_a = {}, _a[componentDefaultModelProp] = value, _a));\n}\nfunction getCellEditFilterProps(renderOpts, params, value, defaultProps) {\n    var _a;\n    return XEUtils.assign({}, defaultCompProps, defaultProps, renderOpts.props, (_a = {}, _a[componentDefaultModelProp] = value, _a));\n}\nfunction getComponentFormItemProps(renderOpts, params, value, defaultProps) {\n    var _a;\n    return XEUtils.assign({}, defaultCompProps, defaultProps, renderOpts.props, (_a = {}, _a[componentDefaultModelProp] = value, _a));\n}\nfunction isImmediateCell(renderOpts, params) {\n    return params.$type === 'cell' || getInputImmediateModel(renderOpts);\n}\nfunction getCellLabelVNs(renderOpts, params, cellLabel) {\n    var placeholder = renderOpts.placeholder;\n    return [\n        h('span', {\n            class: 'vxe-cell--label'\n        }, placeholder && isEmptyValue(cellLabel) ? [\n            h('span', {\n                class: 'vxe-cell--placeholder'\n            }, formatText(getFuncText(placeholder), 1))\n        ] : formatText(cellLabel, 1))\n    ];\n}\n/**\n * 原生事件处理\n * @param renderOpts\n * @param params\n * @param modelFunc\n * @param changeFunc\n */\nfunction getElementOns(renderOpts, params, modelFunc, changeFunc) {\n    var events = renderOpts.events;\n    var modelEvent = getModelEvent(renderOpts);\n    var changeEvent = getChangeEvent(renderOpts);\n    var isSameEvent = changeEvent === modelEvent;\n    var ons = {};\n    if (events) {\n        XEUtils.objectEach(events, function (func, key) {\n            ons[getOnName(key)] = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                func.apply(void 0, __spreadArray([params], args, false));\n            };\n        });\n    }\n    if (modelFunc) {\n        ons[getOnName(modelEvent)] = function (targetEvnt) {\n            modelFunc(targetEvnt);\n            if (isSameEvent && changeFunc) {\n                changeFunc(targetEvnt);\n            }\n            if (events && events[modelEvent]) {\n                events[modelEvent](params, targetEvnt);\n            }\n        };\n    }\n    if (!isSameEvent && changeFunc) {\n        ons[getOnName(changeEvent)] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            changeFunc.apply(void 0, args);\n            if (events && events[changeEvent]) {\n                events[changeEvent].apply(events, __spreadArray([params], args, false));\n            }\n        };\n    }\n    return ons;\n}\n/**\n * 组件事件处理\n * @param renderOpts\n * @param params\n * @param modelFunc\n * @param changeFunc\n */\nfunction getComponentOns(renderOpts, params, modelFunc, changeFunc) {\n    var events = renderOpts.events;\n    var modelEvent = getModelEvent(renderOpts);\n    var changeEvent = getChangeEvent(renderOpts);\n    var ons = {};\n    XEUtils.objectEach(events, function (func, key) {\n        ons[getOnName(key)] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (process.env.NODE_ENV === 'development') {\n                if (!XEUtils.isFunction(func)) {\n                    errLog('vxe.error.errFunc', [func]);\n                }\n            }\n            func.apply(void 0, __spreadArray([params], args, false));\n        };\n    });\n    if (modelFunc) {\n        ons[getOnName(modelEvent)] = function (targetEvnt) {\n            modelFunc(targetEvnt);\n            if (events && events[modelEvent]) {\n                events[modelEvent](params, targetEvnt);\n            }\n        };\n    }\n    if (changeFunc) {\n        ons[getOnName(changeEvent)] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            changeFunc.apply(void 0, args);\n            if (events && events[changeEvent]) {\n                events[changeEvent].apply(events, __spreadArray([params], args, false));\n            }\n        };\n    }\n    return ons;\n}\nfunction getEditOns(renderOpts, params) {\n    var $table = params.$table, row = params.row, column = params.column;\n    var name = renderOpts.name;\n    var model = column.model;\n    var isImmediate = isImmediateCell(renderOpts, params);\n    return getComponentOns(renderOpts, params, function (cellValue) {\n        // 处理 model 值双向绑定\n        if (isImmediate) {\n            setCellValue(row, column, cellValue);\n        }\n        else {\n            model.update = true;\n            model.value = cellValue;\n        }\n    }, function (eventParams) {\n        // 处理 change 事件相关逻辑\n        if (!isImmediate && (name === '$input' || name === '$textarea')) {\n            var cellValue = eventParams.value;\n            model.update = true;\n            model.value = cellValue;\n            $table.updateStatus(params, cellValue);\n        }\n        else {\n            $table.updateStatus(params);\n        }\n    });\n}\nfunction getFilterOns(renderOpts, params, option) {\n    return getComponentOns(renderOpts, params, function (value) {\n        // 处理 model 值双向绑定\n        option.data = value;\n    }, function () {\n        handleConfirmFilter(params, !XEUtils.eqNull(option.data), option);\n    });\n}\nfunction getItemOns(renderOpts, params) {\n    var $form = params.$form, data = params.data, property = params.property;\n    return getComponentOns(renderOpts, params, function (value) {\n        // 处理 model 值双向绑定\n        XEUtils.set(data, property, value);\n    }, function () {\n        // 处理 change 事件相关逻辑\n        $form.updateStatus(params);\n    });\n}\nfunction getNativeEditOns(renderOpts, params) {\n    var $table = params.$table, row = params.row, column = params.column;\n    var model = column.model;\n    return getElementOns(renderOpts, params, function (evnt) {\n        // 处理 model 值双向绑定\n        var cellValue = evnt.target.value;\n        if (isImmediateCell(renderOpts, params)) {\n            setCellValue(row, column, cellValue);\n        }\n        else {\n            model.update = true;\n            model.value = cellValue;\n        }\n    }, function (evnt) {\n        // 处理 change 事件相关逻辑\n        var cellValue = evnt.target.value;\n        $table.updateStatus(params, cellValue);\n    });\n}\nfunction getNativeFilterOns(renderOpts, params, option) {\n    return getElementOns(renderOpts, params, function (evnt) {\n        // 处理 model 值双向绑定\n        option.data = evnt.target.value;\n    }, function () {\n        handleConfirmFilter(params, !XEUtils.eqNull(option.data), option);\n    });\n}\nfunction getNativeItemOns(renderOpts, params) {\n    var $form = params.$form, data = params.data, property = params.property;\n    return getElementOns(renderOpts, params, function (evnt) {\n        // 处理 model 值双向绑定\n        var itemValue = evnt.target.value;\n        XEUtils.set(data, property, itemValue);\n    }, function () {\n        // 处理 change 事件相关逻辑\n        $form.updateStatus(params);\n    });\n}\n/**\n * 单元格可编辑渲染-原生的标签\n * input、textarea、select\n */\nfunction nativeEditRender(renderOpts, params) {\n    var row = params.row, column = params.column;\n    var name = renderOpts.name;\n    var cellValue = isImmediateCell(renderOpts, params) ? getCellValue(row, column) : column.model.value;\n    return [\n        h(name, __assign(__assign(__assign({ class: \"vxe-default-\".concat(name) }, getNativeAttrs(renderOpts)), { value: cellValue }), getNativeEditOns(renderOpts, params)))\n    ];\n}\nfunction defaultEditRender(renderOpts, params) {\n    var row = params.row, column = params.column;\n    var cellValue = getCellValue(row, column);\n    return [\n        h(getDefaultComponent(renderOpts), __assign(__assign({}, getCellEditProps(renderOpts, params, cellValue)), getEditOns(renderOpts, params)))\n    ];\n}\nfunction defaultButtonEditRender(renderOpts, params) {\n    return [\n        h(resolveComponent('vxe-button'), __assign(__assign({}, getCellEditProps(renderOpts, params, null)), getComponentOns(renderOpts, params)))\n    ];\n}\nfunction defaultButtonsEditRender(renderOpts, params) {\n    return renderOpts.children.map(function (childRenderOpts) { return defaultButtonEditRender(childRenderOpts, params)[0]; });\n}\nfunction renderNativeOptgroups(renderOpts, params, renderOptionsMethods) {\n    var optionGroups = renderOpts.optionGroups, _a = renderOpts.optionGroupProps, optionGroupProps = _a === void 0 ? {} : _a;\n    var groupOptions = optionGroupProps.options || 'options';\n    var groupLabel = optionGroupProps.label || 'label';\n    return optionGroups.map(function (group, gIndex) {\n        return h('optgroup', {\n            key: gIndex,\n            label: group[groupLabel]\n        }, renderOptionsMethods(group[groupOptions], renderOpts, params));\n    });\n}\n/**\n * 渲染原生的 option 标签\n */\nfunction renderNativeOptions(options, renderOpts, params) {\n    var _a = renderOpts.optionProps, optionProps = _a === void 0 ? {} : _a;\n    var row = params.row, column = params.column;\n    var labelProp = optionProps.label || 'label';\n    var valueProp = optionProps.value || 'value';\n    var disabledProp = optionProps.disabled || 'disabled';\n    var cellValue = isImmediateCell(renderOpts, params) ? getCellValue(row, column) : column.model.value;\n    return options.map(function (option, oIndex) {\n        return h('option', {\n            key: oIndex,\n            value: option[valueProp],\n            disabled: option[disabledProp],\n            /* eslint-disable eqeqeq */\n            selected: option[valueProp] == cellValue\n        }, option[labelProp]);\n    });\n}\nfunction nativeFilterRender(renderOpts, params) {\n    var column = params.column;\n    var name = renderOpts.name;\n    var attrs = getNativeAttrs(renderOpts);\n    return column.filters.map(function (option, oIndex) {\n        return h(name, __assign(__assign(__assign({ key: oIndex, class: \"vxe-default-\".concat(name) }, attrs), { value: option.data }), getNativeFilterOns(renderOpts, params, option)));\n    });\n}\nfunction defaultFilterRender(renderOpts, params) {\n    var column = params.column;\n    return column.filters.map(function (option, oIndex) {\n        var optionValue = option.data;\n        return h(getDefaultComponent(renderOpts), __assign(__assign({ key: oIndex }, getCellEditFilterProps(renderOpts, renderOpts, optionValue)), getFilterOns(renderOpts, params, option)));\n    });\n}\nfunction handleFilterMethod(_a) {\n    var option = _a.option, row = _a.row, column = _a.column;\n    var data = option.data;\n    var cellValue = XEUtils.get(row, column.property);\n    /* eslint-disable eqeqeq */\n    return cellValue == data;\n}\nfunction nativeSelectEditRender(renderOpts, params) {\n    return [\n        h('select', __assign(__assign({ class: 'vxe-default-select' }, getNativeAttrs(renderOpts)), getNativeEditOns(renderOpts, params)), renderOpts.optionGroups ? renderNativeOptgroups(renderOpts, params, renderNativeOptions) : renderNativeOptions(renderOpts.options, renderOpts, params))\n    ];\n}\nfunction defaultSelectEditRender(renderOpts, params) {\n    var row = params.row, column = params.column;\n    var options = renderOpts.options, optionProps = renderOpts.optionProps, optionGroups = renderOpts.optionGroups, optionGroupProps = renderOpts.optionGroupProps;\n    var cellValue = getCellValue(row, column);\n    return [\n        h(getDefaultComponent(renderOpts), __assign(__assign({}, getCellEditProps(renderOpts, params, cellValue, { options: options, optionProps: optionProps, optionGroups: optionGroups, optionGroupProps: optionGroupProps })), getEditOns(renderOpts, params)))\n    ];\n}\nfunction getSelectCellValue(renderOpts, _a) {\n    var row = _a.row, column = _a.column;\n    var _b = renderOpts.props, props = _b === void 0 ? {} : _b, options = renderOpts.options, optionGroups = renderOpts.optionGroups, _c = renderOpts.optionProps, optionProps = _c === void 0 ? {} : _c, _d = renderOpts.optionGroupProps, optionGroupProps = _d === void 0 ? {} : _d;\n    var cellValue = XEUtils.get(row, column.property);\n    var selectItem;\n    var labelProp = optionProps.label || 'label';\n    var valueProp = optionProps.value || 'value';\n    if (!isEmptyValue(cellValue)) {\n        return XEUtils.map(props.multiple ? cellValue : [cellValue], optionGroups ? function (value) {\n            var groupOptions = optionGroupProps.options || 'options';\n            for (var index = 0; index < optionGroups.length; index++) {\n                /* eslint-disable eqeqeq */\n                selectItem = XEUtils.find(optionGroups[index][groupOptions], function (item) { return item[valueProp] == value; });\n                if (selectItem) {\n                    break;\n                }\n            }\n            return selectItem ? selectItem[labelProp] : value;\n        } : function (value) {\n            /* eslint-disable eqeqeq */\n            selectItem = XEUtils.find(options, function (item) { return item[valueProp] == value; });\n            return selectItem ? selectItem[labelProp] : value;\n        }).join(', ');\n    }\n    return '';\n}\n/**\n * 渲染表单-项\n * 用于渲染原生的标签\n */\nfunction nativeItemRender(renderOpts, params) {\n    var data = params.data, property = params.property;\n    var name = renderOpts.name;\n    var attrs = getNativeAttrs(renderOpts);\n    var itemValue = XEUtils.get(data, property);\n    return [\n        h(name, __assign(__assign(__assign({ class: \"vxe-default-\".concat(name) }, attrs), { value: attrs && name === 'input' && (attrs.type === 'submit' || attrs.type === 'reset') ? null : itemValue }), getNativeItemOns(renderOpts, params)))\n    ];\n}\nfunction defaultItemRender(renderOpts, params) {\n    var data = params.data, property = params.property;\n    var itemValue = XEUtils.get(data, property);\n    return [\n        h(getDefaultComponent(renderOpts), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, itemValue)), getItemOns(renderOpts, params)))\n    ];\n}\nfunction defaultButtonItemRender(renderOpts, params) {\n    return [\n        h(resolveComponent('vxe-button'), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, null)), getComponentOns(renderOpts, params)))\n    ];\n}\nfunction defaultButtonsItemRender(renderOpts, params) {\n    return renderOpts.children.map(function (childRenderOpts) { return defaultButtonItemRender(childRenderOpts, params)[0]; });\n}\n/**\n * 渲染原生的 select 标签\n */\nfunction renderNativeFormOptions(options, renderOpts, params) {\n    var data = params.data, property = params.property;\n    var _a = renderOpts.optionProps, optionProps = _a === void 0 ? {} : _a;\n    var labelProp = optionProps.label || 'label';\n    var valueProp = optionProps.value || 'value';\n    var disabledProp = optionProps.disabled || 'disabled';\n    var cellValue = XEUtils.get(data, property);\n    return options.map(function (item, oIndex) {\n        return h('option', {\n            key: oIndex,\n            value: item[valueProp],\n            disabled: item[disabledProp],\n            /* eslint-disable eqeqeq */\n            selected: item[valueProp] == cellValue\n        }, item[labelProp]);\n    });\n}\nfunction handleExportSelectMethod(params) {\n    var row = params.row, column = params.column, options = params.options;\n    return options.original ? getCellValue(row, column) : getSelectCellValue(column.editRender || column.cellRender, params);\n}\n/**\n * 渲染表单-项中\n * 单选框和复选框\n */\nfunction defaultFormItemRadioAndCheckboxRender(renderOpts, params) {\n    var name = renderOpts.name, options = renderOpts.options, _a = renderOpts.optionProps, optionProps = _a === void 0 ? {} : _a;\n    var data = params.data, property = params.property;\n    var labelProp = optionProps.label || 'label';\n    var valueProp = optionProps.value || 'value';\n    var disabledProp = optionProps.disabled || 'disabled';\n    var itemValue = XEUtils.get(data, property);\n    var compName = getComponentName(name);\n    // 如果是分组\n    if (options) {\n        return [\n            h(resolveComponent(\"\".concat(compName, \"-group\")), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, itemValue)), getItemOns(renderOpts, params)), {\n                default: function () {\n                    return options.map(function (item, index) {\n                        return h(resolveComponent(compName), {\n                            key: index,\n                            label: item[valueProp],\n                            content: item[labelProp],\n                            disabled: item[disabledProp]\n                        });\n                    });\n                }\n            })\n        ];\n    }\n    return [\n        h(resolveComponent(compName), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, itemValue)), getItemOns(renderOpts, params)))\n    ];\n}\n/**\n * 内置的组件渲染\n */\nvar renderMap = {\n    input: {\n        autofocus: 'input',\n        renderEdit: nativeEditRender,\n        renderDefault: nativeEditRender,\n        renderFilter: nativeFilterRender,\n        defaultFilterMethod: handleFilterMethod,\n        renderItemContent: nativeItemRender\n    },\n    textarea: {\n        autofocus: 'textarea',\n        renderEdit: nativeEditRender,\n        renderItemContent: nativeItemRender\n    },\n    select: {\n        renderEdit: nativeSelectEditRender,\n        renderDefault: nativeSelectEditRender,\n        renderCell: function (renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getSelectCellValue(renderOpts, params));\n        },\n        renderFilter: function (renderOpts, params) {\n            var column = params.column;\n            return column.filters.map(function (option, oIndex) {\n                return h('select', __assign(__assign({ key: oIndex, class: 'vxe-default-select' }, getNativeAttrs(renderOpts)), getNativeFilterOns(renderOpts, params, option)), renderOpts.optionGroups ? renderNativeOptgroups(renderOpts, params, renderNativeOptions) : renderNativeOptions(renderOpts.options, renderOpts, params));\n            });\n        },\n        defaultFilterMethod: handleFilterMethod,\n        renderItemContent: function (renderOpts, params) {\n            return [\n                h('select', __assign(__assign({ class: 'vxe-default-select' }, getNativeAttrs(renderOpts)), getNativeItemOns(renderOpts, params)), renderOpts.optionGroups ? renderNativeOptgroups(renderOpts, params, renderNativeFormOptions) : renderNativeFormOptions(renderOpts.options, renderOpts, params))\n            ];\n        },\n        cellExportMethod: handleExportSelectMethod\n    },\n    $input: {\n        autofocus: '.vxe-input--inner',\n        renderEdit: defaultEditRender,\n        renderCell: function (renderOpts, params) {\n            var _a = renderOpts.props, props = _a === void 0 ? {} : _a;\n            var row = params.row, column = params.column;\n            var digits = props.digits || GlobalConfig.input.digits;\n            var cellValue = XEUtils.get(row, column.property);\n            if (cellValue) {\n                switch (props.type) {\n                    case 'date':\n                    case 'week':\n                    case 'month':\n                    case 'year':\n                        cellValue = getLabelFormatDate(cellValue, props);\n                        break;\n                    case 'float':\n                        cellValue = XEUtils.toFixed(XEUtils.floor(cellValue, digits), digits);\n                        break;\n                }\n            }\n            return getCellLabelVNs(renderOpts, params, cellValue);\n        },\n        renderDefault: defaultEditRender,\n        renderFilter: defaultFilterRender,\n        defaultFilterMethod: handleFilterMethod,\n        renderItemContent: defaultItemRender\n    },\n    $textarea: {\n        autofocus: '.vxe-textarea--inner',\n        renderItemContent: defaultItemRender\n    },\n    $button: {\n        renderDefault: defaultButtonEditRender,\n        renderItemContent: defaultButtonItemRender\n    },\n    $buttons: {\n        renderDefault: defaultButtonsEditRender,\n        renderItemContent: defaultButtonsItemRender\n    },\n    $select: {\n        autofocus: '.vxe-input--inner',\n        renderEdit: defaultSelectEditRender,\n        renderDefault: defaultSelectEditRender,\n        renderCell: function (renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getSelectCellValue(renderOpts, params));\n        },\n        renderFilter: function (renderOpts, params) {\n            var column = params.column;\n            var options = renderOpts.options, optionProps = renderOpts.optionProps, optionGroups = renderOpts.optionGroups, optionGroupProps = renderOpts.optionGroupProps;\n            return column.filters.map(function (option, oIndex) {\n                var optionValue = option.data;\n                return h(getDefaultComponent(renderOpts), __assign(__assign({ key: oIndex }, getCellEditFilterProps(renderOpts, params, optionValue, { options: options, optionProps: optionProps, optionGroups: optionGroups, optionGroupProps: optionGroupProps })), getFilterOns(renderOpts, params, option)));\n            });\n        },\n        defaultFilterMethod: handleFilterMethod,\n        renderItemContent: function (renderOpts, params) {\n            var data = params.data, property = params.property;\n            var options = renderOpts.options, optionProps = renderOpts.optionProps, optionGroups = renderOpts.optionGroups, optionGroupProps = renderOpts.optionGroupProps;\n            var itemValue = XEUtils.get(data, property);\n            return [\n                h(getDefaultComponent(renderOpts), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, itemValue, { options: options, optionProps: optionProps, optionGroups: optionGroups, optionGroupProps: optionGroupProps })), getItemOns(renderOpts, params)))\n            ];\n        },\n        cellExportMethod: handleExportSelectMethod\n    },\n    $radio: {\n        autofocus: '.vxe-radio--input',\n        renderItemContent: defaultFormItemRadioAndCheckboxRender\n    },\n    $checkbox: {\n        autofocus: '.vxe-checkbox--input',\n        renderItemContent: defaultFormItemRadioAndCheckboxRender\n    },\n    $switch: {\n        autofocus: '.vxe-switch--button',\n        renderEdit: defaultEditRender,\n        renderDefault: defaultEditRender,\n        renderItemContent: defaultItemRender\n    }\n};\n/**\n * 全局渲染器\n */\nexport var renderer = {\n    mixin: function (opts) {\n        XEUtils.each(opts, function (options, name) { return renderer.add(name, options); });\n        return renderer;\n    },\n    get: function (name) {\n        return renderMap[name] || null;\n    },\n    add: function (name, options) {\n        if (name && options) {\n            var renders_1 = renderMap[name];\n            if (renders_1) {\n                // 检测是否覆盖\n                if (process.env.NODE_ENV === 'development') {\n                    XEUtils.each(options, function (val, key) {\n                        if (!XEUtils.eqNull(renders_1[key]) && renders_1[key] !== val) {\n                            warnLog('vxe.error.coverProp', [\"Renderer.\".concat(name), key]);\n                        }\n                    });\n                }\n                Object.assign(renders_1, options);\n            }\n            else {\n                renderMap[name] = options;\n            }\n        }\n        return renderer;\n    },\n    delete: function (name) {\n        delete renderMap[name];\n        return renderer;\n    }\n};\n",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767739,
      "end": 1714699767739,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "var __assign = function() {\n  __assign = Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s)\n        if (Object.prototype.hasOwnProperty.call(s, p))\n          t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArray = function(to, from, pack) {\n  if (pack || arguments.length === 2)\n    for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n        if (!ar)\n          ar = Array.prototype.slice.call(from, 0, i);\n        ar[i] = from[i];\n      }\n    }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { h, resolveComponent } from \"vue\";\nimport XEUtils from \"xe-utils\";\nimport GlobalConfig from \"./conf\";\nimport { getCellValue, setCellValue } from \"../../table/src/util\";\nimport { getFuncText, formatText, isEmptyValue } from \"../../tools/utils\";\nimport { errLog, warnLog } from \"../../tools/log\";\nimport { getOnName } from \"../../tools/vn\";\nvar componentDefaultModelProp = \"modelValue\";\nvar defaultCompProps = { transfer: true };\nfunction getModelEvent(renderOpts) {\n  switch (renderOpts.name) {\n    case \"input\":\n    case \"textarea\":\n      return \"input\";\n  }\n  return \"update:modelValue\";\n}\nfunction getChangeEvent(renderOpts) {\n  switch (renderOpts.name) {\n    case \"input\":\n    case \"textarea\":\n    case \"$input\":\n    case \"$textarea\":\n      return \"input\";\n  }\n  return \"change\";\n}\nfunction parseDate(value, props) {\n  return value && props.valueFormat ? XEUtils.toStringDate(value, props.valueFormat) : value;\n}\nfunction getFormatDate(value, props, defaultFormat) {\n  var _a = props.dateConfig, dateConfig = _a === void 0 ? {} : _a;\n  return XEUtils.toDateString(parseDate(value, props), dateConfig.labelFormat || defaultFormat);\n}\nfunction getLabelFormatDate(value, props) {\n  return getFormatDate(value, props, GlobalConfig.i18n(\"vxe.input.date.labelFormat.\".concat(props.type)));\n}\nfunction getComponentName(name) {\n  return \"vxe-\".concat(name.replace(\"$\", \"\"));\n}\nfunction getDefaultComponent(_a) {\n  var name = _a.name;\n  return resolveComponent(getComponentName(name));\n}\nfunction handleConfirmFilter(params, checked, option) {\n  var $panel = params.$panel;\n  $panel.changeOption({}, checked, option);\n}\nfunction getNativeAttrs(renderOpts) {\n  var name = renderOpts.name, attrs = renderOpts.attrs;\n  if (name === \"input\") {\n    attrs = Object.assign({ type: \"text\" }, attrs);\n  }\n  return attrs;\n}\nfunction getInputImmediateModel(renderOpts) {\n  var name = renderOpts.name, immediate = renderOpts.immediate, props = renderOpts.props;\n  if (!immediate) {\n    if (name === \"$input\") {\n      var type = (props || {}).type;\n      return !(!type || type === \"text\" || type === \"number\" || type === \"integer\" || type === \"float\");\n    }\n    if (name === \"input\" || name === \"textarea\" || name === \"$textarea\") {\n      return false;\n    }\n    return true;\n  }\n  return immediate;\n}\nfunction getCellEditProps(renderOpts, params, value, defaultProps) {\n  var _a;\n  return XEUtils.assign({ immediate: getInputImmediateModel(renderOpts) }, defaultCompProps, defaultProps, renderOpts.props, (_a = {}, _a[componentDefaultModelProp] = value, _a));\n}\nfunction getCellEditFilterProps(renderOpts, params, value, defaultProps) {\n  var _a;\n  return XEUtils.assign({}, defaultCompProps, defaultProps, renderOpts.props, (_a = {}, _a[componentDefaultModelProp] = value, _a));\n}\nfunction getComponentFormItemProps(renderOpts, params, value, defaultProps) {\n  var _a;\n  return XEUtils.assign({}, defaultCompProps, defaultProps, renderOpts.props, (_a = {}, _a[componentDefaultModelProp] = value, _a));\n}\nfunction isImmediateCell(renderOpts, params) {\n  return params.$type === \"cell\" || getInputImmediateModel(renderOpts);\n}\nfunction getCellLabelVNs(renderOpts, params, cellLabel) {\n  var placeholder = renderOpts.placeholder;\n  return [\n    h(\"span\", {\n      class: \"vxe-cell--label\"\n    }, placeholder && isEmptyValue(cellLabel) ? [\n      h(\"span\", {\n        class: \"vxe-cell--placeholder\"\n      }, formatText(getFuncText(placeholder), 1))\n    ] : formatText(cellLabel, 1))\n  ];\n}\nfunction getElementOns(renderOpts, params, modelFunc, changeFunc) {\n  var events = renderOpts.events;\n  var modelEvent = getModelEvent(renderOpts);\n  var changeEvent = getChangeEvent(renderOpts);\n  var isSameEvent = changeEvent === modelEvent;\n  var ons = {};\n  if (events) {\n    XEUtils.objectEach(events, function(func, key) {\n      ons[getOnName(key)] = function() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        func.apply(void 0, __spreadArray([params], args, false));\n      };\n    });\n  }\n  if (modelFunc) {\n    ons[getOnName(modelEvent)] = function(targetEvnt) {\n      modelFunc(targetEvnt);\n      if (isSameEvent && changeFunc) {\n        changeFunc(targetEvnt);\n      }\n      if (events && events[modelEvent]) {\n        events[modelEvent](params, targetEvnt);\n      }\n    };\n  }\n  if (!isSameEvent && changeFunc) {\n    ons[getOnName(changeEvent)] = function() {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      changeFunc.apply(void 0, args);\n      if (events && events[changeEvent]) {\n        events[changeEvent].apply(events, __spreadArray([params], args, false));\n      }\n    };\n  }\n  return ons;\n}\nfunction getComponentOns(renderOpts, params, modelFunc, changeFunc) {\n  var events = renderOpts.events;\n  var modelEvent = getModelEvent(renderOpts);\n  var changeEvent = getChangeEvent(renderOpts);\n  var ons = {};\n  XEUtils.objectEach(events, function(func, key) {\n    ons[getOnName(key)] = function() {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      if (false) {\n        if (!XEUtils.isFunction(func)) {\n          errLog(\"vxe.error.errFunc\", [func]);\n        }\n      }\n      func.apply(void 0, __spreadArray([params], args, false));\n    };\n  });\n  if (modelFunc) {\n    ons[getOnName(modelEvent)] = function(targetEvnt) {\n      modelFunc(targetEvnt);\n      if (events && events[modelEvent]) {\n        events[modelEvent](params, targetEvnt);\n      }\n    };\n  }\n  if (changeFunc) {\n    ons[getOnName(changeEvent)] = function() {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      changeFunc.apply(void 0, args);\n      if (events && events[changeEvent]) {\n        events[changeEvent].apply(events, __spreadArray([params], args, false));\n      }\n    };\n  }\n  return ons;\n}\nfunction getEditOns(renderOpts, params) {\n  var $table = params.$table, row = params.row, column = params.column;\n  var name = renderOpts.name;\n  var model = column.model;\n  var isImmediate = isImmediateCell(renderOpts, params);\n  return getComponentOns(renderOpts, params, function(cellValue) {\n    if (isImmediate) {\n      setCellValue(row, column, cellValue);\n    } else {\n      model.update = true;\n      model.value = cellValue;\n    }\n  }, function(eventParams) {\n    if (!isImmediate && (name === \"$input\" || name === \"$textarea\")) {\n      var cellValue = eventParams.value;\n      model.update = true;\n      model.value = cellValue;\n      $table.updateStatus(params, cellValue);\n    } else {\n      $table.updateStatus(params);\n    }\n  });\n}\nfunction getFilterOns(renderOpts, params, option) {\n  return getComponentOns(renderOpts, params, function(value) {\n    option.data = value;\n  }, function() {\n    handleConfirmFilter(params, !XEUtils.eqNull(option.data), option);\n  });\n}\nfunction getItemOns(renderOpts, params) {\n  var $form = params.$form, data = params.data, property = params.property;\n  return getComponentOns(renderOpts, params, function(value) {\n    XEUtils.set(data, property, value);\n  }, function() {\n    $form.updateStatus(params);\n  });\n}\nfunction getNativeEditOns(renderOpts, params) {\n  var $table = params.$table, row = params.row, column = params.column;\n  var model = column.model;\n  return getElementOns(renderOpts, params, function(evnt) {\n    var cellValue = evnt.target.value;\n    if (isImmediateCell(renderOpts, params)) {\n      setCellValue(row, column, cellValue);\n    } else {\n      model.update = true;\n      model.value = cellValue;\n    }\n  }, function(evnt) {\n    var cellValue = evnt.target.value;\n    $table.updateStatus(params, cellValue);\n  });\n}\nfunction getNativeFilterOns(renderOpts, params, option) {\n  return getElementOns(renderOpts, params, function(evnt) {\n    option.data = evnt.target.value;\n  }, function() {\n    handleConfirmFilter(params, !XEUtils.eqNull(option.data), option);\n  });\n}\nfunction getNativeItemOns(renderOpts, params) {\n  var $form = params.$form, data = params.data, property = params.property;\n  return getElementOns(renderOpts, params, function(evnt) {\n    var itemValue = evnt.target.value;\n    XEUtils.set(data, property, itemValue);\n  }, function() {\n    $form.updateStatus(params);\n  });\n}\nfunction nativeEditRender(renderOpts, params) {\n  var row = params.row, column = params.column;\n  var name = renderOpts.name;\n  var cellValue = isImmediateCell(renderOpts, params) ? getCellValue(row, column) : column.model.value;\n  return [\n    h(name, __assign(__assign(__assign({ class: \"vxe-default-\".concat(name) }, getNativeAttrs(renderOpts)), { value: cellValue }), getNativeEditOns(renderOpts, params)))\n  ];\n}\nfunction defaultEditRender(renderOpts, params) {\n  var row = params.row, column = params.column;\n  var cellValue = getCellValue(row, column);\n  return [\n    h(getDefaultComponent(renderOpts), __assign(__assign({}, getCellEditProps(renderOpts, params, cellValue)), getEditOns(renderOpts, params)))\n  ];\n}\nfunction defaultButtonEditRender(renderOpts, params) {\n  return [\n    h(resolveComponent(\"vxe-button\"), __assign(__assign({}, getCellEditProps(renderOpts, params, null)), getComponentOns(renderOpts, params)))\n  ];\n}\nfunction defaultButtonsEditRender(renderOpts, params) {\n  return renderOpts.children.map(function(childRenderOpts) {\n    return defaultButtonEditRender(childRenderOpts, params)[0];\n  });\n}\nfunction renderNativeOptgroups(renderOpts, params, renderOptionsMethods) {\n  var optionGroups = renderOpts.optionGroups, _a = renderOpts.optionGroupProps, optionGroupProps = _a === void 0 ? {} : _a;\n  var groupOptions = optionGroupProps.options || \"options\";\n  var groupLabel = optionGroupProps.label || \"label\";\n  return optionGroups.map(function(group, gIndex) {\n    return h(\"optgroup\", {\n      key: gIndex,\n      label: group[groupLabel]\n    }, renderOptionsMethods(group[groupOptions], renderOpts, params));\n  });\n}\nfunction renderNativeOptions(options, renderOpts, params) {\n  var _a = renderOpts.optionProps, optionProps = _a === void 0 ? {} : _a;\n  var row = params.row, column = params.column;\n  var labelProp = optionProps.label || \"label\";\n  var valueProp = optionProps.value || \"value\";\n  var disabledProp = optionProps.disabled || \"disabled\";\n  var cellValue = isImmediateCell(renderOpts, params) ? getCellValue(row, column) : column.model.value;\n  return options.map(function(option, oIndex) {\n    return h(\"option\", {\n      key: oIndex,\n      value: option[valueProp],\n      disabled: option[disabledProp],\n      /* eslint-disable eqeqeq */\n      selected: option[valueProp] == cellValue\n    }, option[labelProp]);\n  });\n}\nfunction nativeFilterRender(renderOpts, params) {\n  var column = params.column;\n  var name = renderOpts.name;\n  var attrs = getNativeAttrs(renderOpts);\n  return column.filters.map(function(option, oIndex) {\n    return h(name, __assign(__assign(__assign({ key: oIndex, class: \"vxe-default-\".concat(name) }, attrs), { value: option.data }), getNativeFilterOns(renderOpts, params, option)));\n  });\n}\nfunction defaultFilterRender(renderOpts, params) {\n  var column = params.column;\n  return column.filters.map(function(option, oIndex) {\n    var optionValue = option.data;\n    return h(getDefaultComponent(renderOpts), __assign(__assign({ key: oIndex }, getCellEditFilterProps(renderOpts, renderOpts, optionValue)), getFilterOns(renderOpts, params, option)));\n  });\n}\nfunction handleFilterMethod(_a) {\n  var option = _a.option, row = _a.row, column = _a.column;\n  var data = option.data;\n  var cellValue = XEUtils.get(row, column.property);\n  return cellValue == data;\n}\nfunction nativeSelectEditRender(renderOpts, params) {\n  return [\n    h(\"select\", __assign(__assign({ class: \"vxe-default-select\" }, getNativeAttrs(renderOpts)), getNativeEditOns(renderOpts, params)), renderOpts.optionGroups ? renderNativeOptgroups(renderOpts, params, renderNativeOptions) : renderNativeOptions(renderOpts.options, renderOpts, params))\n  ];\n}\nfunction defaultSelectEditRender(renderOpts, params) {\n  var row = params.row, column = params.column;\n  var options = renderOpts.options, optionProps = renderOpts.optionProps, optionGroups = renderOpts.optionGroups, optionGroupProps = renderOpts.optionGroupProps;\n  var cellValue = getCellValue(row, column);\n  return [\n    h(getDefaultComponent(renderOpts), __assign(__assign({}, getCellEditProps(renderOpts, params, cellValue, { options, optionProps, optionGroups, optionGroupProps })), getEditOns(renderOpts, params)))\n  ];\n}\nfunction getSelectCellValue(renderOpts, _a) {\n  var row = _a.row, column = _a.column;\n  var _b = renderOpts.props, props = _b === void 0 ? {} : _b, options = renderOpts.options, optionGroups = renderOpts.optionGroups, _c = renderOpts.optionProps, optionProps = _c === void 0 ? {} : _c, _d = renderOpts.optionGroupProps, optionGroupProps = _d === void 0 ? {} : _d;\n  var cellValue = XEUtils.get(row, column.property);\n  var selectItem;\n  var labelProp = optionProps.label || \"label\";\n  var valueProp = optionProps.value || \"value\";\n  if (!isEmptyValue(cellValue)) {\n    return XEUtils.map(props.multiple ? cellValue : [cellValue], optionGroups ? function(value) {\n      var groupOptions = optionGroupProps.options || \"options\";\n      for (var index = 0; index < optionGroups.length; index++) {\n        selectItem = XEUtils.find(optionGroups[index][groupOptions], function(item) {\n          return item[valueProp] == value;\n        });\n        if (selectItem) {\n          break;\n        }\n      }\n      return selectItem ? selectItem[labelProp] : value;\n    } : function(value) {\n      selectItem = XEUtils.find(options, function(item) {\n        return item[valueProp] == value;\n      });\n      return selectItem ? selectItem[labelProp] : value;\n    }).join(\", \");\n  }\n  return \"\";\n}\nfunction nativeItemRender(renderOpts, params) {\n  var data = params.data, property = params.property;\n  var name = renderOpts.name;\n  var attrs = getNativeAttrs(renderOpts);\n  var itemValue = XEUtils.get(data, property);\n  return [\n    h(name, __assign(__assign(__assign({ class: \"vxe-default-\".concat(name) }, attrs), { value: attrs && name === \"input\" && (attrs.type === \"submit\" || attrs.type === \"reset\") ? null : itemValue }), getNativeItemOns(renderOpts, params)))\n  ];\n}\nfunction defaultItemRender(renderOpts, params) {\n  var data = params.data, property = params.property;\n  var itemValue = XEUtils.get(data, property);\n  return [\n    h(getDefaultComponent(renderOpts), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, itemValue)), getItemOns(renderOpts, params)))\n  ];\n}\nfunction defaultButtonItemRender(renderOpts, params) {\n  return [\n    h(resolveComponent(\"vxe-button\"), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, null)), getComponentOns(renderOpts, params)))\n  ];\n}\nfunction defaultButtonsItemRender(renderOpts, params) {\n  return renderOpts.children.map(function(childRenderOpts) {\n    return defaultButtonItemRender(childRenderOpts, params)[0];\n  });\n}\nfunction renderNativeFormOptions(options, renderOpts, params) {\n  var data = params.data, property = params.property;\n  var _a = renderOpts.optionProps, optionProps = _a === void 0 ? {} : _a;\n  var labelProp = optionProps.label || \"label\";\n  var valueProp = optionProps.value || \"value\";\n  var disabledProp = optionProps.disabled || \"disabled\";\n  var cellValue = XEUtils.get(data, property);\n  return options.map(function(item, oIndex) {\n    return h(\"option\", {\n      key: oIndex,\n      value: item[valueProp],\n      disabled: item[disabledProp],\n      /* eslint-disable eqeqeq */\n      selected: item[valueProp] == cellValue\n    }, item[labelProp]);\n  });\n}\nfunction handleExportSelectMethod(params) {\n  var row = params.row, column = params.column, options = params.options;\n  return options.original ? getCellValue(row, column) : getSelectCellValue(column.editRender || column.cellRender, params);\n}\nfunction defaultFormItemRadioAndCheckboxRender(renderOpts, params) {\n  var name = renderOpts.name, options = renderOpts.options, _a = renderOpts.optionProps, optionProps = _a === void 0 ? {} : _a;\n  var data = params.data, property = params.property;\n  var labelProp = optionProps.label || \"label\";\n  var valueProp = optionProps.value || \"value\";\n  var disabledProp = optionProps.disabled || \"disabled\";\n  var itemValue = XEUtils.get(data, property);\n  var compName = getComponentName(name);\n  if (options) {\n    return [\n      h(resolveComponent(\"\".concat(compName, \"-group\")), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, itemValue)), getItemOns(renderOpts, params)), {\n        default: function() {\n          return options.map(function(item, index) {\n            return h(resolveComponent(compName), {\n              key: index,\n              label: item[valueProp],\n              content: item[labelProp],\n              disabled: item[disabledProp]\n            });\n          });\n        }\n      })\n    ];\n  }\n  return [\n    h(resolveComponent(compName), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, itemValue)), getItemOns(renderOpts, params)))\n  ];\n}\nvar renderMap = {\n  input: {\n    autofocus: \"input\",\n    renderEdit: nativeEditRender,\n    renderDefault: nativeEditRender,\n    renderFilter: nativeFilterRender,\n    defaultFilterMethod: handleFilterMethod,\n    renderItemContent: nativeItemRender\n  },\n  textarea: {\n    autofocus: \"textarea\",\n    renderEdit: nativeEditRender,\n    renderItemContent: nativeItemRender\n  },\n  select: {\n    renderEdit: nativeSelectEditRender,\n    renderDefault: nativeSelectEditRender,\n    renderCell: function(renderOpts, params) {\n      return getCellLabelVNs(renderOpts, params, getSelectCellValue(renderOpts, params));\n    },\n    renderFilter: function(renderOpts, params) {\n      var column = params.column;\n      return column.filters.map(function(option, oIndex) {\n        return h(\"select\", __assign(__assign({ key: oIndex, class: \"vxe-default-select\" }, getNativeAttrs(renderOpts)), getNativeFilterOns(renderOpts, params, option)), renderOpts.optionGroups ? renderNativeOptgroups(renderOpts, params, renderNativeOptions) : renderNativeOptions(renderOpts.options, renderOpts, params));\n      });\n    },\n    defaultFilterMethod: handleFilterMethod,\n    renderItemContent: function(renderOpts, params) {\n      return [\n        h(\"select\", __assign(__assign({ class: \"vxe-default-select\" }, getNativeAttrs(renderOpts)), getNativeItemOns(renderOpts, params)), renderOpts.optionGroups ? renderNativeOptgroups(renderOpts, params, renderNativeFormOptions) : renderNativeFormOptions(renderOpts.options, renderOpts, params))\n      ];\n    },\n    cellExportMethod: handleExportSelectMethod\n  },\n  $input: {\n    autofocus: \".vxe-input--inner\",\n    renderEdit: defaultEditRender,\n    renderCell: function(renderOpts, params) {\n      var _a = renderOpts.props, props = _a === void 0 ? {} : _a;\n      var row = params.row, column = params.column;\n      var digits = props.digits || GlobalConfig.input.digits;\n      var cellValue = XEUtils.get(row, column.property);\n      if (cellValue) {\n        switch (props.type) {\n          case \"date\":\n          case \"week\":\n          case \"month\":\n          case \"year\":\n            cellValue = getLabelFormatDate(cellValue, props);\n            break;\n          case \"float\":\n            cellValue = XEUtils.toFixed(XEUtils.floor(cellValue, digits), digits);\n            break;\n        }\n      }\n      return getCellLabelVNs(renderOpts, params, cellValue);\n    },\n    renderDefault: defaultEditRender,\n    renderFilter: defaultFilterRender,\n    defaultFilterMethod: handleFilterMethod,\n    renderItemContent: defaultItemRender\n  },\n  $textarea: {\n    autofocus: \".vxe-textarea--inner\",\n    renderItemContent: defaultItemRender\n  },\n  $button: {\n    renderDefault: defaultButtonEditRender,\n    renderItemContent: defaultButtonItemRender\n  },\n  $buttons: {\n    renderDefault: defaultButtonsEditRender,\n    renderItemContent: defaultButtonsItemRender\n  },\n  $select: {\n    autofocus: \".vxe-input--inner\",\n    renderEdit: defaultSelectEditRender,\n    renderDefault: defaultSelectEditRender,\n    renderCell: function(renderOpts, params) {\n      return getCellLabelVNs(renderOpts, params, getSelectCellValue(renderOpts, params));\n    },\n    renderFilter: function(renderOpts, params) {\n      var column = params.column;\n      var options = renderOpts.options, optionProps = renderOpts.optionProps, optionGroups = renderOpts.optionGroups, optionGroupProps = renderOpts.optionGroupProps;\n      return column.filters.map(function(option, oIndex) {\n        var optionValue = option.data;\n        return h(getDefaultComponent(renderOpts), __assign(__assign({ key: oIndex }, getCellEditFilterProps(renderOpts, params, optionValue, { options, optionProps, optionGroups, optionGroupProps })), getFilterOns(renderOpts, params, option)));\n      });\n    },\n    defaultFilterMethod: handleFilterMethod,\n    renderItemContent: function(renderOpts, params) {\n      var data = params.data, property = params.property;\n      var options = renderOpts.options, optionProps = renderOpts.optionProps, optionGroups = renderOpts.optionGroups, optionGroupProps = renderOpts.optionGroupProps;\n      var itemValue = XEUtils.get(data, property);\n      return [\n        h(getDefaultComponent(renderOpts), __assign(__assign({}, getComponentFormItemProps(renderOpts, params, itemValue, { options, optionProps, optionGroups, optionGroupProps })), getItemOns(renderOpts, params)))\n      ];\n    },\n    cellExportMethod: handleExportSelectMethod\n  },\n  $radio: {\n    autofocus: \".vxe-radio--input\",\n    renderItemContent: defaultFormItemRadioAndCheckboxRender\n  },\n  $checkbox: {\n    autofocus: \".vxe-checkbox--input\",\n    renderItemContent: defaultFormItemRadioAndCheckboxRender\n  },\n  $switch: {\n    autofocus: \".vxe-switch--button\",\n    renderEdit: defaultEditRender,\n    renderDefault: defaultEditRender,\n    renderItemContent: defaultItemRender\n  }\n};\nexport var renderer = {\n  mixin: function(opts) {\n    XEUtils.each(opts, function(options, name) {\n      return renderer.add(name, options);\n    });\n    return renderer;\n  },\n  get: function(name) {\n    return renderMap[name] || null;\n  },\n  add: function(name, options) {\n    if (name && options) {\n      var renders_1 = renderMap[name];\n      if (renders_1) {\n        if (false) {\n          XEUtils.each(options, function(val, key) {\n            if (!XEUtils.eqNull(renders_1[key]) && renders_1[key] !== val) {\n              warnLog(\"vxe.error.coverProp\", [\"Renderer.\".concat(name), key]);\n            }\n          });\n        }\n        Object.assign(renders_1, options);\n      } else {\n        renderMap[name] = options;\n      }\n    }\n    return renderer;\n  },\n  delete: function(name) {\n    delete renderMap[name];\n    return renderer;\n  }\n};\n",
      "start": 1714699767739,
      "end": 1714699767991,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1714699767991,
      "end": 1714699767991,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767991,
      "end": 1714699767991,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767991,
      "end": 1714699767991,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767991,
      "end": 1714699767991,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767991,
      "end": 1714699767995,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767995,
      "end": 1714699767995,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767995,
      "end": 1714699767995,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767995,
      "end": 1714699767995,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767995,
      "end": 1714699767995,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767995,
      "end": 1714699767996,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767996,
      "end": 1714699767996,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767996,
      "end": 1714699767996,
      "order": "normal"
    }
  ]
}

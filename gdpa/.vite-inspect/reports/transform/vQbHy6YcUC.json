{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/xorWith.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import arrayFilter from './_arrayFilter.js';\nimport baseRest from './_baseRest.js';\nimport baseXor from './_baseXor.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport last from './last.js';\n\n/**\n * This method is like `_.xor` except that it accepts `comparator` which is\n * invoked to compare elements of `arrays`. The order of result values is\n * determined by the order they occur in the arrays. The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.xorWith(objects, others, _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n */\nvar xorWith = baseRest(function(arrays) {\n  var comparator = last(arrays);\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n});\n\nexport default xorWith;\n",
      "start": 1714699768578,
      "end": 1714699768607,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768607,
      "end": 1714699768607,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768607,
      "end": 1714699768607,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768607,
      "end": 1714699768607,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768607,
      "end": 1714699768607,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768607,
      "end": 1714699768607,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768607,
      "end": 1714699768607,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import arrayFilter from './_arrayFilter.js';\nimport baseRest from './_baseRest.js';\nimport baseXor from './_baseXor.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport last from './last.js';\n\n/**\n * This method is like `_.xor` except that it accepts `comparator` which is\n * invoked to compare elements of `arrays`. The order of result values is\n * determined by the order they occur in the arrays. The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.xorWith(objects, others, _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n */\nvar xorWith = baseRest(function(arrays) {\n  var comparator = last(arrays);\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n});\n\nexport default xorWith;\n",
      "start": 1714699768607,
      "end": 1714699768607,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768607,
      "end": 1714699768607,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699768607,
      "end": 1714699768607,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699768607,
      "end": 1714699768607,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768607,
      "end": 1714699768607,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768607,
      "end": 1714699768607,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768607,
      "end": 1714699768607,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768607,
      "end": 1714699768608,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768608,
      "end": 1714699768608,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768608,
      "end": 1714699768608,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768608,
      "end": 1714699768608,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768608,
      "end": 1714699768608,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768608,
      "end": 1714699768608,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768608,
      "end": 1714699768608,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768608,
      "end": 1714699768608,
      "order": "normal"
    }
  ]
}

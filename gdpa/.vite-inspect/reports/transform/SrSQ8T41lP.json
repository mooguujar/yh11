{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/pager/src/pager.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { defineComponent, h, computed, inject, resolveComponent, ref, reactive, nextTick, watch } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { hasEventKey, EVENT_KEYS } from '../../tools/event';\nimport { useSize } from '../../hooks/size';\nimport { errLog } from '../../tools/log';\nexport default defineComponent({\n    name: 'VxePager',\n    props: {\n        size: { type: String, default: function () { return GlobalConfig.pager.size || GlobalConfig.size; } },\n        // 自定义布局\n        layouts: { type: Array, default: function () { return GlobalConfig.pager.layouts || ['PrevJump', 'PrevPage', 'Jump', 'PageCount', 'NextPage', 'NextJump', 'Sizes', 'Total']; } },\n        // 当前页\n        currentPage: { type: Number, default: 1 },\n        // 加载中\n        loading: Boolean,\n        // 每页大小\n        pageSize: { type: Number, default: function () { return GlobalConfig.pager.pageSize || 10; } },\n        // 总条数\n        total: { type: Number, default: 0 },\n        // 显示页码按钮的数量\n        pagerCount: { type: Number, default: function () { return GlobalConfig.pager.pagerCount || 7; } },\n        // 每页大小选项列表\n        pageSizes: { type: Array, default: function () { return GlobalConfig.pager.pageSizes || [10, 15, 20, 50, 100]; } },\n        // 列对其方式\n        align: { type: String, default: function () { return GlobalConfig.pager.align; } },\n        // 带边框\n        border: { type: Boolean, default: function () { return GlobalConfig.pager.border; } },\n        // 带背景颜色\n        background: { type: Boolean, default: function () { return GlobalConfig.pager.background; } },\n        // 配套的样式\n        perfect: { type: Boolean, default: function () { return GlobalConfig.pager.perfect; } },\n        // 当只有一页时隐藏\n        autoHidden: { type: Boolean, default: function () { return GlobalConfig.pager.autoHidden; } },\n        transfer: { type: Boolean, default: function () { return GlobalConfig.pager.transfer; } },\n        className: [String, Function],\n        // 自定义图标\n        iconPrevPage: String,\n        iconJumpPrev: String,\n        iconJumpNext: String,\n        iconNextPage: String,\n        iconJumpMore: String,\n        iconHomePage: String,\n        iconEndPage: String\n    },\n    emits: [\n        'update:pageSize',\n        'update:currentPage',\n        'page-change'\n    ],\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var xID = XEUtils.uniqueId();\n        var computeSize = useSize(props);\n        var $xegrid = inject('$xegrid', null);\n        var reactData = reactive({\n            inpCurrPage: props.currentPage\n        });\n        var refElem = ref();\n        var refMaps = {\n            refElem: refElem\n        };\n        var $xepager = {\n            xID: xID,\n            props: props,\n            context: context,\n            getRefMaps: function () { return refMaps; }\n        };\n        var pagerMethods = {};\n        var pagerPrivateMethods = {};\n        var getPageCount = function (total, size) {\n            return Math.max(Math.ceil(total / size), 1);\n        };\n        var computePageCount = computed(function () {\n            return getPageCount(props.total, props.pageSize);\n        });\n        var jumpPageEvent = function (evnt, currentPage) {\n            emit('update:currentPage', currentPage);\n            if (evnt && currentPage !== props.currentPage) {\n                pagerMethods.dispatchEvent('page-change', { type: 'current', pageSize: props.pageSize, currentPage: currentPage }, evnt);\n            }\n        };\n        var changeCurrentPage = function (currentPage, evnt) {\n            emit('update:currentPage', currentPage);\n            if (evnt && currentPage !== props.currentPage) {\n                pagerMethods.dispatchEvent('page-change', { type: 'current', pageSize: props.pageSize, currentPage: currentPage }, evnt);\n            }\n        };\n        var triggerJumpEvent = function (evnt) {\n            var inputElem = evnt.target;\n            var inpValue = XEUtils.toInteger(inputElem.value);\n            var pageCount = computePageCount.value;\n            var current = inpValue <= 0 ? 1 : inpValue >= pageCount ? pageCount : inpValue;\n            var currPage = XEUtils.toValueString(current);\n            inputElem.value = currPage;\n            reactData.inpCurrPage = currPage;\n            changeCurrentPage(current, evnt);\n        };\n        var computeNumList = computed(function () {\n            var pagerCount = props.pagerCount;\n            var pageCount = computePageCount.value;\n            var len = pageCount > pagerCount ? pagerCount - 2 : pagerCount;\n            var rest = [];\n            for (var index = 0; index < len; index++) {\n                rest.push(index);\n            }\n            return rest;\n        });\n        var computeOffsetNumber = computed(function () {\n            return Math.floor((props.pagerCount - 2) / 2);\n        });\n        var computeSizeList = computed(function () {\n            return props.pageSizes.map(function (item) {\n                if (XEUtils.isNumber(item)) {\n                    return {\n                        value: item,\n                        label: \"\".concat(GlobalConfig.i18n('vxe.pager.pagesize', [item]))\n                    };\n                }\n                return __assign({ value: '', label: '' }, item);\n            });\n        });\n        var handleHomePage = function (evnt) {\n            var currentPage = props.currentPage;\n            if (currentPage > 1) {\n                changeCurrentPage(1, evnt);\n            }\n        };\n        var handleEndPage = function (evnt) {\n            var currentPage = props.currentPage;\n            var pageCount = computePageCount.value;\n            if (currentPage < pageCount) {\n                changeCurrentPage(pageCount, evnt);\n            }\n        };\n        var handlePrevPage = function (evnt) {\n            var currentPage = props.currentPage;\n            var pageCount = computePageCount.value;\n            if (currentPage > 1) {\n                changeCurrentPage(Math.min(pageCount, Math.max(currentPage - 1, 1)), evnt);\n            }\n        };\n        var handleNextPage = function (evnt) {\n            var currentPage = props.currentPage;\n            var pageCount = computePageCount.value;\n            if (currentPage < pageCount) {\n                changeCurrentPage(Math.min(pageCount, currentPage + 1), evnt);\n            }\n        };\n        var handlePrevJump = function (evnt) {\n            var numList = computeNumList.value;\n            changeCurrentPage(Math.max(props.currentPage - numList.length, 1), evnt);\n        };\n        var handleNextJump = function (evnt) {\n            var pageCount = computePageCount.value;\n            var numList = computeNumList.value;\n            changeCurrentPage(Math.min(props.currentPage + numList.length, pageCount), evnt);\n        };\n        var pageSizeEvent = function (params) {\n            var value = params.value;\n            var pageSize = XEUtils.toNumber(value);\n            var pageCount = getPageCount(props.total, pageSize);\n            var currentPage = props.currentPage;\n            if (currentPage > pageCount) {\n                currentPage = pageCount;\n                emit('update:currentPage', pageCount);\n            }\n            emit('update:pageSize', pageSize);\n            pagerMethods.dispatchEvent('page-change', { type: 'size', pageSize: pageSize, currentPage: currentPage });\n        };\n        var jumpInputEvent = function (evnt) {\n            var inputElem = evnt.target;\n            reactData.inpCurrPage = inputElem.value;\n        };\n        var jumpKeydownEvent = function (evnt) {\n            if (hasEventKey(evnt, EVENT_KEYS.ENTER)) {\n                triggerJumpEvent(evnt);\n            }\n            else if (hasEventKey(evnt, EVENT_KEYS.ARROW_UP)) {\n                evnt.preventDefault();\n                handleNextPage(evnt);\n            }\n            else if (hasEventKey(evnt, EVENT_KEYS.ARROW_DOWN)) {\n                evnt.preventDefault();\n                handlePrevPage(evnt);\n            }\n        };\n        // 第一页\n        var renderHomePage = function () {\n            return h('button', {\n                class: ['vxe-pager--prev-btn', {\n                        'is--disabled': props.currentPage <= 1\n                    }],\n                type: 'button',\n                title: GlobalConfig.i18n('vxe.pager.homePageTitle'),\n                onClick: handleHomePage\n            }, [\n                h('i', {\n                    class: ['vxe-pager--btn-icon', props.iconHomePage || GlobalConfig.icon.PAGER_HOME]\n                })\n            ]);\n        };\n        // 上一页\n        var renderPrevPage = function () {\n            return h('button', {\n                class: ['vxe-pager--prev-btn', {\n                        'is--disabled': props.currentPage <= 1\n                    }],\n                type: 'button',\n                title: GlobalConfig.i18n('vxe.pager.prevPageTitle'),\n                onClick: handlePrevPage\n            }, [\n                h('i', {\n                    class: ['vxe-pager--btn-icon', props.iconPrevPage || GlobalConfig.icon.PAGER_PREV_PAGE]\n                })\n            ]);\n        };\n        // 向上翻页\n        var renderPrevJump = function (tagName) {\n            return h(tagName || 'button', {\n                class: ['vxe-pager--jump-prev', {\n                        'is--fixed': !tagName,\n                        'is--disabled': props.currentPage <= 1\n                    }],\n                type: 'button',\n                title: GlobalConfig.i18n('vxe.pager.prevJumpTitle'),\n                onClick: handlePrevJump\n            }, [\n                tagName ? h('i', {\n                    class: ['vxe-pager--jump-more-icon', props.iconJumpMore || GlobalConfig.icon.PAGER_JUMP_MORE]\n                }) : null,\n                h('i', {\n                    class: ['vxe-pager--jump-icon', props.iconJumpPrev || GlobalConfig.icon.PAGER_JUMP_PREV]\n                })\n            ]);\n        };\n        // 向下翻页\n        var renderNextJump = function (tagName) {\n            var pageCount = computePageCount.value;\n            return h(tagName || 'button', {\n                class: ['vxe-pager--jump-next', {\n                        'is--fixed': !tagName,\n                        'is--disabled': props.currentPage >= pageCount\n                    }],\n                type: 'button',\n                title: GlobalConfig.i18n('vxe.pager.nextJumpTitle'),\n                onClick: handleNextJump\n            }, [\n                tagName ? h('i', {\n                    class: ['vxe-pager--jump-more-icon', props.iconJumpMore || GlobalConfig.icon.PAGER_JUMP_MORE]\n                }) : null,\n                h('i', {\n                    class: ['vxe-pager--jump-icon', props.iconJumpNext || GlobalConfig.icon.PAGER_JUMP_NEXT]\n                })\n            ]);\n        };\n        // 下一页\n        var renderNextPage = function () {\n            var pageCount = computePageCount.value;\n            return h('button', {\n                class: ['vxe-pager--next-btn', {\n                        'is--disabled': props.currentPage >= pageCount\n                    }],\n                type: 'button',\n                title: GlobalConfig.i18n('vxe.pager.nextPageTitle'),\n                onClick: handleNextPage\n            }, [\n                h('i', {\n                    class: ['vxe-pager--btn-icon', props.iconNextPage || GlobalConfig.icon.PAGER_NEXT_PAGE]\n                })\n            ]);\n        };\n        // 最后一页\n        var renderEndPage = function () {\n            var pageCount = computePageCount.value;\n            return h('button', {\n                class: ['vxe-pager--prev-btn', {\n                        'is--disabled': props.currentPage >= pageCount\n                    }],\n                type: 'button',\n                title: GlobalConfig.i18n('vxe.pager.endPageTitle'),\n                onClick: handleEndPage\n            }, [\n                h('i', {\n                    class: ['vxe-pager--btn-icon', props.iconEndPage || GlobalConfig.icon.PAGER_END]\n                })\n            ]);\n        };\n        // 页数\n        var renderNumber = function (showJump) {\n            var currentPage = props.currentPage, pagerCount = props.pagerCount;\n            var nums = [];\n            var pageCount = computePageCount.value;\n            var numList = computeNumList.value;\n            var offsetNumber = computeOffsetNumber.value;\n            var isOv = pageCount > pagerCount;\n            var isLt = isOv && currentPage > offsetNumber + 1;\n            var isGt = isOv && currentPage < pageCount - offsetNumber;\n            var startNumber = 1;\n            if (isOv) {\n                if (currentPage >= pageCount - offsetNumber) {\n                    startNumber = Math.max(pageCount - numList.length + 1, 1);\n                }\n                else {\n                    startNumber = Math.max(currentPage - offsetNumber, 1);\n                }\n            }\n            if (showJump && isLt) {\n                nums.push(h('button', {\n                    class: 'vxe-pager--num-btn',\n                    type: 'button',\n                    onClick: function (evnt) { return jumpPageEvent(evnt, 1); }\n                }, 1), renderPrevJump('span'));\n            }\n            numList.forEach(function (item, index) {\n                var number = startNumber + index;\n                if (number <= pageCount) {\n                    nums.push(h('button', {\n                        key: number,\n                        class: ['vxe-pager--num-btn', {\n                                'is--active': currentPage === number\n                            }],\n                        type: 'button',\n                        onClick: function (evnt) { return jumpPageEvent(evnt, number); }\n                    }, number));\n                }\n            });\n            if (showJump && isGt) {\n                nums.push(renderNextJump('button'), h('button', {\n                    class: 'vxe-pager--num-btn',\n                    type: 'button',\n                    onClick: function (evnt) { return jumpPageEvent(evnt, pageCount); }\n                }, pageCount));\n            }\n            return h('span', {\n                class: 'vxe-pager--btn-wrapper'\n            }, nums);\n        };\n        // jumpNumber\n        var renderJumpNumber = function () {\n            return renderNumber(true);\n        };\n        // sizes\n        var renderSizes = function () {\n            var sizeList = computeSizeList.value;\n            return h(resolveComponent('vxe-select'), {\n                class: 'vxe-pager--sizes',\n                modelValue: props.pageSize,\n                placement: 'top',\n                transfer: props.transfer,\n                options: sizeList,\n                onChange: pageSizeEvent\n            });\n        };\n        // Jump\n        var renderJump = function (isFull) {\n            return h('span', {\n                class: 'vxe-pager--jump'\n            }, [\n                isFull ? h('span', {\n                    class: 'vxe-pager--goto-text'\n                }, GlobalConfig.i18n('vxe.pager.goto')) : null,\n                h('input', {\n                    class: 'vxe-pager--goto',\n                    value: reactData.inpCurrPage,\n                    type: 'text',\n                    autocomplete: 'off',\n                    onInput: jumpInputEvent,\n                    onKeydown: jumpKeydownEvent,\n                    onBlur: triggerJumpEvent\n                }),\n                isFull ? h('span', {\n                    class: 'vxe-pager--classifier-text'\n                }, GlobalConfig.i18n('vxe.pager.pageClassifier')) : null\n            ]);\n        };\n        // FullJump\n        var renderFullJump = function () {\n            return renderJump(true);\n        };\n        // PageCount\n        var renderPageCount = function () {\n            var pageCount = computePageCount.value;\n            return h('span', {\n                class: 'vxe-pager--count'\n            }, [\n                h('span', {\n                    class: 'vxe-pager--separator'\n                }),\n                h('span', pageCount)\n            ]);\n        };\n        // total\n        var renderTotal = function () {\n            return h('span', {\n                class: 'vxe-pager--total'\n            }, GlobalConfig.i18n('vxe.pager.total', [props.total]));\n        };\n        pagerMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $pager: $xepager, $event: evnt }, params));\n            },\n            homePage: function () {\n                handleHomePage();\n                return nextTick();\n            },\n            endPage: function () {\n                handleEndPage();\n                return nextTick();\n            },\n            prevPage: function () {\n                handlePrevPage();\n                return nextTick();\n            },\n            nextPage: function () {\n                handleNextPage();\n                return nextTick();\n            },\n            prevJump: function () {\n                handlePrevJump();\n                return nextTick();\n            },\n            nextJump: function () {\n                handleNextJump();\n                return nextTick();\n            }\n        };\n        pagerPrivateMethods = {\n            handlePrevPage: handlePrevPage,\n            handleNextPage: handleNextPage,\n            handlePrevJump: handlePrevJump,\n            handleNextJump: handleNextJump\n        };\n        Object.assign($xepager, pagerMethods, pagerPrivateMethods);\n        watch(function () { return props.currentPage; }, function (value) {\n            reactData.inpCurrPage = value;\n        });\n        var renderVN = function () {\n            var _a;\n            var align = props.align, layouts = props.layouts, className = props.className;\n            var childNodes = [];\n            var vSize = computeSize.value;\n            var pageCount = computePageCount.value;\n            if (slots.left) {\n                childNodes.push(h('span', {\n                    class: 'vxe-pager--left-wrapper'\n                }, slots.left({ $grid: $xegrid })));\n            }\n            layouts.forEach(function (name) {\n                var renderFn;\n                switch (name) {\n                    case 'Home':\n                        renderFn = renderHomePage;\n                        break;\n                    case 'PrevJump':\n                        renderFn = renderPrevJump;\n                        break;\n                    case 'PrevPage':\n                        renderFn = renderPrevPage;\n                        break;\n                    case 'Number':\n                        renderFn = renderNumber;\n                        break;\n                    case 'JumpNumber':\n                        renderFn = renderJumpNumber;\n                        break;\n                    case 'NextPage':\n                        renderFn = renderNextPage;\n                        break;\n                    case 'NextJump':\n                        renderFn = renderNextJump;\n                        break;\n                    case 'End':\n                        renderFn = renderEndPage;\n                        break;\n                    case 'Sizes':\n                        renderFn = renderSizes;\n                        break;\n                    case 'FullJump':\n                        renderFn = renderFullJump;\n                        break;\n                    case 'Jump':\n                        renderFn = renderJump;\n                        break;\n                    case 'PageCount':\n                        renderFn = renderPageCount;\n                        break;\n                    case 'Total':\n                        renderFn = renderTotal;\n                        break;\n                }\n                if (renderFn) {\n                    childNodes.push(renderFn());\n                }\n                else {\n                    if (process.env.NODE_ENV === 'development') {\n                        errLog('vxe.error.notProp', [\"layouts -> \".concat(name)]);\n                    }\n                }\n            });\n            if (slots.right) {\n                childNodes.push(h('span', {\n                    class: 'vxe-pager--right-wrapper'\n                }, slots.right({ $grid: $xegrid })));\n            }\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-pager', className ? (XEUtils.isFunction(className) ? className({ $pager: $xepager }) : className) : '', (_a = {},\n                        _a[\"size--\".concat(vSize)] = vSize,\n                        _a[\"align--\".concat(align)] = align,\n                        _a['is--border'] = props.border,\n                        _a['is--background'] = props.background,\n                        _a['is--perfect'] = props.perfect,\n                        _a['is--hidden'] = props.autoHidden && pageCount === 1,\n                        _a['is--loading'] = props.loading,\n                        _a)]\n            }, [\n                h('div', {\n                    class: 'vxe-pager--wrapper'\n                }, childNodes)\n            ]);\n        };\n        $xepager.renderVN = renderVN;\n        return $xepager;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767739,
      "end": 1714699767777,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { defineComponent, h, computed, inject, resolveComponent, ref, reactive, nextTick, watch } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { hasEventKey, EVENT_KEYS } from '../../tools/event';\nimport { useSize } from '../../hooks/size';\nimport { errLog } from '../../tools/log';\nexport default defineComponent({\n    name: 'VxePager',\n    props: {\n        size: { type: String, default: function () { return GlobalConfig.pager.size || GlobalConfig.size; } },\n        // 自定义布局\n        layouts: { type: Array, default: function () { return GlobalConfig.pager.layouts || ['PrevJump', 'PrevPage', 'Jump', 'PageCount', 'NextPage', 'NextJump', 'Sizes', 'Total']; } },\n        // 当前页\n        currentPage: { type: Number, default: 1 },\n        // 加载中\n        loading: Boolean,\n        // 每页大小\n        pageSize: { type: Number, default: function () { return GlobalConfig.pager.pageSize || 10; } },\n        // 总条数\n        total: { type: Number, default: 0 },\n        // 显示页码按钮的数量\n        pagerCount: { type: Number, default: function () { return GlobalConfig.pager.pagerCount || 7; } },\n        // 每页大小选项列表\n        pageSizes: { type: Array, default: function () { return GlobalConfig.pager.pageSizes || [10, 15, 20, 50, 100]; } },\n        // 列对其方式\n        align: { type: String, default: function () { return GlobalConfig.pager.align; } },\n        // 带边框\n        border: { type: Boolean, default: function () { return GlobalConfig.pager.border; } },\n        // 带背景颜色\n        background: { type: Boolean, default: function () { return GlobalConfig.pager.background; } },\n        // 配套的样式\n        perfect: { type: Boolean, default: function () { return GlobalConfig.pager.perfect; } },\n        // 当只有一页时隐藏\n        autoHidden: { type: Boolean, default: function () { return GlobalConfig.pager.autoHidden; } },\n        transfer: { type: Boolean, default: function () { return GlobalConfig.pager.transfer; } },\n        className: [String, Function],\n        // 自定义图标\n        iconPrevPage: String,\n        iconJumpPrev: String,\n        iconJumpNext: String,\n        iconNextPage: String,\n        iconJumpMore: String,\n        iconHomePage: String,\n        iconEndPage: String\n    },\n    emits: [\n        'update:pageSize',\n        'update:currentPage',\n        'page-change'\n    ],\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var xID = XEUtils.uniqueId();\n        var computeSize = useSize(props);\n        var $xegrid = inject('$xegrid', null);\n        var reactData = reactive({\n            inpCurrPage: props.currentPage\n        });\n        var refElem = ref();\n        var refMaps = {\n            refElem: refElem\n        };\n        var $xepager = {\n            xID: xID,\n            props: props,\n            context: context,\n            getRefMaps: function () { return refMaps; }\n        };\n        var pagerMethods = {};\n        var pagerPrivateMethods = {};\n        var getPageCount = function (total, size) {\n            return Math.max(Math.ceil(total / size), 1);\n        };\n        var computePageCount = computed(function () {\n            return getPageCount(props.total, props.pageSize);\n        });\n        var jumpPageEvent = function (evnt, currentPage) {\n            emit('update:currentPage', currentPage);\n            if (evnt && currentPage !== props.currentPage) {\n                pagerMethods.dispatchEvent('page-change', { type: 'current', pageSize: props.pageSize, currentPage: currentPage }, evnt);\n            }\n        };\n        var changeCurrentPage = function (currentPage, evnt) {\n            emit('update:currentPage', currentPage);\n            if (evnt && currentPage !== props.currentPage) {\n                pagerMethods.dispatchEvent('page-change', { type: 'current', pageSize: props.pageSize, currentPage: currentPage }, evnt);\n            }\n        };\n        var triggerJumpEvent = function (evnt) {\n            var inputElem = evnt.target;\n            var inpValue = XEUtils.toInteger(inputElem.value);\n            var pageCount = computePageCount.value;\n            var current = inpValue <= 0 ? 1 : inpValue >= pageCount ? pageCount : inpValue;\n            var currPage = XEUtils.toValueString(current);\n            inputElem.value = currPage;\n            reactData.inpCurrPage = currPage;\n            changeCurrentPage(current, evnt);\n        };\n        var computeNumList = computed(function () {\n            var pagerCount = props.pagerCount;\n            var pageCount = computePageCount.value;\n            var len = pageCount > pagerCount ? pagerCount - 2 : pagerCount;\n            var rest = [];\n            for (var index = 0; index < len; index++) {\n                rest.push(index);\n            }\n            return rest;\n        });\n        var computeOffsetNumber = computed(function () {\n            return Math.floor((props.pagerCount - 2) / 2);\n        });\n        var computeSizeList = computed(function () {\n            return props.pageSizes.map(function (item) {\n                if (XEUtils.isNumber(item)) {\n                    return {\n                        value: item,\n                        label: \"\".concat(GlobalConfig.i18n('vxe.pager.pagesize', [item]))\n                    };\n                }\n                return __assign({ value: '', label: '' }, item);\n            });\n        });\n        var handleHomePage = function (evnt) {\n            var currentPage = props.currentPage;\n            if (currentPage > 1) {\n                changeCurrentPage(1, evnt);\n            }\n        };\n        var handleEndPage = function (evnt) {\n            var currentPage = props.currentPage;\n            var pageCount = computePageCount.value;\n            if (currentPage < pageCount) {\n                changeCurrentPage(pageCount, evnt);\n            }\n        };\n        var handlePrevPage = function (evnt) {\n            var currentPage = props.currentPage;\n            var pageCount = computePageCount.value;\n            if (currentPage > 1) {\n                changeCurrentPage(Math.min(pageCount, Math.max(currentPage - 1, 1)), evnt);\n            }\n        };\n        var handleNextPage = function (evnt) {\n            var currentPage = props.currentPage;\n            var pageCount = computePageCount.value;\n            if (currentPage < pageCount) {\n                changeCurrentPage(Math.min(pageCount, currentPage + 1), evnt);\n            }\n        };\n        var handlePrevJump = function (evnt) {\n            var numList = computeNumList.value;\n            changeCurrentPage(Math.max(props.currentPage - numList.length, 1), evnt);\n        };\n        var handleNextJump = function (evnt) {\n            var pageCount = computePageCount.value;\n            var numList = computeNumList.value;\n            changeCurrentPage(Math.min(props.currentPage + numList.length, pageCount), evnt);\n        };\n        var pageSizeEvent = function (params) {\n            var value = params.value;\n            var pageSize = XEUtils.toNumber(value);\n            var pageCount = getPageCount(props.total, pageSize);\n            var currentPage = props.currentPage;\n            if (currentPage > pageCount) {\n                currentPage = pageCount;\n                emit('update:currentPage', pageCount);\n            }\n            emit('update:pageSize', pageSize);\n            pagerMethods.dispatchEvent('page-change', { type: 'size', pageSize: pageSize, currentPage: currentPage });\n        };\n        var jumpInputEvent = function (evnt) {\n            var inputElem = evnt.target;\n            reactData.inpCurrPage = inputElem.value;\n        };\n        var jumpKeydownEvent = function (evnt) {\n            if (hasEventKey(evnt, EVENT_KEYS.ENTER)) {\n                triggerJumpEvent(evnt);\n            }\n            else if (hasEventKey(evnt, EVENT_KEYS.ARROW_UP)) {\n                evnt.preventDefault();\n                handleNextPage(evnt);\n            }\n            else if (hasEventKey(evnt, EVENT_KEYS.ARROW_DOWN)) {\n                evnt.preventDefault();\n                handlePrevPage(evnt);\n            }\n        };\n        // 第一页\n        var renderHomePage = function () {\n            return h('button', {\n                class: ['vxe-pager--prev-btn', {\n                        'is--disabled': props.currentPage <= 1\n                    }],\n                type: 'button',\n                title: GlobalConfig.i18n('vxe.pager.homePageTitle'),\n                onClick: handleHomePage\n            }, [\n                h('i', {\n                    class: ['vxe-pager--btn-icon', props.iconHomePage || GlobalConfig.icon.PAGER_HOME]\n                })\n            ]);\n        };\n        // 上一页\n        var renderPrevPage = function () {\n            return h('button', {\n                class: ['vxe-pager--prev-btn', {\n                        'is--disabled': props.currentPage <= 1\n                    }],\n                type: 'button',\n                title: GlobalConfig.i18n('vxe.pager.prevPageTitle'),\n                onClick: handlePrevPage\n            }, [\n                h('i', {\n                    class: ['vxe-pager--btn-icon', props.iconPrevPage || GlobalConfig.icon.PAGER_PREV_PAGE]\n                })\n            ]);\n        };\n        // 向上翻页\n        var renderPrevJump = function (tagName) {\n            return h(tagName || 'button', {\n                class: ['vxe-pager--jump-prev', {\n                        'is--fixed': !tagName,\n                        'is--disabled': props.currentPage <= 1\n                    }],\n                type: 'button',\n                title: GlobalConfig.i18n('vxe.pager.prevJumpTitle'),\n                onClick: handlePrevJump\n            }, [\n                tagName ? h('i', {\n                    class: ['vxe-pager--jump-more-icon', props.iconJumpMore || GlobalConfig.icon.PAGER_JUMP_MORE]\n                }) : null,\n                h('i', {\n                    class: ['vxe-pager--jump-icon', props.iconJumpPrev || GlobalConfig.icon.PAGER_JUMP_PREV]\n                })\n            ]);\n        };\n        // 向下翻页\n        var renderNextJump = function (tagName) {\n            var pageCount = computePageCount.value;\n            return h(tagName || 'button', {\n                class: ['vxe-pager--jump-next', {\n                        'is--fixed': !tagName,\n                        'is--disabled': props.currentPage >= pageCount\n                    }],\n                type: 'button',\n                title: GlobalConfig.i18n('vxe.pager.nextJumpTitle'),\n                onClick: handleNextJump\n            }, [\n                tagName ? h('i', {\n                    class: ['vxe-pager--jump-more-icon', props.iconJumpMore || GlobalConfig.icon.PAGER_JUMP_MORE]\n                }) : null,\n                h('i', {\n                    class: ['vxe-pager--jump-icon', props.iconJumpNext || GlobalConfig.icon.PAGER_JUMP_NEXT]\n                })\n            ]);\n        };\n        // 下一页\n        var renderNextPage = function () {\n            var pageCount = computePageCount.value;\n            return h('button', {\n                class: ['vxe-pager--next-btn', {\n                        'is--disabled': props.currentPage >= pageCount\n                    }],\n                type: 'button',\n                title: GlobalConfig.i18n('vxe.pager.nextPageTitle'),\n                onClick: handleNextPage\n            }, [\n                h('i', {\n                    class: ['vxe-pager--btn-icon', props.iconNextPage || GlobalConfig.icon.PAGER_NEXT_PAGE]\n                })\n            ]);\n        };\n        // 最后一页\n        var renderEndPage = function () {\n            var pageCount = computePageCount.value;\n            return h('button', {\n                class: ['vxe-pager--prev-btn', {\n                        'is--disabled': props.currentPage >= pageCount\n                    }],\n                type: 'button',\n                title: GlobalConfig.i18n('vxe.pager.endPageTitle'),\n                onClick: handleEndPage\n            }, [\n                h('i', {\n                    class: ['vxe-pager--btn-icon', props.iconEndPage || GlobalConfig.icon.PAGER_END]\n                })\n            ]);\n        };\n        // 页数\n        var renderNumber = function (showJump) {\n            var currentPage = props.currentPage, pagerCount = props.pagerCount;\n            var nums = [];\n            var pageCount = computePageCount.value;\n            var numList = computeNumList.value;\n            var offsetNumber = computeOffsetNumber.value;\n            var isOv = pageCount > pagerCount;\n            var isLt = isOv && currentPage > offsetNumber + 1;\n            var isGt = isOv && currentPage < pageCount - offsetNumber;\n            var startNumber = 1;\n            if (isOv) {\n                if (currentPage >= pageCount - offsetNumber) {\n                    startNumber = Math.max(pageCount - numList.length + 1, 1);\n                }\n                else {\n                    startNumber = Math.max(currentPage - offsetNumber, 1);\n                }\n            }\n            if (showJump && isLt) {\n                nums.push(h('button', {\n                    class: 'vxe-pager--num-btn',\n                    type: 'button',\n                    onClick: function (evnt) { return jumpPageEvent(evnt, 1); }\n                }, 1), renderPrevJump('span'));\n            }\n            numList.forEach(function (item, index) {\n                var number = startNumber + index;\n                if (number <= pageCount) {\n                    nums.push(h('button', {\n                        key: number,\n                        class: ['vxe-pager--num-btn', {\n                                'is--active': currentPage === number\n                            }],\n                        type: 'button',\n                        onClick: function (evnt) { return jumpPageEvent(evnt, number); }\n                    }, number));\n                }\n            });\n            if (showJump && isGt) {\n                nums.push(renderNextJump('button'), h('button', {\n                    class: 'vxe-pager--num-btn',\n                    type: 'button',\n                    onClick: function (evnt) { return jumpPageEvent(evnt, pageCount); }\n                }, pageCount));\n            }\n            return h('span', {\n                class: 'vxe-pager--btn-wrapper'\n            }, nums);\n        };\n        // jumpNumber\n        var renderJumpNumber = function () {\n            return renderNumber(true);\n        };\n        // sizes\n        var renderSizes = function () {\n            var sizeList = computeSizeList.value;\n            return h(resolveComponent('vxe-select'), {\n                class: 'vxe-pager--sizes',\n                modelValue: props.pageSize,\n                placement: 'top',\n                transfer: props.transfer,\n                options: sizeList,\n                onChange: pageSizeEvent\n            });\n        };\n        // Jump\n        var renderJump = function (isFull) {\n            return h('span', {\n                class: 'vxe-pager--jump'\n            }, [\n                isFull ? h('span', {\n                    class: 'vxe-pager--goto-text'\n                }, GlobalConfig.i18n('vxe.pager.goto')) : null,\n                h('input', {\n                    class: 'vxe-pager--goto',\n                    value: reactData.inpCurrPage,\n                    type: 'text',\n                    autocomplete: 'off',\n                    onInput: jumpInputEvent,\n                    onKeydown: jumpKeydownEvent,\n                    onBlur: triggerJumpEvent\n                }),\n                isFull ? h('span', {\n                    class: 'vxe-pager--classifier-text'\n                }, GlobalConfig.i18n('vxe.pager.pageClassifier')) : null\n            ]);\n        };\n        // FullJump\n        var renderFullJump = function () {\n            return renderJump(true);\n        };\n        // PageCount\n        var renderPageCount = function () {\n            var pageCount = computePageCount.value;\n            return h('span', {\n                class: 'vxe-pager--count'\n            }, [\n                h('span', {\n                    class: 'vxe-pager--separator'\n                }),\n                h('span', pageCount)\n            ]);\n        };\n        // total\n        var renderTotal = function () {\n            return h('span', {\n                class: 'vxe-pager--total'\n            }, GlobalConfig.i18n('vxe.pager.total', [props.total]));\n        };\n        pagerMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $pager: $xepager, $event: evnt }, params));\n            },\n            homePage: function () {\n                handleHomePage();\n                return nextTick();\n            },\n            endPage: function () {\n                handleEndPage();\n                return nextTick();\n            },\n            prevPage: function () {\n                handlePrevPage();\n                return nextTick();\n            },\n            nextPage: function () {\n                handleNextPage();\n                return nextTick();\n            },\n            prevJump: function () {\n                handlePrevJump();\n                return nextTick();\n            },\n            nextJump: function () {\n                handleNextJump();\n                return nextTick();\n            }\n        };\n        pagerPrivateMethods = {\n            handlePrevPage: handlePrevPage,\n            handleNextPage: handleNextPage,\n            handlePrevJump: handlePrevJump,\n            handleNextJump: handleNextJump\n        };\n        Object.assign($xepager, pagerMethods, pagerPrivateMethods);\n        watch(function () { return props.currentPage; }, function (value) {\n            reactData.inpCurrPage = value;\n        });\n        var renderVN = function () {\n            var _a;\n            var align = props.align, layouts = props.layouts, className = props.className;\n            var childNodes = [];\n            var vSize = computeSize.value;\n            var pageCount = computePageCount.value;\n            if (slots.left) {\n                childNodes.push(h('span', {\n                    class: 'vxe-pager--left-wrapper'\n                }, slots.left({ $grid: $xegrid })));\n            }\n            layouts.forEach(function (name) {\n                var renderFn;\n                switch (name) {\n                    case 'Home':\n                        renderFn = renderHomePage;\n                        break;\n                    case 'PrevJump':\n                        renderFn = renderPrevJump;\n                        break;\n                    case 'PrevPage':\n                        renderFn = renderPrevPage;\n                        break;\n                    case 'Number':\n                        renderFn = renderNumber;\n                        break;\n                    case 'JumpNumber':\n                        renderFn = renderJumpNumber;\n                        break;\n                    case 'NextPage':\n                        renderFn = renderNextPage;\n                        break;\n                    case 'NextJump':\n                        renderFn = renderNextJump;\n                        break;\n                    case 'End':\n                        renderFn = renderEndPage;\n                        break;\n                    case 'Sizes':\n                        renderFn = renderSizes;\n                        break;\n                    case 'FullJump':\n                        renderFn = renderFullJump;\n                        break;\n                    case 'Jump':\n                        renderFn = renderJump;\n                        break;\n                    case 'PageCount':\n                        renderFn = renderPageCount;\n                        break;\n                    case 'Total':\n                        renderFn = renderTotal;\n                        break;\n                }\n                if (renderFn) {\n                    childNodes.push(renderFn());\n                }\n                else {\n                    if (process.env.NODE_ENV === 'development') {\n                        errLog('vxe.error.notProp', [\"layouts -> \".concat(name)]);\n                    }\n                }\n            });\n            if (slots.right) {\n                childNodes.push(h('span', {\n                    class: 'vxe-pager--right-wrapper'\n                }, slots.right({ $grid: $xegrid })));\n            }\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-pager', className ? (XEUtils.isFunction(className) ? className({ $pager: $xepager }) : className) : '', (_a = {},\n                        _a[\"size--\".concat(vSize)] = vSize,\n                        _a[\"align--\".concat(align)] = align,\n                        _a['is--border'] = props.border,\n                        _a['is--background'] = props.background,\n                        _a['is--perfect'] = props.perfect,\n                        _a['is--hidden'] = props.autoHidden && pageCount === 1,\n                        _a['is--loading'] = props.loading,\n                        _a)]\n            }, [\n                h('div', {\n                    class: 'vxe-pager--wrapper'\n                }, childNodes)\n            ]);\n        };\n        $xepager.renderVN = renderVN;\n        return $xepager;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "var __assign = function() {\n  __assign = Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s)\n        if (Object.prototype.hasOwnProperty.call(s, p))\n          t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { defineComponent, h, computed, inject, resolveComponent, ref, reactive, nextTick, watch } from \"vue\";\nimport XEUtils from \"xe-utils\";\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport { hasEventKey, EVENT_KEYS } from \"../../tools/event\";\nimport { useSize } from \"../../hooks/size\";\nimport { errLog } from \"../../tools/log\";\nexport default defineComponent({\n  name: \"VxePager\",\n  props: {\n    size: { type: String, default: function() {\n      return GlobalConfig.pager.size || GlobalConfig.size;\n    } },\n    // 自定义布局\n    layouts: { type: Array, default: function() {\n      return GlobalConfig.pager.layouts || [\"PrevJump\", \"PrevPage\", \"Jump\", \"PageCount\", \"NextPage\", \"NextJump\", \"Sizes\", \"Total\"];\n    } },\n    // 当前页\n    currentPage: { type: Number, default: 1 },\n    // 加载中\n    loading: Boolean,\n    // 每页大小\n    pageSize: { type: Number, default: function() {\n      return GlobalConfig.pager.pageSize || 10;\n    } },\n    // 总条数\n    total: { type: Number, default: 0 },\n    // 显示页码按钮的数量\n    pagerCount: { type: Number, default: function() {\n      return GlobalConfig.pager.pagerCount || 7;\n    } },\n    // 每页大小选项列表\n    pageSizes: { type: Array, default: function() {\n      return GlobalConfig.pager.pageSizes || [10, 15, 20, 50, 100];\n    } },\n    // 列对其方式\n    align: { type: String, default: function() {\n      return GlobalConfig.pager.align;\n    } },\n    // 带边框\n    border: { type: Boolean, default: function() {\n      return GlobalConfig.pager.border;\n    } },\n    // 带背景颜色\n    background: { type: Boolean, default: function() {\n      return GlobalConfig.pager.background;\n    } },\n    // 配套的样式\n    perfect: { type: Boolean, default: function() {\n      return GlobalConfig.pager.perfect;\n    } },\n    // 当只有一页时隐藏\n    autoHidden: { type: Boolean, default: function() {\n      return GlobalConfig.pager.autoHidden;\n    } },\n    transfer: { type: Boolean, default: function() {\n      return GlobalConfig.pager.transfer;\n    } },\n    className: [String, Function],\n    // 自定义图标\n    iconPrevPage: String,\n    iconJumpPrev: String,\n    iconJumpNext: String,\n    iconNextPage: String,\n    iconJumpMore: String,\n    iconHomePage: String,\n    iconEndPage: String\n  },\n  emits: [\n    \"update:pageSize\",\n    \"update:currentPage\",\n    \"page-change\"\n  ],\n  setup: function(props, context) {\n    var slots = context.slots, emit = context.emit;\n    var xID = XEUtils.uniqueId();\n    var computeSize = useSize(props);\n    var $xegrid = inject(\"$xegrid\", null);\n    var reactData = reactive({\n      inpCurrPage: props.currentPage\n    });\n    var refElem = ref();\n    var refMaps = {\n      refElem\n    };\n    var $xepager = {\n      xID,\n      props,\n      context,\n      getRefMaps: function() {\n        return refMaps;\n      }\n    };\n    var pagerMethods = {};\n    var pagerPrivateMethods = {};\n    var getPageCount = function(total, size) {\n      return Math.max(Math.ceil(total / size), 1);\n    };\n    var computePageCount = computed(function() {\n      return getPageCount(props.total, props.pageSize);\n    });\n    var jumpPageEvent = function(evnt, currentPage) {\n      emit(\"update:currentPage\", currentPage);\n      if (evnt && currentPage !== props.currentPage) {\n        pagerMethods.dispatchEvent(\"page-change\", { type: \"current\", pageSize: props.pageSize, currentPage }, evnt);\n      }\n    };\n    var changeCurrentPage = function(currentPage, evnt) {\n      emit(\"update:currentPage\", currentPage);\n      if (evnt && currentPage !== props.currentPage) {\n        pagerMethods.dispatchEvent(\"page-change\", { type: \"current\", pageSize: props.pageSize, currentPage }, evnt);\n      }\n    };\n    var triggerJumpEvent = function(evnt) {\n      var inputElem = evnt.target;\n      var inpValue = XEUtils.toInteger(inputElem.value);\n      var pageCount = computePageCount.value;\n      var current = inpValue <= 0 ? 1 : inpValue >= pageCount ? pageCount : inpValue;\n      var currPage = XEUtils.toValueString(current);\n      inputElem.value = currPage;\n      reactData.inpCurrPage = currPage;\n      changeCurrentPage(current, evnt);\n    };\n    var computeNumList = computed(function() {\n      var pagerCount = props.pagerCount;\n      var pageCount = computePageCount.value;\n      var len = pageCount > pagerCount ? pagerCount - 2 : pagerCount;\n      var rest = [];\n      for (var index = 0; index < len; index++) {\n        rest.push(index);\n      }\n      return rest;\n    });\n    var computeOffsetNumber = computed(function() {\n      return Math.floor((props.pagerCount - 2) / 2);\n    });\n    var computeSizeList = computed(function() {\n      return props.pageSizes.map(function(item) {\n        if (XEUtils.isNumber(item)) {\n          return {\n            value: item,\n            label: \"\".concat(GlobalConfig.i18n(\"vxe.pager.pagesize\", [item]))\n          };\n        }\n        return __assign({ value: \"\", label: \"\" }, item);\n      });\n    });\n    var handleHomePage = function(evnt) {\n      var currentPage = props.currentPage;\n      if (currentPage > 1) {\n        changeCurrentPage(1, evnt);\n      }\n    };\n    var handleEndPage = function(evnt) {\n      var currentPage = props.currentPage;\n      var pageCount = computePageCount.value;\n      if (currentPage < pageCount) {\n        changeCurrentPage(pageCount, evnt);\n      }\n    };\n    var handlePrevPage = function(evnt) {\n      var currentPage = props.currentPage;\n      var pageCount = computePageCount.value;\n      if (currentPage > 1) {\n        changeCurrentPage(Math.min(pageCount, Math.max(currentPage - 1, 1)), evnt);\n      }\n    };\n    var handleNextPage = function(evnt) {\n      var currentPage = props.currentPage;\n      var pageCount = computePageCount.value;\n      if (currentPage < pageCount) {\n        changeCurrentPage(Math.min(pageCount, currentPage + 1), evnt);\n      }\n    };\n    var handlePrevJump = function(evnt) {\n      var numList = computeNumList.value;\n      changeCurrentPage(Math.max(props.currentPage - numList.length, 1), evnt);\n    };\n    var handleNextJump = function(evnt) {\n      var pageCount = computePageCount.value;\n      var numList = computeNumList.value;\n      changeCurrentPage(Math.min(props.currentPage + numList.length, pageCount), evnt);\n    };\n    var pageSizeEvent = function(params) {\n      var value = params.value;\n      var pageSize = XEUtils.toNumber(value);\n      var pageCount = getPageCount(props.total, pageSize);\n      var currentPage = props.currentPage;\n      if (currentPage > pageCount) {\n        currentPage = pageCount;\n        emit(\"update:currentPage\", pageCount);\n      }\n      emit(\"update:pageSize\", pageSize);\n      pagerMethods.dispatchEvent(\"page-change\", { type: \"size\", pageSize, currentPage });\n    };\n    var jumpInputEvent = function(evnt) {\n      var inputElem = evnt.target;\n      reactData.inpCurrPage = inputElem.value;\n    };\n    var jumpKeydownEvent = function(evnt) {\n      if (hasEventKey(evnt, EVENT_KEYS.ENTER)) {\n        triggerJumpEvent(evnt);\n      } else if (hasEventKey(evnt, EVENT_KEYS.ARROW_UP)) {\n        evnt.preventDefault();\n        handleNextPage(evnt);\n      } else if (hasEventKey(evnt, EVENT_KEYS.ARROW_DOWN)) {\n        evnt.preventDefault();\n        handlePrevPage(evnt);\n      }\n    };\n    var renderHomePage = function() {\n      return h(\"button\", {\n        class: [\"vxe-pager--prev-btn\", {\n          \"is--disabled\": props.currentPage <= 1\n        }],\n        type: \"button\",\n        title: GlobalConfig.i18n(\"vxe.pager.homePageTitle\"),\n        onClick: handleHomePage\n      }, [\n        h(\"i\", {\n          class: [\"vxe-pager--btn-icon\", props.iconHomePage || GlobalConfig.icon.PAGER_HOME]\n        })\n      ]);\n    };\n    var renderPrevPage = function() {\n      return h(\"button\", {\n        class: [\"vxe-pager--prev-btn\", {\n          \"is--disabled\": props.currentPage <= 1\n        }],\n        type: \"button\",\n        title: GlobalConfig.i18n(\"vxe.pager.prevPageTitle\"),\n        onClick: handlePrevPage\n      }, [\n        h(\"i\", {\n          class: [\"vxe-pager--btn-icon\", props.iconPrevPage || GlobalConfig.icon.PAGER_PREV_PAGE]\n        })\n      ]);\n    };\n    var renderPrevJump = function(tagName) {\n      return h(tagName || \"button\", {\n        class: [\"vxe-pager--jump-prev\", {\n          \"is--fixed\": !tagName,\n          \"is--disabled\": props.currentPage <= 1\n        }],\n        type: \"button\",\n        title: GlobalConfig.i18n(\"vxe.pager.prevJumpTitle\"),\n        onClick: handlePrevJump\n      }, [\n        tagName ? h(\"i\", {\n          class: [\"vxe-pager--jump-more-icon\", props.iconJumpMore || GlobalConfig.icon.PAGER_JUMP_MORE]\n        }) : null,\n        h(\"i\", {\n          class: [\"vxe-pager--jump-icon\", props.iconJumpPrev || GlobalConfig.icon.PAGER_JUMP_PREV]\n        })\n      ]);\n    };\n    var renderNextJump = function(tagName) {\n      var pageCount = computePageCount.value;\n      return h(tagName || \"button\", {\n        class: [\"vxe-pager--jump-next\", {\n          \"is--fixed\": !tagName,\n          \"is--disabled\": props.currentPage >= pageCount\n        }],\n        type: \"button\",\n        title: GlobalConfig.i18n(\"vxe.pager.nextJumpTitle\"),\n        onClick: handleNextJump\n      }, [\n        tagName ? h(\"i\", {\n          class: [\"vxe-pager--jump-more-icon\", props.iconJumpMore || GlobalConfig.icon.PAGER_JUMP_MORE]\n        }) : null,\n        h(\"i\", {\n          class: [\"vxe-pager--jump-icon\", props.iconJumpNext || GlobalConfig.icon.PAGER_JUMP_NEXT]\n        })\n      ]);\n    };\n    var renderNextPage = function() {\n      var pageCount = computePageCount.value;\n      return h(\"button\", {\n        class: [\"vxe-pager--next-btn\", {\n          \"is--disabled\": props.currentPage >= pageCount\n        }],\n        type: \"button\",\n        title: GlobalConfig.i18n(\"vxe.pager.nextPageTitle\"),\n        onClick: handleNextPage\n      }, [\n        h(\"i\", {\n          class: [\"vxe-pager--btn-icon\", props.iconNextPage || GlobalConfig.icon.PAGER_NEXT_PAGE]\n        })\n      ]);\n    };\n    var renderEndPage = function() {\n      var pageCount = computePageCount.value;\n      return h(\"button\", {\n        class: [\"vxe-pager--prev-btn\", {\n          \"is--disabled\": props.currentPage >= pageCount\n        }],\n        type: \"button\",\n        title: GlobalConfig.i18n(\"vxe.pager.endPageTitle\"),\n        onClick: handleEndPage\n      }, [\n        h(\"i\", {\n          class: [\"vxe-pager--btn-icon\", props.iconEndPage || GlobalConfig.icon.PAGER_END]\n        })\n      ]);\n    };\n    var renderNumber = function(showJump) {\n      var currentPage = props.currentPage, pagerCount = props.pagerCount;\n      var nums = [];\n      var pageCount = computePageCount.value;\n      var numList = computeNumList.value;\n      var offsetNumber = computeOffsetNumber.value;\n      var isOv = pageCount > pagerCount;\n      var isLt = isOv && currentPage > offsetNumber + 1;\n      var isGt = isOv && currentPage < pageCount - offsetNumber;\n      var startNumber = 1;\n      if (isOv) {\n        if (currentPage >= pageCount - offsetNumber) {\n          startNumber = Math.max(pageCount - numList.length + 1, 1);\n        } else {\n          startNumber = Math.max(currentPage - offsetNumber, 1);\n        }\n      }\n      if (showJump && isLt) {\n        nums.push(h(\"button\", {\n          class: \"vxe-pager--num-btn\",\n          type: \"button\",\n          onClick: function(evnt) {\n            return jumpPageEvent(evnt, 1);\n          }\n        }, 1), renderPrevJump(\"span\"));\n      }\n      numList.forEach(function(item, index) {\n        var number = startNumber + index;\n        if (number <= pageCount) {\n          nums.push(h(\"button\", {\n            key: number,\n            class: [\"vxe-pager--num-btn\", {\n              \"is--active\": currentPage === number\n            }],\n            type: \"button\",\n            onClick: function(evnt) {\n              return jumpPageEvent(evnt, number);\n            }\n          }, number));\n        }\n      });\n      if (showJump && isGt) {\n        nums.push(renderNextJump(\"button\"), h(\"button\", {\n          class: \"vxe-pager--num-btn\",\n          type: \"button\",\n          onClick: function(evnt) {\n            return jumpPageEvent(evnt, pageCount);\n          }\n        }, pageCount));\n      }\n      return h(\"span\", {\n        class: \"vxe-pager--btn-wrapper\"\n      }, nums);\n    };\n    var renderJumpNumber = function() {\n      return renderNumber(true);\n    };\n    var renderSizes = function() {\n      var sizeList = computeSizeList.value;\n      return h(resolveComponent(\"vxe-select\"), {\n        class: \"vxe-pager--sizes\",\n        modelValue: props.pageSize,\n        placement: \"top\",\n        transfer: props.transfer,\n        options: sizeList,\n        onChange: pageSizeEvent\n      });\n    };\n    var renderJump = function(isFull) {\n      return h(\"span\", {\n        class: \"vxe-pager--jump\"\n      }, [\n        isFull ? h(\"span\", {\n          class: \"vxe-pager--goto-text\"\n        }, GlobalConfig.i18n(\"vxe.pager.goto\")) : null,\n        h(\"input\", {\n          class: \"vxe-pager--goto\",\n          value: reactData.inpCurrPage,\n          type: \"text\",\n          autocomplete: \"off\",\n          onInput: jumpInputEvent,\n          onKeydown: jumpKeydownEvent,\n          onBlur: triggerJumpEvent\n        }),\n        isFull ? h(\"span\", {\n          class: \"vxe-pager--classifier-text\"\n        }, GlobalConfig.i18n(\"vxe.pager.pageClassifier\")) : null\n      ]);\n    };\n    var renderFullJump = function() {\n      return renderJump(true);\n    };\n    var renderPageCount = function() {\n      var pageCount = computePageCount.value;\n      return h(\"span\", {\n        class: \"vxe-pager--count\"\n      }, [\n        h(\"span\", {\n          class: \"vxe-pager--separator\"\n        }),\n        h(\"span\", pageCount)\n      ]);\n    };\n    var renderTotal = function() {\n      return h(\"span\", {\n        class: \"vxe-pager--total\"\n      }, GlobalConfig.i18n(\"vxe.pager.total\", [props.total]));\n    };\n    pagerMethods = {\n      dispatchEvent: function(type, params, evnt) {\n        emit(type, Object.assign({ $pager: $xepager, $event: evnt }, params));\n      },\n      homePage: function() {\n        handleHomePage();\n        return nextTick();\n      },\n      endPage: function() {\n        handleEndPage();\n        return nextTick();\n      },\n      prevPage: function() {\n        handlePrevPage();\n        return nextTick();\n      },\n      nextPage: function() {\n        handleNextPage();\n        return nextTick();\n      },\n      prevJump: function() {\n        handlePrevJump();\n        return nextTick();\n      },\n      nextJump: function() {\n        handleNextJump();\n        return nextTick();\n      }\n    };\n    pagerPrivateMethods = {\n      handlePrevPage,\n      handleNextPage,\n      handlePrevJump,\n      handleNextJump\n    };\n    Object.assign($xepager, pagerMethods, pagerPrivateMethods);\n    watch(function() {\n      return props.currentPage;\n    }, function(value) {\n      reactData.inpCurrPage = value;\n    });\n    var renderVN = function() {\n      var _a;\n      var align = props.align, layouts = props.layouts, className = props.className;\n      var childNodes = [];\n      var vSize = computeSize.value;\n      var pageCount = computePageCount.value;\n      if (slots.left) {\n        childNodes.push(h(\"span\", {\n          class: \"vxe-pager--left-wrapper\"\n        }, slots.left({ $grid: $xegrid })));\n      }\n      layouts.forEach(function(name) {\n        var renderFn;\n        switch (name) {\n          case \"Home\":\n            renderFn = renderHomePage;\n            break;\n          case \"PrevJump\":\n            renderFn = renderPrevJump;\n            break;\n          case \"PrevPage\":\n            renderFn = renderPrevPage;\n            break;\n          case \"Number\":\n            renderFn = renderNumber;\n            break;\n          case \"JumpNumber\":\n            renderFn = renderJumpNumber;\n            break;\n          case \"NextPage\":\n            renderFn = renderNextPage;\n            break;\n          case \"NextJump\":\n            renderFn = renderNextJump;\n            break;\n          case \"End\":\n            renderFn = renderEndPage;\n            break;\n          case \"Sizes\":\n            renderFn = renderSizes;\n            break;\n          case \"FullJump\":\n            renderFn = renderFullJump;\n            break;\n          case \"Jump\":\n            renderFn = renderJump;\n            break;\n          case \"PageCount\":\n            renderFn = renderPageCount;\n            break;\n          case \"Total\":\n            renderFn = renderTotal;\n            break;\n        }\n        if (renderFn) {\n          childNodes.push(renderFn());\n        } else {\n          if (false) {\n            errLog(\"vxe.error.notProp\", [\"layouts -> \".concat(name)]);\n          }\n        }\n      });\n      if (slots.right) {\n        childNodes.push(h(\"span\", {\n          class: \"vxe-pager--right-wrapper\"\n        }, slots.right({ $grid: $xegrid })));\n      }\n      return h(\"div\", {\n        ref: refElem,\n        class: [\"vxe-pager\", className ? XEUtils.isFunction(className) ? className({ $pager: $xepager }) : className : \"\", (_a = {}, _a[\"size--\".concat(vSize)] = vSize, _a[\"align--\".concat(align)] = align, _a[\"is--border\"] = props.border, _a[\"is--background\"] = props.background, _a[\"is--perfect\"] = props.perfect, _a[\"is--hidden\"] = props.autoHidden && pageCount === 1, _a[\"is--loading\"] = props.loading, _a)]\n      }, [\n        h(\"div\", {\n          class: \"vxe-pager--wrapper\"\n        }, childNodes)\n      ]);\n    };\n    $xepager.renderVN = renderVN;\n    return $xepager;\n  },\n  render: function() {\n    return this.renderVN();\n  }\n});\n",
      "start": 1714699767777,
      "end": 1714699768429,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1714699768429,
      "end": 1714699768429,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768429,
      "end": 1714699768429,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768429,
      "end": 1714699768429,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768429,
      "end": 1714699768429,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768429,
      "end": 1714699768430,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768430,
      "end": 1714699768430,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768430,
      "end": 1714699768430,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768430,
      "end": 1714699768430,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768430,
      "end": 1714699768430,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768430,
      "end": 1714699768430,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768430,
      "end": 1714699768430,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768430,
      "end": 1714699768430,
      "order": "normal"
    }
  ]
}

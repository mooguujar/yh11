{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vant@4.8.4_vue@3.4.19/node_modules/vant/es/signature/Signature.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode as _createVNode } from \"vue\";\nimport { computed, ref, onMounted, defineComponent, watch } from \"vue\";\nimport { inBrowser, makeNumberProp, makeStringProp, createNamespace, preventDefault, windowWidth } from \"../utils/index.mjs\";\nimport { useRect } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { Button } from \"../button/index.mjs\";\nconst [name, bem, t] = createNamespace(\"signature\");\nconst signatureProps = {\n  tips: String,\n  type: makeStringProp(\"png\"),\n  penColor: makeStringProp(\"#000\"),\n  lineWidth: makeNumberProp(3),\n  clearButtonText: String,\n  backgroundColor: makeStringProp(\"\"),\n  confirmButtonText: String\n};\nconst hasCanvasSupport = () => {\n  var _a;\n  const canvas = document.createElement(\"canvas\");\n  return !!((_a = canvas.getContext) == null ? void 0 : _a.call(canvas, \"2d\"));\n};\nvar stdin_default = defineComponent({\n  name,\n  props: signatureProps,\n  emits: [\"submit\", \"clear\", \"start\", \"end\", \"signing\"],\n  setup(props, {\n    emit\n  }) {\n    const canvasRef = ref();\n    const wrapRef = ref();\n    const ctx = computed(() => {\n      if (!canvasRef.value)\n        return null;\n      return canvasRef.value.getContext(\"2d\");\n    });\n    const isRenderCanvas = inBrowser ? hasCanvasSupport() : true;\n    let canvasWidth = 0;\n    let canvasHeight = 0;\n    let canvasRect;\n    const touchStart = () => {\n      if (!ctx.value) {\n        return false;\n      }\n      ctx.value.beginPath();\n      ctx.value.lineWidth = props.lineWidth;\n      ctx.value.strokeStyle = props.penColor;\n      canvasRect = useRect(canvasRef);\n      emit(\"start\");\n    };\n    const touchMove = (event) => {\n      if (!ctx.value) {\n        return false;\n      }\n      preventDefault(event);\n      const touch = event.touches[0];\n      const mouseX = touch.clientX - ((canvasRect == null ? void 0 : canvasRect.left) || 0);\n      const mouseY = touch.clientY - ((canvasRect == null ? void 0 : canvasRect.top) || 0);\n      ctx.value.lineCap = \"round\";\n      ctx.value.lineJoin = \"round\";\n      ctx.value.lineTo(mouseX, mouseY);\n      ctx.value.stroke();\n      emit(\"signing\", event);\n    };\n    const touchEnd = (event) => {\n      preventDefault(event);\n      emit(\"end\");\n    };\n    const isCanvasEmpty = (canvas) => {\n      const empty = document.createElement(\"canvas\");\n      empty.width = canvas.width;\n      empty.height = canvas.height;\n      if (props.backgroundColor) {\n        const emptyCtx = empty.getContext(\"2d\");\n        setCanvasBgColor(emptyCtx);\n      }\n      return canvas.toDataURL() === empty.toDataURL();\n    };\n    const setCanvasBgColor = (ctx2) => {\n      if (ctx2 && props.backgroundColor) {\n        ctx2.fillStyle = props.backgroundColor;\n        ctx2.fillRect(0, 0, canvasWidth, canvasHeight);\n      }\n    };\n    const submit = () => {\n      var _a, _b;\n      const canvas = canvasRef.value;\n      if (!canvas) {\n        return;\n      }\n      const isEmpty = isCanvasEmpty(canvas);\n      const image = isEmpty ? \"\" : ((_b = (_a = {\n        jpg: () => canvas.toDataURL(\"image/jpeg\", 0.8),\n        jpeg: () => canvas.toDataURL(\"image/jpeg\", 0.8)\n      })[props.type]) == null ? void 0 : _b.call(_a)) || canvas.toDataURL(`image/${props.type}`);\n      emit(\"submit\", {\n        image,\n        canvas\n      });\n    };\n    const clear = () => {\n      if (ctx.value) {\n        ctx.value.clearRect(0, 0, canvasWidth, canvasHeight);\n        ctx.value.closePath();\n        setCanvasBgColor(ctx.value);\n      }\n      emit(\"clear\");\n    };\n    const initialize = () => {\n      var _a, _b, _c;\n      if (isRenderCanvas && canvasRef.value) {\n        const canvas = canvasRef.value;\n        const dpr = inBrowser ? window.devicePixelRatio : 1;\n        canvasWidth = canvas.width = (((_a = wrapRef.value) == null ? void 0 : _a.offsetWidth) || 0) * dpr;\n        canvasHeight = canvas.height = (((_b = wrapRef.value) == null ? void 0 : _b.offsetHeight) || 0) * dpr;\n        (_c = ctx.value) == null ? void 0 : _c.scale(dpr, dpr);\n        setCanvasBgColor(ctx.value);\n      }\n    };\n    const resize = () => {\n      if (ctx.value) {\n        const data = ctx.value.getImageData(0, 0, canvasWidth, canvasHeight);\n        initialize();\n        ctx.value.putImageData(data, 0, 0);\n      }\n    };\n    watch(windowWidth, resize);\n    onMounted(initialize);\n    useExpose({\n      resize\n    });\n    return () => _createVNode(\"div\", {\n      \"class\": bem()\n    }, [_createVNode(\"div\", {\n      \"class\": bem(\"content\"),\n      \"ref\": wrapRef\n    }, [isRenderCanvas ? _createVNode(\"canvas\", {\n      \"ref\": canvasRef,\n      \"onTouchstartPassive\": touchStart,\n      \"onTouchmove\": touchMove,\n      \"onTouchend\": touchEnd\n    }, null) : _createVNode(\"p\", null, [props.tips])]), _createVNode(\"div\", {\n      \"class\": bem(\"footer\")\n    }, [_createVNode(Button, {\n      \"size\": \"small\",\n      \"onClick\": clear\n    }, {\n      default: () => [props.clearButtonText || t(\"clear\")]\n    }), _createVNode(Button, {\n      \"type\": \"primary\",\n      \"size\": \"small\",\n      \"onClick\": submit\n    }, {\n      default: () => [props.confirmButtonText || t(\"confirm\")]\n    })])]);\n  }\n});\nexport {\n  stdin_default as default,\n  signatureProps\n};\n",
      "start": 1714699767313,
      "end": 1714699767345,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import { createVNode as _createVNode } from \"vue\";\nimport { computed, ref, onMounted, defineComponent, watch } from \"vue\";\nimport { inBrowser, makeNumberProp, makeStringProp, createNamespace, preventDefault, windowWidth } from \"../utils/index.mjs\";\nimport { useRect } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { Button } from \"../button/index.mjs\";\nconst [name, bem, t] = createNamespace(\"signature\");\nconst signatureProps = {\n  tips: String,\n  type: makeStringProp(\"png\"),\n  penColor: makeStringProp(\"#000\"),\n  lineWidth: makeNumberProp(3),\n  clearButtonText: String,\n  backgroundColor: makeStringProp(\"\"),\n  confirmButtonText: String\n};\nconst hasCanvasSupport = () => {\n  var _a;\n  const canvas = document.createElement(\"canvas\");\n  return !!((_a = canvas.getContext) == null ? void 0 : _a.call(canvas, \"2d\"));\n};\nvar stdin_default = defineComponent({\n  name,\n  props: signatureProps,\n  emits: [\"submit\", \"clear\", \"start\", \"end\", \"signing\"],\n  setup(props, {\n    emit\n  }) {\n    const canvasRef = ref();\n    const wrapRef = ref();\n    const ctx = computed(() => {\n      if (!canvasRef.value)\n        return null;\n      return canvasRef.value.getContext(\"2d\");\n    });\n    const isRenderCanvas = inBrowser ? hasCanvasSupport() : true;\n    let canvasWidth = 0;\n    let canvasHeight = 0;\n    let canvasRect;\n    const touchStart = () => {\n      if (!ctx.value) {\n        return false;\n      }\n      ctx.value.beginPath();\n      ctx.value.lineWidth = props.lineWidth;\n      ctx.value.strokeStyle = props.penColor;\n      canvasRect = useRect(canvasRef);\n      emit(\"start\");\n    };\n    const touchMove = (event) => {\n      if (!ctx.value) {\n        return false;\n      }\n      preventDefault(event);\n      const touch = event.touches[0];\n      const mouseX = touch.clientX - ((canvasRect == null ? void 0 : canvasRect.left) || 0);\n      const mouseY = touch.clientY - ((canvasRect == null ? void 0 : canvasRect.top) || 0);\n      ctx.value.lineCap = \"round\";\n      ctx.value.lineJoin = \"round\";\n      ctx.value.lineTo(mouseX, mouseY);\n      ctx.value.stroke();\n      emit(\"signing\", event);\n    };\n    const touchEnd = (event) => {\n      preventDefault(event);\n      emit(\"end\");\n    };\n    const isCanvasEmpty = (canvas) => {\n      const empty = document.createElement(\"canvas\");\n      empty.width = canvas.width;\n      empty.height = canvas.height;\n      if (props.backgroundColor) {\n        const emptyCtx = empty.getContext(\"2d\");\n        setCanvasBgColor(emptyCtx);\n      }\n      return canvas.toDataURL() === empty.toDataURL();\n    };\n    const setCanvasBgColor = (ctx2) => {\n      if (ctx2 && props.backgroundColor) {\n        ctx2.fillStyle = props.backgroundColor;\n        ctx2.fillRect(0, 0, canvasWidth, canvasHeight);\n      }\n    };\n    const submit = () => {\n      var _a, _b;\n      const canvas = canvasRef.value;\n      if (!canvas) {\n        return;\n      }\n      const isEmpty = isCanvasEmpty(canvas);\n      const image = isEmpty ? \"\" : ((_b = (_a = {\n        jpg: () => canvas.toDataURL(\"image/jpeg\", 0.8),\n        jpeg: () => canvas.toDataURL(\"image/jpeg\", 0.8)\n      })[props.type]) == null ? void 0 : _b.call(_a)) || canvas.toDataURL(`image/${props.type}`);\n      emit(\"submit\", {\n        image,\n        canvas\n      });\n    };\n    const clear = () => {\n      if (ctx.value) {\n        ctx.value.clearRect(0, 0, canvasWidth, canvasHeight);\n        ctx.value.closePath();\n        setCanvasBgColor(ctx.value);\n      }\n      emit(\"clear\");\n    };\n    const initialize = () => {\n      var _a, _b, _c;\n      if (isRenderCanvas && canvasRef.value) {\n        const canvas = canvasRef.value;\n        const dpr = inBrowser ? window.devicePixelRatio : 1;\n        canvasWidth = canvas.width = (((_a = wrapRef.value) == null ? void 0 : _a.offsetWidth) || 0) * dpr;\n        canvasHeight = canvas.height = (((_b = wrapRef.value) == null ? void 0 : _b.offsetHeight) || 0) * dpr;\n        (_c = ctx.value) == null ? void 0 : _c.scale(dpr, dpr);\n        setCanvasBgColor(ctx.value);\n      }\n    };\n    const resize = () => {\n      if (ctx.value) {\n        const data = ctx.value.getImageData(0, 0, canvasWidth, canvasHeight);\n        initialize();\n        ctx.value.putImageData(data, 0, 0);\n      }\n    };\n    watch(windowWidth, resize);\n    onMounted(initialize);\n    useExpose({\n      resize\n    });\n    return () => _createVNode(\"div\", {\n      \"class\": bem()\n    }, [_createVNode(\"div\", {\n      \"class\": bem(\"content\"),\n      \"ref\": wrapRef\n    }, [isRenderCanvas ? _createVNode(\"canvas\", {\n      \"ref\": canvasRef,\n      \"onTouchstartPassive\": touchStart,\n      \"onTouchmove\": touchMove,\n      \"onTouchend\": touchEnd\n    }, null) : _createVNode(\"p\", null, [props.tips])]), _createVNode(\"div\", {\n      \"class\": bem(\"footer\")\n    }, [_createVNode(Button, {\n      \"size\": \"small\",\n      \"onClick\": clear\n    }, {\n      default: () => [props.clearButtonText || t(\"clear\")]\n    }), _createVNode(Button, {\n      \"type\": \"primary\",\n      \"size\": \"small\",\n      \"onClick\": submit\n    }, {\n      default: () => [props.confirmButtonText || t(\"confirm\")]\n    })])]);\n  }\n});\nexport {\n  stdin_default as default,\n  signatureProps\n};\n",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767345,
      "end": 1714699767345,
      "order": "normal"
    }
  ]
}

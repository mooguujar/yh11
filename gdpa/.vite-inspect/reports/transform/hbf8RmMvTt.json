{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vant@4.8.4_vue@3.4.19/node_modules/vant/es/pull-refresh/PullRefresh.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode as _createVNode } from \"vue\";\nimport { ref, watch, reactive, nextTick, defineComponent } from \"vue\";\nimport { numericProp, getScrollTop, preventDefault, createNamespace, makeNumericProp } from \"../utils/index.mjs\";\nimport { useEventListener, useScrollParent } from \"@vant/use\";\nimport { useTouch } from \"../composables/use-touch.mjs\";\nimport { Loading } from \"../loading/index.mjs\";\nconst [name, bem, t] = createNamespace(\"pull-refresh\");\nconst DEFAULT_HEAD_HEIGHT = 50;\nconst TEXT_STATUS = [\"pulling\", \"loosing\", \"success\"];\nconst pullRefreshProps = {\n  disabled: Boolean,\n  modelValue: Boolean,\n  headHeight: makeNumericProp(DEFAULT_HEAD_HEIGHT),\n  successText: String,\n  pullingText: String,\n  loosingText: String,\n  loadingText: String,\n  pullDistance: numericProp,\n  successDuration: makeNumericProp(500),\n  animationDuration: makeNumericProp(300)\n};\nvar stdin_default = defineComponent({\n  name,\n  props: pullRefreshProps,\n  emits: [\"change\", \"refresh\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    let reachTop;\n    const root = ref();\n    const track = ref();\n    const scrollParent = useScrollParent(root);\n    const state = reactive({\n      status: \"normal\",\n      distance: 0,\n      duration: 0\n    });\n    const touch = useTouch();\n    const getHeadStyle = () => {\n      if (props.headHeight !== DEFAULT_HEAD_HEIGHT) {\n        return {\n          height: `${props.headHeight}px`\n        };\n      }\n    };\n    const isTouchable = () => state.status !== \"loading\" && state.status !== \"success\" && !props.disabled;\n    const ease = (distance) => {\n      const pullDistance = +(props.pullDistance || props.headHeight);\n      if (distance > pullDistance) {\n        if (distance < pullDistance * 2) {\n          distance = pullDistance + (distance - pullDistance) / 2;\n        } else {\n          distance = pullDistance * 1.5 + (distance - pullDistance * 2) / 4;\n        }\n      }\n      return Math.round(distance);\n    };\n    const setStatus = (distance, isLoading) => {\n      const pullDistance = +(props.pullDistance || props.headHeight);\n      state.distance = distance;\n      if (isLoading) {\n        state.status = \"loading\";\n      } else if (distance === 0) {\n        state.status = \"normal\";\n      } else if (distance < pullDistance) {\n        state.status = \"pulling\";\n      } else {\n        state.status = \"loosing\";\n      }\n      emit(\"change\", {\n        status: state.status,\n        distance\n      });\n    };\n    const getStatusText = () => {\n      const {\n        status\n      } = state;\n      if (status === \"normal\") {\n        return \"\";\n      }\n      return props[`${status}Text`] || t(status);\n    };\n    const renderStatus = () => {\n      const {\n        status,\n        distance\n      } = state;\n      if (slots[status]) {\n        return slots[status]({\n          distance\n        });\n      }\n      const nodes = [];\n      if (TEXT_STATUS.includes(status)) {\n        nodes.push(_createVNode(\"div\", {\n          \"class\": bem(\"text\")\n        }, [getStatusText()]));\n      }\n      if (status === \"loading\") {\n        nodes.push(_createVNode(Loading, {\n          \"class\": bem(\"loading\")\n        }, {\n          default: getStatusText\n        }));\n      }\n      return nodes;\n    };\n    const showSuccessTip = () => {\n      state.status = \"success\";\n      setTimeout(() => {\n        setStatus(0);\n      }, +props.successDuration);\n    };\n    const checkPosition = (event) => {\n      reachTop = getScrollTop(scrollParent.value) === 0;\n      if (reachTop) {\n        state.duration = 0;\n        touch.start(event);\n      }\n    };\n    const onTouchStart = (event) => {\n      if (isTouchable()) {\n        checkPosition(event);\n      }\n    };\n    const onTouchMove = (event) => {\n      if (isTouchable()) {\n        if (!reachTop) {\n          checkPosition(event);\n        }\n        const {\n          deltaY\n        } = touch;\n        touch.move(event);\n        if (reachTop && deltaY.value >= 0 && touch.isVertical()) {\n          preventDefault(event);\n          setStatus(ease(deltaY.value));\n        }\n      }\n    };\n    const onTouchEnd = () => {\n      if (reachTop && touch.deltaY.value && isTouchable()) {\n        state.duration = +props.animationDuration;\n        if (state.status === \"loosing\") {\n          setStatus(+props.headHeight, true);\n          emit(\"update:modelValue\", true);\n          nextTick(() => emit(\"refresh\"));\n        } else {\n          setStatus(0);\n        }\n      }\n    };\n    watch(() => props.modelValue, (value) => {\n      state.duration = +props.animationDuration;\n      if (value) {\n        setStatus(+props.headHeight, true);\n      } else if (slots.success || props.successText) {\n        showSuccessTip();\n      } else {\n        setStatus(0, false);\n      }\n    });\n    useEventListener(\"touchmove\", onTouchMove, {\n      target: track\n    });\n    return () => {\n      var _a;\n      const trackStyle = {\n        transitionDuration: `${state.duration}ms`,\n        transform: state.distance ? `translate3d(0,${state.distance}px, 0)` : \"\"\n      };\n      return _createVNode(\"div\", {\n        \"ref\": root,\n        \"class\": bem()\n      }, [_createVNode(\"div\", {\n        \"ref\": track,\n        \"class\": bem(\"track\"),\n        \"style\": trackStyle,\n        \"onTouchstartPassive\": onTouchStart,\n        \"onTouchend\": onTouchEnd,\n        \"onTouchcancel\": onTouchEnd\n      }, [_createVNode(\"div\", {\n        \"class\": bem(\"head\"),\n        \"style\": getHeadStyle()\n      }, [renderStatus()]), (_a = slots.default) == null ? void 0 : _a.call(slots)])]);\n    };\n  }\n});\nexport {\n  stdin_default as default,\n  pullRefreshProps\n};\n",
      "start": 1714699767311,
      "end": 1714699767339,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import { createVNode as _createVNode } from \"vue\";\nimport { ref, watch, reactive, nextTick, defineComponent } from \"vue\";\nimport { numericProp, getScrollTop, preventDefault, createNamespace, makeNumericProp } from \"../utils/index.mjs\";\nimport { useEventListener, useScrollParent } from \"@vant/use\";\nimport { useTouch } from \"../composables/use-touch.mjs\";\nimport { Loading } from \"../loading/index.mjs\";\nconst [name, bem, t] = createNamespace(\"pull-refresh\");\nconst DEFAULT_HEAD_HEIGHT = 50;\nconst TEXT_STATUS = [\"pulling\", \"loosing\", \"success\"];\nconst pullRefreshProps = {\n  disabled: Boolean,\n  modelValue: Boolean,\n  headHeight: makeNumericProp(DEFAULT_HEAD_HEIGHT),\n  successText: String,\n  pullingText: String,\n  loosingText: String,\n  loadingText: String,\n  pullDistance: numericProp,\n  successDuration: makeNumericProp(500),\n  animationDuration: makeNumericProp(300)\n};\nvar stdin_default = defineComponent({\n  name,\n  props: pullRefreshProps,\n  emits: [\"change\", \"refresh\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    let reachTop;\n    const root = ref();\n    const track = ref();\n    const scrollParent = useScrollParent(root);\n    const state = reactive({\n      status: \"normal\",\n      distance: 0,\n      duration: 0\n    });\n    const touch = useTouch();\n    const getHeadStyle = () => {\n      if (props.headHeight !== DEFAULT_HEAD_HEIGHT) {\n        return {\n          height: `${props.headHeight}px`\n        };\n      }\n    };\n    const isTouchable = () => state.status !== \"loading\" && state.status !== \"success\" && !props.disabled;\n    const ease = (distance) => {\n      const pullDistance = +(props.pullDistance || props.headHeight);\n      if (distance > pullDistance) {\n        if (distance < pullDistance * 2) {\n          distance = pullDistance + (distance - pullDistance) / 2;\n        } else {\n          distance = pullDistance * 1.5 + (distance - pullDistance * 2) / 4;\n        }\n      }\n      return Math.round(distance);\n    };\n    const setStatus = (distance, isLoading) => {\n      const pullDistance = +(props.pullDistance || props.headHeight);\n      state.distance = distance;\n      if (isLoading) {\n        state.status = \"loading\";\n      } else if (distance === 0) {\n        state.status = \"normal\";\n      } else if (distance < pullDistance) {\n        state.status = \"pulling\";\n      } else {\n        state.status = \"loosing\";\n      }\n      emit(\"change\", {\n        status: state.status,\n        distance\n      });\n    };\n    const getStatusText = () => {\n      const {\n        status\n      } = state;\n      if (status === \"normal\") {\n        return \"\";\n      }\n      return props[`${status}Text`] || t(status);\n    };\n    const renderStatus = () => {\n      const {\n        status,\n        distance\n      } = state;\n      if (slots[status]) {\n        return slots[status]({\n          distance\n        });\n      }\n      const nodes = [];\n      if (TEXT_STATUS.includes(status)) {\n        nodes.push(_createVNode(\"div\", {\n          \"class\": bem(\"text\")\n        }, [getStatusText()]));\n      }\n      if (status === \"loading\") {\n        nodes.push(_createVNode(Loading, {\n          \"class\": bem(\"loading\")\n        }, {\n          default: getStatusText\n        }));\n      }\n      return nodes;\n    };\n    const showSuccessTip = () => {\n      state.status = \"success\";\n      setTimeout(() => {\n        setStatus(0);\n      }, +props.successDuration);\n    };\n    const checkPosition = (event) => {\n      reachTop = getScrollTop(scrollParent.value) === 0;\n      if (reachTop) {\n        state.duration = 0;\n        touch.start(event);\n      }\n    };\n    const onTouchStart = (event) => {\n      if (isTouchable()) {\n        checkPosition(event);\n      }\n    };\n    const onTouchMove = (event) => {\n      if (isTouchable()) {\n        if (!reachTop) {\n          checkPosition(event);\n        }\n        const {\n          deltaY\n        } = touch;\n        touch.move(event);\n        if (reachTop && deltaY.value >= 0 && touch.isVertical()) {\n          preventDefault(event);\n          setStatus(ease(deltaY.value));\n        }\n      }\n    };\n    const onTouchEnd = () => {\n      if (reachTop && touch.deltaY.value && isTouchable()) {\n        state.duration = +props.animationDuration;\n        if (state.status === \"loosing\") {\n          setStatus(+props.headHeight, true);\n          emit(\"update:modelValue\", true);\n          nextTick(() => emit(\"refresh\"));\n        } else {\n          setStatus(0);\n        }\n      }\n    };\n    watch(() => props.modelValue, (value) => {\n      state.duration = +props.animationDuration;\n      if (value) {\n        setStatus(+props.headHeight, true);\n      } else if (slots.success || props.successText) {\n        showSuccessTip();\n      } else {\n        setStatus(0, false);\n      }\n    });\n    useEventListener(\"touchmove\", onTouchMove, {\n      target: track\n    });\n    return () => {\n      var _a;\n      const trackStyle = {\n        transitionDuration: `${state.duration}ms`,\n        transform: state.distance ? `translate3d(0,${state.distance}px, 0)` : \"\"\n      };\n      return _createVNode(\"div\", {\n        \"ref\": root,\n        \"class\": bem()\n      }, [_createVNode(\"div\", {\n        \"ref\": track,\n        \"class\": bem(\"track\"),\n        \"style\": trackStyle,\n        \"onTouchstartPassive\": onTouchStart,\n        \"onTouchend\": onTouchEnd,\n        \"onTouchcancel\": onTouchEnd\n      }, [_createVNode(\"div\", {\n        \"class\": bem(\"head\"),\n        \"style\": getHeadStyle()\n      }, [renderStatus()]), (_a = slots.default) == null ? void 0 : _a.call(slots)])]);\n    };\n  }\n});\nexport {\n  stdin_default as default,\n  pullRefreshProps\n};\n",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767339,
      "end": 1714699767339,
      "order": "normal"
    }
  ]
}

{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/menu/src/hooks.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VXETable } from '../../v-x-e-table';\nimport { getDomNode, getAbsolutePos, getEventTargetNode } from '../../tools/dom';\nimport { isEnableConf, hasChildrenList } from '../../tools/utils';\nimport { hasEventKey, EVENT_KEYS } from '../../tools/event';\nvar tableMenuMethodKeys = ['closeMenu'];\nvar tableMenuHook = {\n    setupTable: function ($xetable) {\n        var xID = $xetable.xID, props = $xetable.props, reactData = $xetable.reactData, internalData = $xetable.internalData;\n        var _a = $xetable.getRefMaps(), refElem = _a.refElem, refTableFilter = _a.refTableFilter, refTableMenu = _a.refTableMenu;\n        var _b = $xetable.getComputeMaps(), computeMouseOpts = _b.computeMouseOpts, computeIsMenu = _b.computeIsMenu, computeMenuOpts = _b.computeMenuOpts;\n        var menuMethods = {};\n        var menuPrivateMethods = {};\n        /**\n         * 显示快捷菜单\n         */\n        var openContextMenu = function (evnt, type, params) {\n            var ctxMenuStore = reactData.ctxMenuStore;\n            var isMenu = computeIsMenu.value;\n            var menuOpts = computeMenuOpts.value;\n            var config = menuOpts[type];\n            var visibleMethod = menuOpts.visibleMethod;\n            if (config) {\n                var options_1 = config.options, disabled = config.disabled;\n                if (disabled) {\n                    evnt.preventDefault();\n                }\n                else if (isMenu && options_1 && options_1.length) {\n                    params.options = options_1;\n                    $xetable.preventEvent(evnt, 'event.showMenu', params, function () {\n                        if (!visibleMethod || visibleMethod(params)) {\n                            evnt.preventDefault();\n                            $xetable.updateZindex();\n                            var _a = getDomNode(), scrollTop_1 = _a.scrollTop, scrollLeft_1 = _a.scrollLeft, visibleHeight_1 = _a.visibleHeight, visibleWidth_1 = _a.visibleWidth;\n                            var top_1 = evnt.clientY + scrollTop_1;\n                            var left_1 = evnt.clientX + scrollLeft_1;\n                            var handleVisible_1 = function () {\n                                internalData._currMenuParams = params;\n                                Object.assign(ctxMenuStore, {\n                                    visible: true,\n                                    list: options_1,\n                                    selected: null,\n                                    selectChild: null,\n                                    showChild: false,\n                                    style: {\n                                        zIndex: internalData.tZindex,\n                                        top: \"\".concat(top_1, \"px\"),\n                                        left: \"\".concat(left_1, \"px\")\n                                    }\n                                });\n                                nextTick(function () {\n                                    var tableMenu = refTableMenu.value;\n                                    var ctxElem = tableMenu.getRefMaps().refElem.value;\n                                    var clientHeight = ctxElem.clientHeight;\n                                    var clientWidth = ctxElem.clientWidth;\n                                    var _a = getAbsolutePos(ctxElem), boundingTop = _a.boundingTop, boundingLeft = _a.boundingLeft;\n                                    var offsetTop = boundingTop + clientHeight - visibleHeight_1;\n                                    var offsetLeft = boundingLeft + clientWidth - visibleWidth_1;\n                                    if (offsetTop > -10) {\n                                        ctxMenuStore.style.top = \"\".concat(Math.max(scrollTop_1 + 2, top_1 - clientHeight - 2), \"px\");\n                                    }\n                                    if (offsetLeft > -10) {\n                                        ctxMenuStore.style.left = \"\".concat(Math.max(scrollLeft_1 + 2, left_1 - clientWidth - 2), \"px\");\n                                    }\n                                });\n                            };\n                            var keyboard = params.keyboard, row_1 = params.row, column_1 = params.column;\n                            if (keyboard && row_1 && column_1) {\n                                $xetable.scrollToRow(row_1, column_1).then(function () {\n                                    var cell = $xetable.getCell(row_1, column_1);\n                                    if (cell) {\n                                        var _a = getAbsolutePos(cell), boundingTop = _a.boundingTop, boundingLeft = _a.boundingLeft;\n                                        top_1 = boundingTop + scrollTop_1 + Math.floor(cell.offsetHeight / 2);\n                                        left_1 = boundingLeft + scrollLeft_1 + Math.floor(cell.offsetWidth / 2);\n                                    }\n                                    handleVisible_1();\n                                });\n                            }\n                            else {\n                                handleVisible_1();\n                            }\n                        }\n                        else {\n                            menuMethods.closeMenu();\n                        }\n                    });\n                }\n            }\n            $xetable.closeFilter();\n        };\n        menuMethods = {\n            /**\n             * 关闭快捷菜单\n             */\n            closeMenu: function () {\n                Object.assign(reactData.ctxMenuStore, {\n                    visible: false,\n                    selected: null,\n                    selectChild: null,\n                    showChild: false\n                });\n                return nextTick();\n            }\n        };\n        menuPrivateMethods = {\n            /**\n             * 处理菜单的移动\n             */\n            moveCtxMenu: function (evnt, ctxMenuStore, property, hasOper, operRest, menuList) {\n                var selectItem;\n                var selectIndex = XEUtils.findIndexOf(menuList, function (item) { return ctxMenuStore[property] === item; });\n                if (hasOper) {\n                    if (operRest && hasChildrenList(ctxMenuStore.selected)) {\n                        ctxMenuStore.showChild = true;\n                    }\n                    else {\n                        ctxMenuStore.showChild = false;\n                        ctxMenuStore.selectChild = null;\n                    }\n                }\n                else if (hasEventKey(evnt, EVENT_KEYS.ARROW_UP)) {\n                    for (var len = selectIndex - 1; len >= 0; len--) {\n                        if (menuList[len].visible !== false) {\n                            selectItem = menuList[len];\n                            break;\n                        }\n                    }\n                    ctxMenuStore[property] = selectItem || menuList[menuList.length - 1];\n                }\n                else if (hasEventKey(evnt, EVENT_KEYS.ARROW_DOWN)) {\n                    for (var index = selectIndex + 1; index < menuList.length; index++) {\n                        if (menuList[index].visible !== false) {\n                            selectItem = menuList[index];\n                            break;\n                        }\n                    }\n                    ctxMenuStore[property] = selectItem || menuList[0];\n                }\n                else if (ctxMenuStore[property] && (hasEventKey(evnt, EVENT_KEYS.ENTER) || hasEventKey(evnt, EVENT_KEYS.SPACEBAR))) {\n                    menuPrivateMethods.ctxMenuLinkEvent(evnt, ctxMenuStore[property]);\n                }\n            },\n            /**\n             * 快捷菜单事件处理\n             */\n            handleGlobalContextmenuEvent: function (evnt) {\n                var mouseConfig = props.mouseConfig, menuConfig = props.menuConfig;\n                var editStore = reactData.editStore, ctxMenuStore = reactData.ctxMenuStore;\n                var visibleColumn = internalData.visibleColumn;\n                var tableFilter = refTableFilter.value;\n                var tableMenu = refTableMenu.value;\n                var mouseOpts = computeMouseOpts.value;\n                var menuOpts = computeMenuOpts.value;\n                var el = refElem.value;\n                var selected = editStore.selected;\n                var layoutList = ['header', 'body', 'footer'];\n                if (isEnableConf(menuConfig)) {\n                    if (ctxMenuStore.visible && tableMenu && getEventTargetNode(evnt, tableMenu.getRefMaps().refElem.value).flag) {\n                        evnt.preventDefault();\n                        return;\n                    }\n                    if (internalData._keyCtx) {\n                        var type = 'body';\n                        var params = { type: type, $table: $xetable, keyboard: true, columns: visibleColumn.slice(0), $event: evnt };\n                        // 如果开启单元格区域\n                        if (mouseConfig && mouseOpts.area) {\n                            var activeArea = $xetable.getActiveCellArea();\n                            if (activeArea && activeArea.row && activeArea.column) {\n                                params.row = activeArea.row;\n                                params.column = activeArea.column;\n                                openContextMenu(evnt, type, params);\n                                return;\n                            }\n                        }\n                        else if (mouseConfig && mouseOpts.selected) {\n                            // 如果启用键盘导航且已选中单元格\n                            if (selected.row && selected.column) {\n                                params.row = selected.row;\n                                params.column = selected.column;\n                                openContextMenu(evnt, type, params);\n                                return;\n                            }\n                        }\n                    }\n                    // 分别匹配表尾、内容、表尾的快捷菜单\n                    for (var index = 0; index < layoutList.length; index++) {\n                        var layout = layoutList[index];\n                        var columnTargetNode = getEventTargetNode(evnt, el, \"vxe-\".concat(layout, \"--column\"), function (target) {\n                            // target=td|th，直接向上找 table 去匹配即可\n                            return target.parentNode.parentNode.parentNode.getAttribute('xid') === xID;\n                        });\n                        var params = { type: layout, $table: $xetable, columns: visibleColumn.slice(0), $event: evnt };\n                        if (columnTargetNode.flag) {\n                            var cell = columnTargetNode.targetElem;\n                            var columnNodeRest = $xetable.getColumnNode(cell);\n                            var column = columnNodeRest ? columnNodeRest.item : null;\n                            var typePrefix = \"\".concat(layout, \"-\");\n                            if (column) {\n                                Object.assign(params, { column: column, columnIndex: $xetable.getColumnIndex(column), cell: cell });\n                            }\n                            if (layout === 'body') {\n                                var rowNodeRest = $xetable.getRowNode(cell.parentNode);\n                                var row = rowNodeRest ? rowNodeRest.item : null;\n                                typePrefix = '';\n                                if (row) {\n                                    params.row = row;\n                                    params.rowIndex = $xetable.getRowIndex(row);\n                                }\n                            }\n                            var eventType = \"\".concat(typePrefix, \"cell-menu\");\n                            openContextMenu(evnt, layout, params);\n                            $xetable.dispatchEvent(eventType, params, evnt);\n                            return;\n                        }\n                        else if (getEventTargetNode(evnt, el, \"vxe-table--\".concat(layout, \"-wrapper\"), function (target) { return target.getAttribute('xid') === xID; }).flag) {\n                            if (menuOpts.trigger === 'cell') {\n                                evnt.preventDefault();\n                            }\n                            else {\n                                openContextMenu(evnt, layout, params);\n                            }\n                            return;\n                        }\n                    }\n                }\n                if (tableFilter && !getEventTargetNode(evnt, tableFilter.$el).flag) {\n                    $xetable.closeFilter();\n                }\n                menuMethods.closeMenu();\n            },\n            ctxMenuMouseoverEvent: function (evnt, item, child) {\n                var menuElem = evnt.currentTarget;\n                var ctxMenuStore = reactData.ctxMenuStore;\n                evnt.preventDefault();\n                evnt.stopPropagation();\n                ctxMenuStore.selected = item;\n                ctxMenuStore.selectChild = child;\n                if (!child) {\n                    ctxMenuStore.showChild = hasChildrenList(item);\n                    if (ctxMenuStore.showChild) {\n                        nextTick(function () {\n                            var childWrapperElem = menuElem.nextElementSibling;\n                            if (childWrapperElem) {\n                                var _a = getAbsolutePos(menuElem), boundingTop = _a.boundingTop, boundingLeft = _a.boundingLeft, visibleHeight = _a.visibleHeight, visibleWidth = _a.visibleWidth;\n                                var posTop = boundingTop + menuElem.offsetHeight;\n                                var posLeft = boundingLeft + menuElem.offsetWidth;\n                                var left = '';\n                                var right = '';\n                                // 是否超出右侧\n                                if (posLeft + childWrapperElem.offsetWidth > visibleWidth - 10) {\n                                    left = 'auto';\n                                    right = \"\".concat(menuElem.offsetWidth, \"px\");\n                                }\n                                // 是否超出底部\n                                var top_2 = '';\n                                var bottom = '';\n                                if (posTop + childWrapperElem.offsetHeight > visibleHeight - 10) {\n                                    top_2 = 'auto';\n                                    bottom = '0';\n                                }\n                                childWrapperElem.style.left = left;\n                                childWrapperElem.style.right = right;\n                                childWrapperElem.style.top = top_2;\n                                childWrapperElem.style.bottom = bottom;\n                            }\n                        });\n                    }\n                }\n            },\n            ctxMenuMouseoutEvent: function (evnt, item) {\n                var ctxMenuStore = reactData.ctxMenuStore;\n                if (!item.children) {\n                    ctxMenuStore.selected = null;\n                }\n                ctxMenuStore.selectChild = null;\n            },\n            /**\n             * 快捷菜单点击事件\n             */\n            ctxMenuLinkEvent: function (evnt, menu) {\n                // 如果一级菜单有配置 code 则允许点击，否则不能点击\n                if (!menu.disabled && (menu.code || !menu.children || !menu.children.length)) {\n                    var gMenuOpts = VXETable.menus.get(menu.code);\n                    var params = Object.assign({}, internalData._currMenuParams, { menu: menu, $table: $xetable, $grid: $xetable.xegrid, $event: evnt });\n                    if (gMenuOpts && gMenuOpts.menuMethod) {\n                        gMenuOpts.menuMethod(params, evnt);\n                    }\n                    $xetable.dispatchEvent('menu-click', params, evnt);\n                    menuMethods.closeMenu();\n                }\n            }\n        };\n        return __assign(__assign({}, menuMethods), menuPrivateMethods);\n    },\n    setupGrid: function ($xegrid) {\n        return $xegrid.extendTableMethods(tableMenuMethodKeys);\n    }\n};\nexport default tableMenuHook;\n",
      "start": 1714699767731,
      "end": 1714699767744,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VXETable } from '../../v-x-e-table';\nimport { getDomNode, getAbsolutePos, getEventTargetNode } from '../../tools/dom';\nimport { isEnableConf, hasChildrenList } from '../../tools/utils';\nimport { hasEventKey, EVENT_KEYS } from '../../tools/event';\nvar tableMenuMethodKeys = ['closeMenu'];\nvar tableMenuHook = {\n    setupTable: function ($xetable) {\n        var xID = $xetable.xID, props = $xetable.props, reactData = $xetable.reactData, internalData = $xetable.internalData;\n        var _a = $xetable.getRefMaps(), refElem = _a.refElem, refTableFilter = _a.refTableFilter, refTableMenu = _a.refTableMenu;\n        var _b = $xetable.getComputeMaps(), computeMouseOpts = _b.computeMouseOpts, computeIsMenu = _b.computeIsMenu, computeMenuOpts = _b.computeMenuOpts;\n        var menuMethods = {};\n        var menuPrivateMethods = {};\n        /**\n         * 显示快捷菜单\n         */\n        var openContextMenu = function (evnt, type, params) {\n            var ctxMenuStore = reactData.ctxMenuStore;\n            var isMenu = computeIsMenu.value;\n            var menuOpts = computeMenuOpts.value;\n            var config = menuOpts[type];\n            var visibleMethod = menuOpts.visibleMethod;\n            if (config) {\n                var options_1 = config.options, disabled = config.disabled;\n                if (disabled) {\n                    evnt.preventDefault();\n                }\n                else if (isMenu && options_1 && options_1.length) {\n                    params.options = options_1;\n                    $xetable.preventEvent(evnt, 'event.showMenu', params, function () {\n                        if (!visibleMethod || visibleMethod(params)) {\n                            evnt.preventDefault();\n                            $xetable.updateZindex();\n                            var _a = getDomNode(), scrollTop_1 = _a.scrollTop, scrollLeft_1 = _a.scrollLeft, visibleHeight_1 = _a.visibleHeight, visibleWidth_1 = _a.visibleWidth;\n                            var top_1 = evnt.clientY + scrollTop_1;\n                            var left_1 = evnt.clientX + scrollLeft_1;\n                            var handleVisible_1 = function () {\n                                internalData._currMenuParams = params;\n                                Object.assign(ctxMenuStore, {\n                                    visible: true,\n                                    list: options_1,\n                                    selected: null,\n                                    selectChild: null,\n                                    showChild: false,\n                                    style: {\n                                        zIndex: internalData.tZindex,\n                                        top: \"\".concat(top_1, \"px\"),\n                                        left: \"\".concat(left_1, \"px\")\n                                    }\n                                });\n                                nextTick(function () {\n                                    var tableMenu = refTableMenu.value;\n                                    var ctxElem = tableMenu.getRefMaps().refElem.value;\n                                    var clientHeight = ctxElem.clientHeight;\n                                    var clientWidth = ctxElem.clientWidth;\n                                    var _a = getAbsolutePos(ctxElem), boundingTop = _a.boundingTop, boundingLeft = _a.boundingLeft;\n                                    var offsetTop = boundingTop + clientHeight - visibleHeight_1;\n                                    var offsetLeft = boundingLeft + clientWidth - visibleWidth_1;\n                                    if (offsetTop > -10) {\n                                        ctxMenuStore.style.top = \"\".concat(Math.max(scrollTop_1 + 2, top_1 - clientHeight - 2), \"px\");\n                                    }\n                                    if (offsetLeft > -10) {\n                                        ctxMenuStore.style.left = \"\".concat(Math.max(scrollLeft_1 + 2, left_1 - clientWidth - 2), \"px\");\n                                    }\n                                });\n                            };\n                            var keyboard = params.keyboard, row_1 = params.row, column_1 = params.column;\n                            if (keyboard && row_1 && column_1) {\n                                $xetable.scrollToRow(row_1, column_1).then(function () {\n                                    var cell = $xetable.getCell(row_1, column_1);\n                                    if (cell) {\n                                        var _a = getAbsolutePos(cell), boundingTop = _a.boundingTop, boundingLeft = _a.boundingLeft;\n                                        top_1 = boundingTop + scrollTop_1 + Math.floor(cell.offsetHeight / 2);\n                                        left_1 = boundingLeft + scrollLeft_1 + Math.floor(cell.offsetWidth / 2);\n                                    }\n                                    handleVisible_1();\n                                });\n                            }\n                            else {\n                                handleVisible_1();\n                            }\n                        }\n                        else {\n                            menuMethods.closeMenu();\n                        }\n                    });\n                }\n            }\n            $xetable.closeFilter();\n        };\n        menuMethods = {\n            /**\n             * 关闭快捷菜单\n             */\n            closeMenu: function () {\n                Object.assign(reactData.ctxMenuStore, {\n                    visible: false,\n                    selected: null,\n                    selectChild: null,\n                    showChild: false\n                });\n                return nextTick();\n            }\n        };\n        menuPrivateMethods = {\n            /**\n             * 处理菜单的移动\n             */\n            moveCtxMenu: function (evnt, ctxMenuStore, property, hasOper, operRest, menuList) {\n                var selectItem;\n                var selectIndex = XEUtils.findIndexOf(menuList, function (item) { return ctxMenuStore[property] === item; });\n                if (hasOper) {\n                    if (operRest && hasChildrenList(ctxMenuStore.selected)) {\n                        ctxMenuStore.showChild = true;\n                    }\n                    else {\n                        ctxMenuStore.showChild = false;\n                        ctxMenuStore.selectChild = null;\n                    }\n                }\n                else if (hasEventKey(evnt, EVENT_KEYS.ARROW_UP)) {\n                    for (var len = selectIndex - 1; len >= 0; len--) {\n                        if (menuList[len].visible !== false) {\n                            selectItem = menuList[len];\n                            break;\n                        }\n                    }\n                    ctxMenuStore[property] = selectItem || menuList[menuList.length - 1];\n                }\n                else if (hasEventKey(evnt, EVENT_KEYS.ARROW_DOWN)) {\n                    for (var index = selectIndex + 1; index < menuList.length; index++) {\n                        if (menuList[index].visible !== false) {\n                            selectItem = menuList[index];\n                            break;\n                        }\n                    }\n                    ctxMenuStore[property] = selectItem || menuList[0];\n                }\n                else if (ctxMenuStore[property] && (hasEventKey(evnt, EVENT_KEYS.ENTER) || hasEventKey(evnt, EVENT_KEYS.SPACEBAR))) {\n                    menuPrivateMethods.ctxMenuLinkEvent(evnt, ctxMenuStore[property]);\n                }\n            },\n            /**\n             * 快捷菜单事件处理\n             */\n            handleGlobalContextmenuEvent: function (evnt) {\n                var mouseConfig = props.mouseConfig, menuConfig = props.menuConfig;\n                var editStore = reactData.editStore, ctxMenuStore = reactData.ctxMenuStore;\n                var visibleColumn = internalData.visibleColumn;\n                var tableFilter = refTableFilter.value;\n                var tableMenu = refTableMenu.value;\n                var mouseOpts = computeMouseOpts.value;\n                var menuOpts = computeMenuOpts.value;\n                var el = refElem.value;\n                var selected = editStore.selected;\n                var layoutList = ['header', 'body', 'footer'];\n                if (isEnableConf(menuConfig)) {\n                    if (ctxMenuStore.visible && tableMenu && getEventTargetNode(evnt, tableMenu.getRefMaps().refElem.value).flag) {\n                        evnt.preventDefault();\n                        return;\n                    }\n                    if (internalData._keyCtx) {\n                        var type = 'body';\n                        var params = { type: type, $table: $xetable, keyboard: true, columns: visibleColumn.slice(0), $event: evnt };\n                        // 如果开启单元格区域\n                        if (mouseConfig && mouseOpts.area) {\n                            var activeArea = $xetable.getActiveCellArea();\n                            if (activeArea && activeArea.row && activeArea.column) {\n                                params.row = activeArea.row;\n                                params.column = activeArea.column;\n                                openContextMenu(evnt, type, params);\n                                return;\n                            }\n                        }\n                        else if (mouseConfig && mouseOpts.selected) {\n                            // 如果启用键盘导航且已选中单元格\n                            if (selected.row && selected.column) {\n                                params.row = selected.row;\n                                params.column = selected.column;\n                                openContextMenu(evnt, type, params);\n                                return;\n                            }\n                        }\n                    }\n                    // 分别匹配表尾、内容、表尾的快捷菜单\n                    for (var index = 0; index < layoutList.length; index++) {\n                        var layout = layoutList[index];\n                        var columnTargetNode = getEventTargetNode(evnt, el, \"vxe-\".concat(layout, \"--column\"), function (target) {\n                            // target=td|th，直接向上找 table 去匹配即可\n                            return target.parentNode.parentNode.parentNode.getAttribute('xid') === xID;\n                        });\n                        var params = { type: layout, $table: $xetable, columns: visibleColumn.slice(0), $event: evnt };\n                        if (columnTargetNode.flag) {\n                            var cell = columnTargetNode.targetElem;\n                            var columnNodeRest = $xetable.getColumnNode(cell);\n                            var column = columnNodeRest ? columnNodeRest.item : null;\n                            var typePrefix = \"\".concat(layout, \"-\");\n                            if (column) {\n                                Object.assign(params, { column: column, columnIndex: $xetable.getColumnIndex(column), cell: cell });\n                            }\n                            if (layout === 'body') {\n                                var rowNodeRest = $xetable.getRowNode(cell.parentNode);\n                                var row = rowNodeRest ? rowNodeRest.item : null;\n                                typePrefix = '';\n                                if (row) {\n                                    params.row = row;\n                                    params.rowIndex = $xetable.getRowIndex(row);\n                                }\n                            }\n                            var eventType = \"\".concat(typePrefix, \"cell-menu\");\n                            openContextMenu(evnt, layout, params);\n                            $xetable.dispatchEvent(eventType, params, evnt);\n                            return;\n                        }\n                        else if (getEventTargetNode(evnt, el, \"vxe-table--\".concat(layout, \"-wrapper\"), function (target) { return target.getAttribute('xid') === xID; }).flag) {\n                            if (menuOpts.trigger === 'cell') {\n                                evnt.preventDefault();\n                            }\n                            else {\n                                openContextMenu(evnt, layout, params);\n                            }\n                            return;\n                        }\n                    }\n                }\n                if (tableFilter && !getEventTargetNode(evnt, tableFilter.$el).flag) {\n                    $xetable.closeFilter();\n                }\n                menuMethods.closeMenu();\n            },\n            ctxMenuMouseoverEvent: function (evnt, item, child) {\n                var menuElem = evnt.currentTarget;\n                var ctxMenuStore = reactData.ctxMenuStore;\n                evnt.preventDefault();\n                evnt.stopPropagation();\n                ctxMenuStore.selected = item;\n                ctxMenuStore.selectChild = child;\n                if (!child) {\n                    ctxMenuStore.showChild = hasChildrenList(item);\n                    if (ctxMenuStore.showChild) {\n                        nextTick(function () {\n                            var childWrapperElem = menuElem.nextElementSibling;\n                            if (childWrapperElem) {\n                                var _a = getAbsolutePos(menuElem), boundingTop = _a.boundingTop, boundingLeft = _a.boundingLeft, visibleHeight = _a.visibleHeight, visibleWidth = _a.visibleWidth;\n                                var posTop = boundingTop + menuElem.offsetHeight;\n                                var posLeft = boundingLeft + menuElem.offsetWidth;\n                                var left = '';\n                                var right = '';\n                                // 是否超出右侧\n                                if (posLeft + childWrapperElem.offsetWidth > visibleWidth - 10) {\n                                    left = 'auto';\n                                    right = \"\".concat(menuElem.offsetWidth, \"px\");\n                                }\n                                // 是否超出底部\n                                var top_2 = '';\n                                var bottom = '';\n                                if (posTop + childWrapperElem.offsetHeight > visibleHeight - 10) {\n                                    top_2 = 'auto';\n                                    bottom = '0';\n                                }\n                                childWrapperElem.style.left = left;\n                                childWrapperElem.style.right = right;\n                                childWrapperElem.style.top = top_2;\n                                childWrapperElem.style.bottom = bottom;\n                            }\n                        });\n                    }\n                }\n            },\n            ctxMenuMouseoutEvent: function (evnt, item) {\n                var ctxMenuStore = reactData.ctxMenuStore;\n                if (!item.children) {\n                    ctxMenuStore.selected = null;\n                }\n                ctxMenuStore.selectChild = null;\n            },\n            /**\n             * 快捷菜单点击事件\n             */\n            ctxMenuLinkEvent: function (evnt, menu) {\n                // 如果一级菜单有配置 code 则允许点击，否则不能点击\n                if (!menu.disabled && (menu.code || !menu.children || !menu.children.length)) {\n                    var gMenuOpts = VXETable.menus.get(menu.code);\n                    var params = Object.assign({}, internalData._currMenuParams, { menu: menu, $table: $xetable, $grid: $xetable.xegrid, $event: evnt });\n                    if (gMenuOpts && gMenuOpts.menuMethod) {\n                        gMenuOpts.menuMethod(params, evnt);\n                    }\n                    $xetable.dispatchEvent('menu-click', params, evnt);\n                    menuMethods.closeMenu();\n                }\n            }\n        };\n        return __assign(__assign({}, menuMethods), menuPrivateMethods);\n    },\n    setupGrid: function ($xegrid) {\n        return $xegrid.extendTableMethods(tableMenuMethodKeys);\n    }\n};\nexport default tableMenuHook;\n",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767744,
      "end": 1714699767744,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767744,
      "end": 1714699767745,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767745,
      "end": 1714699767745,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767745,
      "end": 1714699767745,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767745,
      "end": 1714699767745,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767745,
      "end": 1714699767745,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767745,
      "end": 1714699767745,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767745,
      "end": 1714699767745,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767745,
      "end": 1714699767745,
      "order": "normal"
    }
  ]
}

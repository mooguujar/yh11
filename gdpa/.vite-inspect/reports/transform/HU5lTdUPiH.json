{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/trim.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import baseToString from './_baseToString.js';\nimport baseTrim from './_baseTrim.js';\nimport castSlice from './_castSlice.js';\nimport charsEndIndex from './_charsEndIndex.js';\nimport charsStartIndex from './_charsStartIndex.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return baseTrim(string);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nexport default trim;\n",
      "start": 1714699768537,
      "end": 1714699768562,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768562,
      "end": 1714699768562,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768562,
      "end": 1714699768562,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768562,
      "end": 1714699768562,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768562,
      "end": 1714699768562,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768562,
      "end": 1714699768562,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768562,
      "end": 1714699768562,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import baseToString from './_baseToString.js';\nimport baseTrim from './_baseTrim.js';\nimport castSlice from './_castSlice.js';\nimport charsEndIndex from './_charsEndIndex.js';\nimport charsStartIndex from './_charsStartIndex.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return baseTrim(string);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nexport default trim;\n",
      "start": 1714699768562,
      "end": 1714699768562,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768562,
      "end": 1714699768562,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699768562,
      "end": 1714699768562,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699768562,
      "end": 1714699768562,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768562,
      "end": 1714699768562,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768562,
      "end": 1714699768562,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768562,
      "end": 1714699768562,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768562,
      "end": 1714699768563,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768563,
      "end": 1714699768563,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768563,
      "end": 1714699768563,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768563,
      "end": 1714699768563,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768563,
      "end": 1714699768563,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768563,
      "end": 1714699768563,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768563,
      "end": 1714699768563,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768563,
      "end": 1714699768563,
      "order": "normal"
    }
  ]
}

{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/keyboard/src/hook.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import XEUtils from 'xe-utils';\nimport { browse, hasClass, getAbsolutePos, addClass, removeClass, getEventTargetNode } from '../../tools/dom';\nfunction getTargetOffset(target, container) {\n    var offsetTop = 0;\n    var offsetLeft = 0;\n    var triggerCheckboxLabel = !browse.firefox && hasClass(target, 'vxe-checkbox--label');\n    if (triggerCheckboxLabel) {\n        var checkboxLabelStyle = getComputedStyle(target);\n        offsetTop -= XEUtils.toNumber(checkboxLabelStyle.paddingTop);\n        offsetLeft -= XEUtils.toNumber(checkboxLabelStyle.paddingLeft);\n    }\n    while (target && target !== container) {\n        offsetTop += target.offsetTop;\n        offsetLeft += target.offsetLeft;\n        target = target.offsetParent;\n        if (triggerCheckboxLabel) {\n            var checkboxStyle = getComputedStyle(target);\n            offsetTop -= XEUtils.toNumber(checkboxStyle.paddingTop);\n            offsetLeft -= XEUtils.toNumber(checkboxStyle.paddingLeft);\n        }\n    }\n    return { offsetTop: offsetTop, offsetLeft: offsetLeft };\n}\nvar tableKeyboardHook = {\n    setupTable: function ($xetable) {\n        var props = $xetable.props, reactData = $xetable.reactData, internalData = $xetable.internalData;\n        var refElem = $xetable.getRefMaps().refElem;\n        var _a = $xetable.getComputeMaps(), computeEditOpts = _a.computeEditOpts, computeCheckboxOpts = _a.computeCheckboxOpts, computeMouseOpts = _a.computeMouseOpts, computeTreeOpts = _a.computeTreeOpts;\n        function getCheckboxRangeRows(params, targetTrElem, moveRange) {\n            var countHeight = 0;\n            var rangeRows = [];\n            var isDown = moveRange > 0;\n            var moveSize = moveRange > 0 ? moveRange : (Math.abs(moveRange) + targetTrElem.offsetHeight);\n            var scrollYLoad = reactData.scrollYLoad;\n            var afterFullData = internalData.afterFullData, scrollYStore = internalData.scrollYStore;\n            if (scrollYLoad) {\n                var _rowIndex = $xetable.getVTRowIndex(params.row);\n                if (isDown) {\n                    rangeRows = afterFullData.slice(_rowIndex, _rowIndex + Math.ceil(moveSize / scrollYStore.rowHeight));\n                }\n                else {\n                    rangeRows = afterFullData.slice(_rowIndex - Math.floor(moveSize / scrollYStore.rowHeight) + 1, _rowIndex + 1);\n                }\n            }\n            else {\n                var siblingProp = isDown ? 'next' : 'previous';\n                while (targetTrElem && countHeight < moveSize) {\n                    var rowNodeRest = $xetable.getRowNode(targetTrElem);\n                    if (rowNodeRest) {\n                        rangeRows.push(rowNodeRest.item);\n                        countHeight += targetTrElem.offsetHeight;\n                        targetTrElem = targetTrElem[\"\".concat(siblingProp, \"ElementSibling\")];\n                    }\n                }\n            }\n            return rangeRows;\n        }\n        var handleCheckboxRangeEvent = function (evnt, params) {\n            var column = params.column, cell = params.cell;\n            if (column.type === 'checkbox') {\n                var el_1 = refElem.value;\n                var elemStore = internalData.elemStore;\n                var disX_1 = evnt.clientX;\n                var disY_1 = evnt.clientY;\n                var bodyWrapperRef = elemStore[\"\".concat(column.fixed || 'main', \"-body-wrapper\")] || elemStore['main-body-wrapper'];\n                var bodyWrapperElem_1 = bodyWrapperRef ? bodyWrapperRef.value : null;\n                if (!bodyWrapperElem_1) {\n                    return;\n                }\n                var checkboxRangeElem_1 = bodyWrapperElem_1.querySelector('.vxe-table--checkbox-range');\n                var domMousemove_1 = document.onmousemove;\n                var domMouseup_1 = document.onmouseup;\n                var trElem_1 = cell.parentNode;\n                var selectRecords_1 = $xetable.getCheckboxRecords();\n                var lastRangeRows_1 = [];\n                var marginSize_1 = 1;\n                var offsetRest = getTargetOffset(evnt.target, bodyWrapperElem_1);\n                var startTop_1 = offsetRest.offsetTop + evnt.offsetY;\n                var startLeft_1 = offsetRest.offsetLeft + evnt.offsetX;\n                var startScrollTop_1 = bodyWrapperElem_1.scrollTop;\n                var rowHeight_1 = trElem_1.offsetHeight;\n                var mouseScrollTimeout_1 = null;\n                var isMouseScrollDown_1 = false;\n                var mouseScrollSpaceSize_1 = 1;\n                var triggerEvent_1 = function (type, evnt) {\n                    $xetable.dispatchEvent(\"checkbox-range-\".concat(type), { records: $xetable.getCheckboxRecords(), reserves: $xetable.getCheckboxReserveRecords() }, evnt);\n                };\n                var handleChecked_1 = function (evnt) {\n                    var clientX = evnt.clientX, clientY = evnt.clientY;\n                    var offsetLeft = clientX - disX_1;\n                    var offsetTop = clientY - disY_1 + (bodyWrapperElem_1.scrollTop - startScrollTop_1);\n                    var rangeHeight = Math.abs(offsetTop);\n                    var rangeWidth = Math.abs(offsetLeft);\n                    var rangeTop = startTop_1;\n                    var rangeLeft = startLeft_1;\n                    if (offsetTop < marginSize_1) {\n                        // 向上\n                        rangeTop += offsetTop;\n                        if (rangeTop < marginSize_1) {\n                            rangeTop = marginSize_1;\n                            rangeHeight = startTop_1;\n                        }\n                    }\n                    else {\n                        // 向下\n                        rangeHeight = Math.min(rangeHeight, bodyWrapperElem_1.scrollHeight - startTop_1 - marginSize_1);\n                    }\n                    if (offsetLeft < marginSize_1) {\n                        // 向左\n                        rangeLeft += offsetLeft;\n                        if (rangeWidth > startLeft_1) {\n                            rangeLeft = marginSize_1;\n                            rangeWidth = startLeft_1;\n                        }\n                    }\n                    else {\n                        // 向右\n                        rangeWidth = Math.min(rangeWidth, bodyWrapperElem_1.clientWidth - startLeft_1 - marginSize_1);\n                    }\n                    checkboxRangeElem_1.style.height = \"\".concat(rangeHeight, \"px\");\n                    checkboxRangeElem_1.style.width = \"\".concat(rangeWidth, \"px\");\n                    checkboxRangeElem_1.style.left = \"\".concat(rangeLeft, \"px\");\n                    checkboxRangeElem_1.style.top = \"\".concat(rangeTop, \"px\");\n                    checkboxRangeElem_1.style.display = 'block';\n                    var rangeRows = getCheckboxRangeRows(params, trElem_1, offsetTop < marginSize_1 ? -rangeHeight : rangeHeight);\n                    // 至少滑动 10px 才能有效匹配\n                    if (rangeHeight > 10 && rangeRows.length !== lastRangeRows_1.length) {\n                        lastRangeRows_1 = rangeRows;\n                        if (evnt.ctrlKey) {\n                            rangeRows.forEach(function (row) {\n                                $xetable.handleSelectRow({ row: row }, selectRecords_1.indexOf(row) === -1);\n                            });\n                        }\n                        else {\n                            $xetable.setAllCheckboxRow(false);\n                            $xetable.handleCheckedCheckboxRow(rangeRows, true, false);\n                        }\n                        triggerEvent_1('change', evnt);\n                    }\n                };\n                // 停止鼠标滚动\n                var stopMouseScroll_1 = function () {\n                    clearTimeout(mouseScrollTimeout_1);\n                    mouseScrollTimeout_1 = null;\n                };\n                // 开始鼠标滚动\n                var startMouseScroll_1 = function (evnt) {\n                    stopMouseScroll_1();\n                    mouseScrollTimeout_1 = setTimeout(function () {\n                        if (mouseScrollTimeout_1) {\n                            var scrollLeft = bodyWrapperElem_1.scrollLeft, scrollTop = bodyWrapperElem_1.scrollTop, clientHeight = bodyWrapperElem_1.clientHeight, scrollHeight = bodyWrapperElem_1.scrollHeight;\n                            var topSize = Math.ceil(mouseScrollSpaceSize_1 * 50 / rowHeight_1);\n                            if (isMouseScrollDown_1) {\n                                if (scrollTop + clientHeight < scrollHeight) {\n                                    $xetable.scrollTo(scrollLeft, scrollTop + topSize);\n                                    startMouseScroll_1(evnt);\n                                    handleChecked_1(evnt);\n                                }\n                                else {\n                                    stopMouseScroll_1();\n                                }\n                            }\n                            else {\n                                if (scrollTop) {\n                                    $xetable.scrollTo(scrollLeft, scrollTop - topSize);\n                                    startMouseScroll_1(evnt);\n                                    handleChecked_1(evnt);\n                                }\n                                else {\n                                    stopMouseScroll_1();\n                                }\n                            }\n                        }\n                    }, 50);\n                };\n                addClass(el_1, 'drag--range');\n                document.onmousemove = function (evnt) {\n                    evnt.preventDefault();\n                    evnt.stopPropagation();\n                    var clientY = evnt.clientY;\n                    var boundingTop = getAbsolutePos(bodyWrapperElem_1).boundingTop;\n                    // 如果超过可视区，触发滚动\n                    if (clientY < boundingTop) {\n                        isMouseScrollDown_1 = false;\n                        mouseScrollSpaceSize_1 = boundingTop - clientY;\n                        if (!mouseScrollTimeout_1) {\n                            startMouseScroll_1(evnt);\n                        }\n                    }\n                    else if (clientY > boundingTop + bodyWrapperElem_1.clientHeight) {\n                        isMouseScrollDown_1 = true;\n                        mouseScrollSpaceSize_1 = clientY - boundingTop - bodyWrapperElem_1.clientHeight;\n                        if (!mouseScrollTimeout_1) {\n                            startMouseScroll_1(evnt);\n                        }\n                    }\n                    else if (mouseScrollTimeout_1) {\n                        stopMouseScroll_1();\n                    }\n                    handleChecked_1(evnt);\n                };\n                document.onmouseup = function (evnt) {\n                    stopMouseScroll_1();\n                    removeClass(el_1, 'drag--range');\n                    checkboxRangeElem_1.removeAttribute('style');\n                    document.onmousemove = domMousemove_1;\n                    document.onmouseup = domMouseup_1;\n                    triggerEvent_1('end', evnt);\n                };\n                triggerEvent_1('start', evnt);\n            }\n        };\n        var handleCellMousedownEvent = function (evnt, params) {\n            var editConfig = props.editConfig, checkboxConfig = props.checkboxConfig, mouseConfig = props.mouseConfig;\n            var checkboxOpts = computeCheckboxOpts.value;\n            var mouseOpts = computeMouseOpts.value;\n            var editOpts = computeEditOpts.value;\n            if (mouseConfig && mouseOpts.area && $xetable.handleCellAreaEvent) {\n                return $xetable.handleCellAreaEvent(evnt, params);\n            }\n            else {\n                if (checkboxConfig && checkboxOpts.range) {\n                    handleCheckboxRangeEvent(evnt, params);\n                }\n                if (mouseConfig && mouseOpts.selected) {\n                    if (!editConfig || editOpts.mode === 'cell') {\n                        $xetable.handleSelected(params, evnt);\n                    }\n                }\n            }\n        };\n        var keyboardMethods = {\n            // 处理 Tab 键移动\n            moveTabSelected: function (args, isLeft, evnt) {\n                var editConfig = props.editConfig;\n                var afterFullData = internalData.afterFullData, visibleColumn = internalData.visibleColumn;\n                var editOpts = computeEditOpts.value;\n                var targetRow;\n                var targetRowIndex;\n                var targetColumnIndex;\n                var params = Object.assign({}, args);\n                var _rowIndex = $xetable.getVTRowIndex(params.row);\n                var _columnIndex = $xetable.getVTColumnIndex(params.column);\n                evnt.preventDefault();\n                if (isLeft) {\n                    // 向左\n                    if (_columnIndex <= 0) {\n                        // 如果已经是第一列，则移动到上一行\n                        if (_rowIndex > 0) {\n                            targetRowIndex = _rowIndex - 1;\n                            targetRow = afterFullData[targetRowIndex];\n                            targetColumnIndex = visibleColumn.length - 1;\n                        }\n                    }\n                    else {\n                        targetColumnIndex = _columnIndex - 1;\n                    }\n                }\n                else {\n                    if (_columnIndex >= visibleColumn.length - 1) {\n                        // 如果已经是第一列，则移动到上一行\n                        if (_rowIndex < afterFullData.length - 1) {\n                            targetRowIndex = _rowIndex + 1;\n                            targetRow = afterFullData[targetRowIndex];\n                            targetColumnIndex = 0;\n                        }\n                    }\n                    else {\n                        targetColumnIndex = _columnIndex + 1;\n                    }\n                }\n                var targetColumn = visibleColumn[targetColumnIndex];\n                if (targetColumn) {\n                    if (targetRow) {\n                        params.rowIndex = targetRowIndex;\n                        params.row = targetRow;\n                    }\n                    else {\n                        params.rowIndex = _rowIndex;\n                    }\n                    params.columnIndex = targetColumnIndex;\n                    params.column = targetColumn;\n                    params.cell = $xetable.getCell(params.row, params.column);\n                    if (editConfig) {\n                        if (editOpts.trigger === 'click' || editOpts.trigger === 'dblclick') {\n                            if (editOpts.mode === 'row') {\n                                $xetable.handleActived(params, evnt);\n                            }\n                            else {\n                                $xetable.scrollToRow(params.row, params.column)\n                                    .then(function () { return $xetable.handleSelected(params, evnt); });\n                            }\n                        }\n                    }\n                    else {\n                        $xetable.scrollToRow(params.row, params.column)\n                            .then(function () { return $xetable.handleSelected(params, evnt); });\n                    }\n                }\n            },\n            // 处理当前行方向键移动\n            moveCurrentRow: function (isUpArrow, isDwArrow, evnt) {\n                var treeConfig = props.treeConfig;\n                var currentRow = reactData.currentRow;\n                var afterFullData = internalData.afterFullData;\n                var treeOpts = computeTreeOpts.value;\n                var childrenField = treeOpts.children || treeOpts.childrenField;\n                var targetRow;\n                evnt.preventDefault();\n                if (currentRow) {\n                    if (treeConfig) {\n                        var _a = XEUtils.findTree(afterFullData, function (item) { return item === currentRow; }, { children: childrenField }), index = _a.index, items = _a.items;\n                        if (isUpArrow && index > 0) {\n                            targetRow = items[index - 1];\n                        }\n                        else if (isDwArrow && index < items.length - 1) {\n                            targetRow = items[index + 1];\n                        }\n                    }\n                    else {\n                        var _rowIndex = $xetable.getVTRowIndex(currentRow);\n                        if (isUpArrow && _rowIndex > 0) {\n                            targetRow = afterFullData[_rowIndex - 1];\n                        }\n                        else if (isDwArrow && _rowIndex < afterFullData.length - 1) {\n                            targetRow = afterFullData[_rowIndex + 1];\n                        }\n                    }\n                }\n                else {\n                    targetRow = afterFullData[0];\n                }\n                if (targetRow) {\n                    var params_1 = {\n                        $table: $xetable,\n                        row: targetRow,\n                        rowIndex: $xetable.getRowIndex(targetRow),\n                        $rowIndex: $xetable.getVMRowIndex(targetRow)\n                    };\n                    $xetable.scrollToRow(targetRow)\n                        .then(function () { return $xetable.triggerCurrentRowEvent(evnt, params_1); });\n                }\n            },\n            // 处理可编辑方向键移动\n            moveSelected: function (args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt) {\n                var afterFullData = internalData.afterFullData, visibleColumn = internalData.visibleColumn;\n                var params = Object.assign({}, args);\n                var _rowIndex = $xetable.getVTRowIndex(params.row);\n                var _columnIndex = $xetable.getVTColumnIndex(params.column);\n                evnt.preventDefault();\n                if (isUpArrow && _rowIndex > 0) {\n                    // 移动到上一行\n                    params.rowIndex = _rowIndex - 1;\n                    params.row = afterFullData[params.rowIndex];\n                }\n                else if (isDwArrow && _rowIndex < afterFullData.length - 1) {\n                    // 移动到下一行\n                    params.rowIndex = _rowIndex + 1;\n                    params.row = afterFullData[params.rowIndex];\n                }\n                else if (isLeftArrow && _columnIndex) {\n                    // 移动到左侧单元格\n                    params.columnIndex = _columnIndex - 1;\n                    params.column = visibleColumn[params.columnIndex];\n                }\n                else if (isRightArrow && _columnIndex < visibleColumn.length - 1) {\n                    // 移动到右侧单元格\n                    params.columnIndex = _columnIndex + 1;\n                    params.column = visibleColumn[params.columnIndex];\n                }\n                $xetable.scrollToRow(params.row, params.column).then(function () {\n                    params.cell = $xetable.getCell(params.row, params.column);\n                    $xetable.handleSelected(params, evnt);\n                });\n            },\n            /**\n             * 表头单元格按下事件\n             */\n            triggerHeaderCellMousedownEvent: function (evnt, params) {\n                var mouseConfig = props.mouseConfig;\n                var mouseOpts = computeMouseOpts.value;\n                if (mouseConfig && mouseOpts.area && $xetable.handleHeaderCellAreaEvent) {\n                    var cell = evnt.currentTarget;\n                    var triggerSort = getEventTargetNode(evnt, cell, 'vxe-cell--sort').flag;\n                    var triggerFilter = getEventTargetNode(evnt, cell, 'vxe-cell--filter').flag;\n                    $xetable.handleHeaderCellAreaEvent(evnt, Object.assign({ cell: cell, triggerSort: triggerSort, triggerFilter: triggerFilter }, params));\n                }\n                $xetable.focus();\n                if ($xetable.closeMenu) {\n                    $xetable.closeMenu();\n                }\n            },\n            /**\n             * 单元格按下事件\n             */\n            triggerCellMousedownEvent: function (evnt, params) {\n                var cell = evnt.currentTarget;\n                params.cell = cell;\n                handleCellMousedownEvent(evnt, params);\n                $xetable.focus();\n                $xetable.closeFilter();\n                if ($xetable.closeMenu) {\n                    $xetable.closeMenu();\n                }\n            }\n        };\n        return keyboardMethods;\n    }\n};\nexport default tableKeyboardHook;\n",
      "start": 1714699767734,
      "end": 1714699767753,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767753,
      "end": 1714699767753,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767753,
      "end": 1714699767753,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767753,
      "end": 1714699767753,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767753,
      "end": 1714699767753,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767753,
      "end": 1714699767753,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767753,
      "end": 1714699767753,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import XEUtils from 'xe-utils';\nimport { browse, hasClass, getAbsolutePos, addClass, removeClass, getEventTargetNode } from '../../tools/dom';\nfunction getTargetOffset(target, container) {\n    var offsetTop = 0;\n    var offsetLeft = 0;\n    var triggerCheckboxLabel = !browse.firefox && hasClass(target, 'vxe-checkbox--label');\n    if (triggerCheckboxLabel) {\n        var checkboxLabelStyle = getComputedStyle(target);\n        offsetTop -= XEUtils.toNumber(checkboxLabelStyle.paddingTop);\n        offsetLeft -= XEUtils.toNumber(checkboxLabelStyle.paddingLeft);\n    }\n    while (target && target !== container) {\n        offsetTop += target.offsetTop;\n        offsetLeft += target.offsetLeft;\n        target = target.offsetParent;\n        if (triggerCheckboxLabel) {\n            var checkboxStyle = getComputedStyle(target);\n            offsetTop -= XEUtils.toNumber(checkboxStyle.paddingTop);\n            offsetLeft -= XEUtils.toNumber(checkboxStyle.paddingLeft);\n        }\n    }\n    return { offsetTop: offsetTop, offsetLeft: offsetLeft };\n}\nvar tableKeyboardHook = {\n    setupTable: function ($xetable) {\n        var props = $xetable.props, reactData = $xetable.reactData, internalData = $xetable.internalData;\n        var refElem = $xetable.getRefMaps().refElem;\n        var _a = $xetable.getComputeMaps(), computeEditOpts = _a.computeEditOpts, computeCheckboxOpts = _a.computeCheckboxOpts, computeMouseOpts = _a.computeMouseOpts, computeTreeOpts = _a.computeTreeOpts;\n        function getCheckboxRangeRows(params, targetTrElem, moveRange) {\n            var countHeight = 0;\n            var rangeRows = [];\n            var isDown = moveRange > 0;\n            var moveSize = moveRange > 0 ? moveRange : (Math.abs(moveRange) + targetTrElem.offsetHeight);\n            var scrollYLoad = reactData.scrollYLoad;\n            var afterFullData = internalData.afterFullData, scrollYStore = internalData.scrollYStore;\n            if (scrollYLoad) {\n                var _rowIndex = $xetable.getVTRowIndex(params.row);\n                if (isDown) {\n                    rangeRows = afterFullData.slice(_rowIndex, _rowIndex + Math.ceil(moveSize / scrollYStore.rowHeight));\n                }\n                else {\n                    rangeRows = afterFullData.slice(_rowIndex - Math.floor(moveSize / scrollYStore.rowHeight) + 1, _rowIndex + 1);\n                }\n            }\n            else {\n                var siblingProp = isDown ? 'next' : 'previous';\n                while (targetTrElem && countHeight < moveSize) {\n                    var rowNodeRest = $xetable.getRowNode(targetTrElem);\n                    if (rowNodeRest) {\n                        rangeRows.push(rowNodeRest.item);\n                        countHeight += targetTrElem.offsetHeight;\n                        targetTrElem = targetTrElem[\"\".concat(siblingProp, \"ElementSibling\")];\n                    }\n                }\n            }\n            return rangeRows;\n        }\n        var handleCheckboxRangeEvent = function (evnt, params) {\n            var column = params.column, cell = params.cell;\n            if (column.type === 'checkbox') {\n                var el_1 = refElem.value;\n                var elemStore = internalData.elemStore;\n                var disX_1 = evnt.clientX;\n                var disY_1 = evnt.clientY;\n                var bodyWrapperRef = elemStore[\"\".concat(column.fixed || 'main', \"-body-wrapper\")] || elemStore['main-body-wrapper'];\n                var bodyWrapperElem_1 = bodyWrapperRef ? bodyWrapperRef.value : null;\n                if (!bodyWrapperElem_1) {\n                    return;\n                }\n                var checkboxRangeElem_1 = bodyWrapperElem_1.querySelector('.vxe-table--checkbox-range');\n                var domMousemove_1 = document.onmousemove;\n                var domMouseup_1 = document.onmouseup;\n                var trElem_1 = cell.parentNode;\n                var selectRecords_1 = $xetable.getCheckboxRecords();\n                var lastRangeRows_1 = [];\n                var marginSize_1 = 1;\n                var offsetRest = getTargetOffset(evnt.target, bodyWrapperElem_1);\n                var startTop_1 = offsetRest.offsetTop + evnt.offsetY;\n                var startLeft_1 = offsetRest.offsetLeft + evnt.offsetX;\n                var startScrollTop_1 = bodyWrapperElem_1.scrollTop;\n                var rowHeight_1 = trElem_1.offsetHeight;\n                var mouseScrollTimeout_1 = null;\n                var isMouseScrollDown_1 = false;\n                var mouseScrollSpaceSize_1 = 1;\n                var triggerEvent_1 = function (type, evnt) {\n                    $xetable.dispatchEvent(\"checkbox-range-\".concat(type), { records: $xetable.getCheckboxRecords(), reserves: $xetable.getCheckboxReserveRecords() }, evnt);\n                };\n                var handleChecked_1 = function (evnt) {\n                    var clientX = evnt.clientX, clientY = evnt.clientY;\n                    var offsetLeft = clientX - disX_1;\n                    var offsetTop = clientY - disY_1 + (bodyWrapperElem_1.scrollTop - startScrollTop_1);\n                    var rangeHeight = Math.abs(offsetTop);\n                    var rangeWidth = Math.abs(offsetLeft);\n                    var rangeTop = startTop_1;\n                    var rangeLeft = startLeft_1;\n                    if (offsetTop < marginSize_1) {\n                        // 向上\n                        rangeTop += offsetTop;\n                        if (rangeTop < marginSize_1) {\n                            rangeTop = marginSize_1;\n                            rangeHeight = startTop_1;\n                        }\n                    }\n                    else {\n                        // 向下\n                        rangeHeight = Math.min(rangeHeight, bodyWrapperElem_1.scrollHeight - startTop_1 - marginSize_1);\n                    }\n                    if (offsetLeft < marginSize_1) {\n                        // 向左\n                        rangeLeft += offsetLeft;\n                        if (rangeWidth > startLeft_1) {\n                            rangeLeft = marginSize_1;\n                            rangeWidth = startLeft_1;\n                        }\n                    }\n                    else {\n                        // 向右\n                        rangeWidth = Math.min(rangeWidth, bodyWrapperElem_1.clientWidth - startLeft_1 - marginSize_1);\n                    }\n                    checkboxRangeElem_1.style.height = \"\".concat(rangeHeight, \"px\");\n                    checkboxRangeElem_1.style.width = \"\".concat(rangeWidth, \"px\");\n                    checkboxRangeElem_1.style.left = \"\".concat(rangeLeft, \"px\");\n                    checkboxRangeElem_1.style.top = \"\".concat(rangeTop, \"px\");\n                    checkboxRangeElem_1.style.display = 'block';\n                    var rangeRows = getCheckboxRangeRows(params, trElem_1, offsetTop < marginSize_1 ? -rangeHeight : rangeHeight);\n                    // 至少滑动 10px 才能有效匹配\n                    if (rangeHeight > 10 && rangeRows.length !== lastRangeRows_1.length) {\n                        lastRangeRows_1 = rangeRows;\n                        if (evnt.ctrlKey) {\n                            rangeRows.forEach(function (row) {\n                                $xetable.handleSelectRow({ row: row }, selectRecords_1.indexOf(row) === -1);\n                            });\n                        }\n                        else {\n                            $xetable.setAllCheckboxRow(false);\n                            $xetable.handleCheckedCheckboxRow(rangeRows, true, false);\n                        }\n                        triggerEvent_1('change', evnt);\n                    }\n                };\n                // 停止鼠标滚动\n                var stopMouseScroll_1 = function () {\n                    clearTimeout(mouseScrollTimeout_1);\n                    mouseScrollTimeout_1 = null;\n                };\n                // 开始鼠标滚动\n                var startMouseScroll_1 = function (evnt) {\n                    stopMouseScroll_1();\n                    mouseScrollTimeout_1 = setTimeout(function () {\n                        if (mouseScrollTimeout_1) {\n                            var scrollLeft = bodyWrapperElem_1.scrollLeft, scrollTop = bodyWrapperElem_1.scrollTop, clientHeight = bodyWrapperElem_1.clientHeight, scrollHeight = bodyWrapperElem_1.scrollHeight;\n                            var topSize = Math.ceil(mouseScrollSpaceSize_1 * 50 / rowHeight_1);\n                            if (isMouseScrollDown_1) {\n                                if (scrollTop + clientHeight < scrollHeight) {\n                                    $xetable.scrollTo(scrollLeft, scrollTop + topSize);\n                                    startMouseScroll_1(evnt);\n                                    handleChecked_1(evnt);\n                                }\n                                else {\n                                    stopMouseScroll_1();\n                                }\n                            }\n                            else {\n                                if (scrollTop) {\n                                    $xetable.scrollTo(scrollLeft, scrollTop - topSize);\n                                    startMouseScroll_1(evnt);\n                                    handleChecked_1(evnt);\n                                }\n                                else {\n                                    stopMouseScroll_1();\n                                }\n                            }\n                        }\n                    }, 50);\n                };\n                addClass(el_1, 'drag--range');\n                document.onmousemove = function (evnt) {\n                    evnt.preventDefault();\n                    evnt.stopPropagation();\n                    var clientY = evnt.clientY;\n                    var boundingTop = getAbsolutePos(bodyWrapperElem_1).boundingTop;\n                    // 如果超过可视区，触发滚动\n                    if (clientY < boundingTop) {\n                        isMouseScrollDown_1 = false;\n                        mouseScrollSpaceSize_1 = boundingTop - clientY;\n                        if (!mouseScrollTimeout_1) {\n                            startMouseScroll_1(evnt);\n                        }\n                    }\n                    else if (clientY > boundingTop + bodyWrapperElem_1.clientHeight) {\n                        isMouseScrollDown_1 = true;\n                        mouseScrollSpaceSize_1 = clientY - boundingTop - bodyWrapperElem_1.clientHeight;\n                        if (!mouseScrollTimeout_1) {\n                            startMouseScroll_1(evnt);\n                        }\n                    }\n                    else if (mouseScrollTimeout_1) {\n                        stopMouseScroll_1();\n                    }\n                    handleChecked_1(evnt);\n                };\n                document.onmouseup = function (evnt) {\n                    stopMouseScroll_1();\n                    removeClass(el_1, 'drag--range');\n                    checkboxRangeElem_1.removeAttribute('style');\n                    document.onmousemove = domMousemove_1;\n                    document.onmouseup = domMouseup_1;\n                    triggerEvent_1('end', evnt);\n                };\n                triggerEvent_1('start', evnt);\n            }\n        };\n        var handleCellMousedownEvent = function (evnt, params) {\n            var editConfig = props.editConfig, checkboxConfig = props.checkboxConfig, mouseConfig = props.mouseConfig;\n            var checkboxOpts = computeCheckboxOpts.value;\n            var mouseOpts = computeMouseOpts.value;\n            var editOpts = computeEditOpts.value;\n            if (mouseConfig && mouseOpts.area && $xetable.handleCellAreaEvent) {\n                return $xetable.handleCellAreaEvent(evnt, params);\n            }\n            else {\n                if (checkboxConfig && checkboxOpts.range) {\n                    handleCheckboxRangeEvent(evnt, params);\n                }\n                if (mouseConfig && mouseOpts.selected) {\n                    if (!editConfig || editOpts.mode === 'cell') {\n                        $xetable.handleSelected(params, evnt);\n                    }\n                }\n            }\n        };\n        var keyboardMethods = {\n            // 处理 Tab 键移动\n            moveTabSelected: function (args, isLeft, evnt) {\n                var editConfig = props.editConfig;\n                var afterFullData = internalData.afterFullData, visibleColumn = internalData.visibleColumn;\n                var editOpts = computeEditOpts.value;\n                var targetRow;\n                var targetRowIndex;\n                var targetColumnIndex;\n                var params = Object.assign({}, args);\n                var _rowIndex = $xetable.getVTRowIndex(params.row);\n                var _columnIndex = $xetable.getVTColumnIndex(params.column);\n                evnt.preventDefault();\n                if (isLeft) {\n                    // 向左\n                    if (_columnIndex <= 0) {\n                        // 如果已经是第一列，则移动到上一行\n                        if (_rowIndex > 0) {\n                            targetRowIndex = _rowIndex - 1;\n                            targetRow = afterFullData[targetRowIndex];\n                            targetColumnIndex = visibleColumn.length - 1;\n                        }\n                    }\n                    else {\n                        targetColumnIndex = _columnIndex - 1;\n                    }\n                }\n                else {\n                    if (_columnIndex >= visibleColumn.length - 1) {\n                        // 如果已经是第一列，则移动到上一行\n                        if (_rowIndex < afterFullData.length - 1) {\n                            targetRowIndex = _rowIndex + 1;\n                            targetRow = afterFullData[targetRowIndex];\n                            targetColumnIndex = 0;\n                        }\n                    }\n                    else {\n                        targetColumnIndex = _columnIndex + 1;\n                    }\n                }\n                var targetColumn = visibleColumn[targetColumnIndex];\n                if (targetColumn) {\n                    if (targetRow) {\n                        params.rowIndex = targetRowIndex;\n                        params.row = targetRow;\n                    }\n                    else {\n                        params.rowIndex = _rowIndex;\n                    }\n                    params.columnIndex = targetColumnIndex;\n                    params.column = targetColumn;\n                    params.cell = $xetable.getCell(params.row, params.column);\n                    if (editConfig) {\n                        if (editOpts.trigger === 'click' || editOpts.trigger === 'dblclick') {\n                            if (editOpts.mode === 'row') {\n                                $xetable.handleActived(params, evnt);\n                            }\n                            else {\n                                $xetable.scrollToRow(params.row, params.column)\n                                    .then(function () { return $xetable.handleSelected(params, evnt); });\n                            }\n                        }\n                    }\n                    else {\n                        $xetable.scrollToRow(params.row, params.column)\n                            .then(function () { return $xetable.handleSelected(params, evnt); });\n                    }\n                }\n            },\n            // 处理当前行方向键移动\n            moveCurrentRow: function (isUpArrow, isDwArrow, evnt) {\n                var treeConfig = props.treeConfig;\n                var currentRow = reactData.currentRow;\n                var afterFullData = internalData.afterFullData;\n                var treeOpts = computeTreeOpts.value;\n                var childrenField = treeOpts.children || treeOpts.childrenField;\n                var targetRow;\n                evnt.preventDefault();\n                if (currentRow) {\n                    if (treeConfig) {\n                        var _a = XEUtils.findTree(afterFullData, function (item) { return item === currentRow; }, { children: childrenField }), index = _a.index, items = _a.items;\n                        if (isUpArrow && index > 0) {\n                            targetRow = items[index - 1];\n                        }\n                        else if (isDwArrow && index < items.length - 1) {\n                            targetRow = items[index + 1];\n                        }\n                    }\n                    else {\n                        var _rowIndex = $xetable.getVTRowIndex(currentRow);\n                        if (isUpArrow && _rowIndex > 0) {\n                            targetRow = afterFullData[_rowIndex - 1];\n                        }\n                        else if (isDwArrow && _rowIndex < afterFullData.length - 1) {\n                            targetRow = afterFullData[_rowIndex + 1];\n                        }\n                    }\n                }\n                else {\n                    targetRow = afterFullData[0];\n                }\n                if (targetRow) {\n                    var params_1 = {\n                        $table: $xetable,\n                        row: targetRow,\n                        rowIndex: $xetable.getRowIndex(targetRow),\n                        $rowIndex: $xetable.getVMRowIndex(targetRow)\n                    };\n                    $xetable.scrollToRow(targetRow)\n                        .then(function () { return $xetable.triggerCurrentRowEvent(evnt, params_1); });\n                }\n            },\n            // 处理可编辑方向键移动\n            moveSelected: function (args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt) {\n                var afterFullData = internalData.afterFullData, visibleColumn = internalData.visibleColumn;\n                var params = Object.assign({}, args);\n                var _rowIndex = $xetable.getVTRowIndex(params.row);\n                var _columnIndex = $xetable.getVTColumnIndex(params.column);\n                evnt.preventDefault();\n                if (isUpArrow && _rowIndex > 0) {\n                    // 移动到上一行\n                    params.rowIndex = _rowIndex - 1;\n                    params.row = afterFullData[params.rowIndex];\n                }\n                else if (isDwArrow && _rowIndex < afterFullData.length - 1) {\n                    // 移动到下一行\n                    params.rowIndex = _rowIndex + 1;\n                    params.row = afterFullData[params.rowIndex];\n                }\n                else if (isLeftArrow && _columnIndex) {\n                    // 移动到左侧单元格\n                    params.columnIndex = _columnIndex - 1;\n                    params.column = visibleColumn[params.columnIndex];\n                }\n                else if (isRightArrow && _columnIndex < visibleColumn.length - 1) {\n                    // 移动到右侧单元格\n                    params.columnIndex = _columnIndex + 1;\n                    params.column = visibleColumn[params.columnIndex];\n                }\n                $xetable.scrollToRow(params.row, params.column).then(function () {\n                    params.cell = $xetable.getCell(params.row, params.column);\n                    $xetable.handleSelected(params, evnt);\n                });\n            },\n            /**\n             * 表头单元格按下事件\n             */\n            triggerHeaderCellMousedownEvent: function (evnt, params) {\n                var mouseConfig = props.mouseConfig;\n                var mouseOpts = computeMouseOpts.value;\n                if (mouseConfig && mouseOpts.area && $xetable.handleHeaderCellAreaEvent) {\n                    var cell = evnt.currentTarget;\n                    var triggerSort = getEventTargetNode(evnt, cell, 'vxe-cell--sort').flag;\n                    var triggerFilter = getEventTargetNode(evnt, cell, 'vxe-cell--filter').flag;\n                    $xetable.handleHeaderCellAreaEvent(evnt, Object.assign({ cell: cell, triggerSort: triggerSort, triggerFilter: triggerFilter }, params));\n                }\n                $xetable.focus();\n                if ($xetable.closeMenu) {\n                    $xetable.closeMenu();\n                }\n            },\n            /**\n             * 单元格按下事件\n             */\n            triggerCellMousedownEvent: function (evnt, params) {\n                var cell = evnt.currentTarget;\n                params.cell = cell;\n                handleCellMousedownEvent(evnt, params);\n                $xetable.focus();\n                $xetable.closeFilter();\n                if ($xetable.closeMenu) {\n                    $xetable.closeMenu();\n                }\n            }\n        };\n        return keyboardMethods;\n    }\n};\nexport default tableKeyboardHook;\n",
      "start": 1714699767753,
      "end": 1714699767753,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767753,
      "end": 1714699767753,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767753,
      "end": 1714699767753,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767753,
      "end": 1714699767753,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767753,
      "end": 1714699767753,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767753,
      "end": 1714699767753,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767753,
      "end": 1714699767753,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767753,
      "end": 1714699767754,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767754,
      "end": 1714699767754,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767754,
      "end": 1714699767754,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767754,
      "end": 1714699767754,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767754,
      "end": 1714699767754,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767754,
      "end": 1714699767754,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767754,
      "end": 1714699767754,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767754,
      "end": 1714699767754,
      "order": "normal"
    }
  ]
}

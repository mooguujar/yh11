{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/header/src/header.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { createCommentVNode, defineComponent, h, ref, inject, nextTick, watch, onMounted, onUnmounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { convertToRows } from './util';\nimport { getColReMinWidth } from '../../table/src/util';\nimport { hasClass, getOffsetPos, addClass, removeClass } from '../../tools/dom';\nvar renderType = 'header';\nexport default defineComponent({\n    name: 'VxeTableHeader',\n    props: {\n        tableData: Array,\n        tableColumn: Array,\n        tableGroupColumn: Array,\n        fixedColumn: Array,\n        fixedType: { type: String, default: null }\n    },\n    setup: function (props) {\n        var $xetable = inject('$xetable', {});\n        var xID = $xetable.xID, tableProps = $xetable.props, tableReactData = $xetable.reactData, tableInternalData = $xetable.internalData;\n        var _a = $xetable.getRefMaps(), tableRefElem = _a.refElem, refTableBody = _a.refTableBody, refLeftContainer = _a.refLeftContainer, refRightContainer = _a.refRightContainer, refCellResizeBar = _a.refCellResizeBar;\n        var computeColumnOpts = $xetable.getComputeMaps().computeColumnOpts;\n        var headerColumn = ref([]);\n        var refElem = ref();\n        var refHeaderTable = ref();\n        var refHeaderColgroup = ref();\n        var refHeaderTHead = ref();\n        var refHeaderXSpace = ref();\n        var refHeaderBorderRepair = ref();\n        var uploadColumn = function () {\n            var isGroup = tableReactData.isGroup;\n            headerColumn.value = isGroup ? convertToRows(props.tableGroupColumn) : [];\n        };\n        var resizeMousedown = function (evnt, params) {\n            var column = params.column;\n            var fixedType = props.fixedType;\n            var tableBody = refTableBody.value;\n            var leftContainerElem = refLeftContainer.value;\n            var rightContainerElem = refRightContainer.value;\n            var resizeBarElem = refCellResizeBar.value;\n            var dragClientX = evnt.clientX;\n            var wrapperElem = refElem.value;\n            var dragBtnElem = evnt.target;\n            var cell = params.cell = dragBtnElem.parentNode;\n            var dragLeft = 0;\n            var tableBodyElem = tableBody.$el;\n            var pos = getOffsetPos(dragBtnElem, wrapperElem);\n            var dragBtnWidth = dragBtnElem.clientWidth;\n            var dragBtnOffsetWidth = Math.floor(dragBtnWidth / 2);\n            var minInterval = getColReMinWidth(params) - dragBtnOffsetWidth; // 列之间的最小间距\n            var dragMinLeft = pos.left - cell.clientWidth + dragBtnWidth + minInterval;\n            var dragPosLeft = pos.left + dragBtnOffsetWidth;\n            var domMousemove = document.onmousemove;\n            var domMouseup = document.onmouseup;\n            var isLeftFixed = fixedType === 'left';\n            var isRightFixed = fixedType === 'right';\n            var tableEl = tableRefElem.value;\n            // 计算左右侧固定列偏移量\n            var fixedOffsetWidth = 0;\n            if (isLeftFixed || isRightFixed) {\n                var siblingProp = isLeftFixed ? 'nextElementSibling' : 'previousElementSibling';\n                var tempCellElem = cell[siblingProp];\n                while (tempCellElem) {\n                    if (hasClass(tempCellElem, 'fixed--hidden')) {\n                        break;\n                    }\n                    else if (!hasClass(tempCellElem, 'col--group')) {\n                        fixedOffsetWidth += tempCellElem.offsetWidth;\n                    }\n                    tempCellElem = tempCellElem[siblingProp];\n                }\n                if (isRightFixed && rightContainerElem) {\n                    dragPosLeft = rightContainerElem.offsetLeft + fixedOffsetWidth;\n                }\n            }\n            // 处理拖动事件\n            var updateEvent = function (evnt) {\n                evnt.stopPropagation();\n                evnt.preventDefault();\n                var offsetX = evnt.clientX - dragClientX;\n                var left = dragPosLeft + offsetX;\n                var scrollLeft = fixedType ? 0 : tableBodyElem.scrollLeft;\n                if (isLeftFixed) {\n                    // 左固定列（不允许超过右侧固定列、不允许超过右边距）\n                    left = Math.min(left, (rightContainerElem ? rightContainerElem.offsetLeft : tableBodyElem.clientWidth) - fixedOffsetWidth - minInterval);\n                }\n                else if (isRightFixed) {\n                    // 右侧固定列（不允许超过左侧固定列、不允许超过左边距）\n                    dragMinLeft = (leftContainerElem ? leftContainerElem.clientWidth : 0) + fixedOffsetWidth + minInterval;\n                    left = Math.min(left, dragPosLeft + cell.clientWidth - minInterval);\n                }\n                else {\n                    dragMinLeft = Math.max(tableBodyElem.scrollLeft, dragMinLeft);\n                    // left = Math.min(left, tableBodyElem.clientWidth + tableBodyElem.scrollLeft - 40)\n                }\n                dragLeft = Math.max(left, dragMinLeft);\n                resizeBarElem.style.left = \"\".concat(dragLeft - scrollLeft, \"px\");\n            };\n            tableReactData._isResize = true;\n            addClass(tableEl, 'drag--resize');\n            resizeBarElem.style.display = 'block';\n            document.onmousemove = updateEvent;\n            document.onmouseup = function (evnt) {\n                document.onmousemove = domMousemove;\n                document.onmouseup = domMouseup;\n                var resizeWidth = column.renderWidth + (isRightFixed ? dragPosLeft - dragLeft : dragLeft - dragPosLeft);\n                column.resizeWidth = resizeWidth;\n                resizeBarElem.style.display = 'none';\n                tableReactData._isResize = false;\n                tableInternalData._lastResizeTime = Date.now();\n                $xetable.analyColumnWidth();\n                $xetable.recalculate(true).then(function () {\n                    $xetable.saveCustomResizable();\n                    $xetable.updateCellAreas();\n                    $xetable.dispatchEvent('resizable-change', __assign(__assign({}, params), { resizeWidth: resizeWidth }), evnt);\n                });\n                removeClass(tableEl, 'drag--resize');\n            };\n            updateEvent(evnt);\n            if ($xetable.closeMenu) {\n                $xetable.closeMenu();\n            }\n        };\n        watch(function () { return props.tableColumn; }, uploadColumn);\n        onMounted(function () {\n            nextTick(function () {\n                var fixedType = props.fixedType;\n                var internalData = $xetable.internalData;\n                var elemStore = internalData.elemStore;\n                var prefix = \"\".concat(fixedType || 'main', \"-header-\");\n                elemStore[\"\".concat(prefix, \"wrapper\")] = refElem;\n                elemStore[\"\".concat(prefix, \"table\")] = refHeaderTable;\n                elemStore[\"\".concat(prefix, \"colgroup\")] = refHeaderColgroup;\n                elemStore[\"\".concat(prefix, \"list\")] = refHeaderTHead;\n                elemStore[\"\".concat(prefix, \"xSpace\")] = refHeaderXSpace;\n                elemStore[\"\".concat(prefix, \"repair\")] = refHeaderBorderRepair;\n                uploadColumn();\n            });\n        });\n        onUnmounted(function () {\n            var fixedType = props.fixedType;\n            var internalData = $xetable.internalData;\n            var elemStore = internalData.elemStore;\n            var prefix = \"\".concat(fixedType || 'main', \"-header-\");\n            elemStore[\"\".concat(prefix, \"wrapper\")] = null;\n            elemStore[\"\".concat(prefix, \"table\")] = null;\n            elemStore[\"\".concat(prefix, \"colgroup\")] = null;\n            elemStore[\"\".concat(prefix, \"list\")] = null;\n            elemStore[\"\".concat(prefix, \"xSpace\")] = null;\n            elemStore[\"\".concat(prefix, \"repair\")] = null;\n        });\n        var renderVN = function () {\n            var fixedType = props.fixedType, fixedColumn = props.fixedColumn, tableColumn = props.tableColumn;\n            var resizable = tableProps.resizable, border = tableProps.border, columnKey = tableProps.columnKey, headerRowClassName = tableProps.headerRowClassName, headerCellClassName = tableProps.headerCellClassName, headerRowStyle = tableProps.headerRowStyle, headerCellStyle = tableProps.headerCellStyle, allColumnHeaderOverflow = tableProps.showHeaderOverflow, allHeaderAlign = tableProps.headerAlign, allAlign = tableProps.align, mouseConfig = tableProps.mouseConfig;\n            var isGroup = tableReactData.isGroup, currentColumn = tableReactData.currentColumn, scrollXLoad = tableReactData.scrollXLoad, overflowX = tableReactData.overflowX, scrollbarWidth = tableReactData.scrollbarWidth;\n            var visibleColumn = tableInternalData.visibleColumn;\n            var columnOpts = computeColumnOpts.value;\n            var headerGroups = headerColumn.value;\n            var renderColumnList = tableColumn;\n            if (isGroup) {\n                renderColumnList = visibleColumn;\n            }\n            else {\n                // 如果是使用优化模式\n                if (fixedType) {\n                    if (scrollXLoad || allColumnHeaderOverflow) {\n                        renderColumnList = fixedColumn;\n                    }\n                }\n                headerGroups = [renderColumnList];\n            }\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-table--header-wrapper', fixedType ? \"fixed-\".concat(fixedType, \"--wrapper\") : 'body--wrapper'],\n                xid: xID\n            }, [\n                fixedType ? createCommentVNode() : h('div', {\n                    ref: refHeaderXSpace,\n                    class: 'vxe-body--x-space'\n                }),\n                h('table', {\n                    ref: refHeaderTable,\n                    class: 'vxe-table--header',\n                    xid: xID,\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    /**\n                     * 列宽\n                     */\n                    h('colgroup', {\n                        ref: refHeaderColgroup\n                    }, renderColumnList.map(function (column, $columnIndex) {\n                        return h('col', {\n                            name: column.id,\n                            key: $columnIndex\n                        });\n                    }).concat(scrollbarWidth ? [\n                        h('col', {\n                            name: 'col_gutter'\n                        })\n                    ] : [])),\n                    /**\n                     * 头部\n                     */\n                    h('thead', {\n                        ref: refHeaderTHead\n                    }, headerGroups.map(function (cols, $rowIndex) {\n                        return h('tr', {\n                            class: ['vxe-header--row', headerRowClassName ? (XEUtils.isFunction(headerRowClassName) ? headerRowClassName({ $table: $xetable, $rowIndex: $rowIndex, fixed: fixedType, type: renderType }) : headerRowClassName) : ''],\n                            style: headerRowStyle ? (XEUtils.isFunction(headerRowStyle) ? headerRowStyle({ $table: $xetable, $rowIndex: $rowIndex, fixed: fixedType, type: renderType }) : headerRowStyle) : null\n                        }, cols.map(function (column, $columnIndex) {\n                            var _a;\n                            var type = column.type, showHeaderOverflow = column.showHeaderOverflow, headerAlign = column.headerAlign, align = column.align, headerClassName = column.headerClassName;\n                            var isColGroup = column.children && column.children.length;\n                            var fixedHiddenColumn = fixedType ? (column.fixed !== fixedType && !isColGroup) : !!column.fixed && overflowX;\n                            var headOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;\n                            var headAlign = headerAlign || align || allHeaderAlign || allAlign;\n                            var showEllipsis = headOverflow === 'ellipsis';\n                            var showTitle = headOverflow === 'title';\n                            var showTooltip = headOverflow === true || headOverflow === 'tooltip';\n                            var hasEllipsis = showTitle || showTooltip || showEllipsis;\n                            var hasFilter = column.filters && column.filters.some(function (item) { return item.checked; });\n                            var columnIndex = $xetable.getColumnIndex(column);\n                            var _columnIndex = $xetable.getVTColumnIndex(column);\n                            var params = { $table: $xetable, $grid: $xetable.xegrid, $rowIndex: $rowIndex, column: column, columnIndex: columnIndex, $columnIndex: $columnIndex, _columnIndex: _columnIndex, fixed: fixedType, type: renderType, isHidden: fixedHiddenColumn, hasFilter: hasFilter };\n                            var thOns = {\n                                onClick: function (evnt) { return $xetable.triggerHeaderCellClickEvent(evnt, params); },\n                                onDblclick: function (evnt) { return $xetable.triggerHeaderCellDblclickEvent(evnt, params); }\n                            };\n                            // 横向虚拟滚动不支持动态行高\n                            if (scrollXLoad && !hasEllipsis) {\n                                showEllipsis = hasEllipsis = true;\n                            }\n                            // 按下事件处理\n                            if (mouseConfig) {\n                                thOns.onMousedown = function (evnt) { return $xetable.triggerHeaderCellMousedownEvent(evnt, params); };\n                            }\n                            return h('th', __assign(__assign({ class: ['vxe-header--column', column.id, (_a = {},\n                                        _a[\"col--\".concat(headAlign)] = headAlign,\n                                        _a[\"col--\".concat(type)] = type,\n                                        _a['col--last'] = $columnIndex === cols.length - 1,\n                                        _a['col--fixed'] = column.fixed,\n                                        _a['col--group'] = isColGroup,\n                                        _a['col--ellipsis'] = hasEllipsis,\n                                        _a['fixed--hidden'] = fixedHiddenColumn,\n                                        _a['is--sortable'] = column.sortable,\n                                        _a['col--filter'] = !!column.filters,\n                                        _a['is--filter-active'] = hasFilter,\n                                        _a['col--current'] = currentColumn === column,\n                                        _a), headerClassName ? (XEUtils.isFunction(headerClassName) ? headerClassName(params) : headerClassName) : '',\n                                    headerCellClassName ? (XEUtils.isFunction(headerCellClassName) ? headerCellClassName(params) : headerCellClassName) : ''], colid: column.id, colspan: column.colSpan > 1 ? column.colSpan : null, rowspan: column.rowSpan > 1 ? column.rowSpan : null, style: headerCellStyle ? (XEUtils.isFunction(headerCellStyle) ? headerCellStyle(params) : headerCellStyle) : null }, thOns), { key: columnKey || columnOpts.useKey || isColGroup ? column.id : $columnIndex }), [\n                                h('div', {\n                                    class: ['vxe-cell', {\n                                            'c--title': showTitle,\n                                            'c--tooltip': showTooltip,\n                                            'c--ellipsis': showEllipsis\n                                        }]\n                                }, column.renderHeader(params)),\n                                /**\n                                 * 列宽拖动\n                                 */\n                                !fixedHiddenColumn && !isColGroup && (XEUtils.isBoolean(column.resizable) ? column.resizable : (columnOpts.resizable || resizable)) ? h('div', {\n                                    class: ['vxe-resizable', {\n                                            'is--line': !border || border === 'none'\n                                        }],\n                                    onMousedown: function (evnt) { return resizeMousedown(evnt, params); }\n                                }) : null\n                            ]);\n                        }).concat(scrollbarWidth ? [\n                            h('th', {\n                                class: 'vxe-header--gutter col--gutter'\n                            })\n                        ] : []));\n                    }))\n                ]),\n                /**\n                 * 其他\n                 */\n                h('div', {\n                    ref: refHeaderBorderRepair,\n                    class: 'vxe-table--header-border-line'\n                })\n            ]);\n        };\n        return renderVN;\n    }\n});\n",
      "start": 1714699767778,
      "end": 1714699767846,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767846,
      "end": 1714699767846,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767846,
      "end": 1714699767846,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767846,
      "end": 1714699767846,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767846,
      "end": 1714699767846,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767846,
      "end": 1714699767846,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767846,
      "end": 1714699767846,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { createCommentVNode, defineComponent, h, ref, inject, nextTick, watch, onMounted, onUnmounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { convertToRows } from './util';\nimport { getColReMinWidth } from '../../table/src/util';\nimport { hasClass, getOffsetPos, addClass, removeClass } from '../../tools/dom';\nvar renderType = 'header';\nexport default defineComponent({\n    name: 'VxeTableHeader',\n    props: {\n        tableData: Array,\n        tableColumn: Array,\n        tableGroupColumn: Array,\n        fixedColumn: Array,\n        fixedType: { type: String, default: null }\n    },\n    setup: function (props) {\n        var $xetable = inject('$xetable', {});\n        var xID = $xetable.xID, tableProps = $xetable.props, tableReactData = $xetable.reactData, tableInternalData = $xetable.internalData;\n        var _a = $xetable.getRefMaps(), tableRefElem = _a.refElem, refTableBody = _a.refTableBody, refLeftContainer = _a.refLeftContainer, refRightContainer = _a.refRightContainer, refCellResizeBar = _a.refCellResizeBar;\n        var computeColumnOpts = $xetable.getComputeMaps().computeColumnOpts;\n        var headerColumn = ref([]);\n        var refElem = ref();\n        var refHeaderTable = ref();\n        var refHeaderColgroup = ref();\n        var refHeaderTHead = ref();\n        var refHeaderXSpace = ref();\n        var refHeaderBorderRepair = ref();\n        var uploadColumn = function () {\n            var isGroup = tableReactData.isGroup;\n            headerColumn.value = isGroup ? convertToRows(props.tableGroupColumn) : [];\n        };\n        var resizeMousedown = function (evnt, params) {\n            var column = params.column;\n            var fixedType = props.fixedType;\n            var tableBody = refTableBody.value;\n            var leftContainerElem = refLeftContainer.value;\n            var rightContainerElem = refRightContainer.value;\n            var resizeBarElem = refCellResizeBar.value;\n            var dragClientX = evnt.clientX;\n            var wrapperElem = refElem.value;\n            var dragBtnElem = evnt.target;\n            var cell = params.cell = dragBtnElem.parentNode;\n            var dragLeft = 0;\n            var tableBodyElem = tableBody.$el;\n            var pos = getOffsetPos(dragBtnElem, wrapperElem);\n            var dragBtnWidth = dragBtnElem.clientWidth;\n            var dragBtnOffsetWidth = Math.floor(dragBtnWidth / 2);\n            var minInterval = getColReMinWidth(params) - dragBtnOffsetWidth; // 列之间的最小间距\n            var dragMinLeft = pos.left - cell.clientWidth + dragBtnWidth + minInterval;\n            var dragPosLeft = pos.left + dragBtnOffsetWidth;\n            var domMousemove = document.onmousemove;\n            var domMouseup = document.onmouseup;\n            var isLeftFixed = fixedType === 'left';\n            var isRightFixed = fixedType === 'right';\n            var tableEl = tableRefElem.value;\n            // 计算左右侧固定列偏移量\n            var fixedOffsetWidth = 0;\n            if (isLeftFixed || isRightFixed) {\n                var siblingProp = isLeftFixed ? 'nextElementSibling' : 'previousElementSibling';\n                var tempCellElem = cell[siblingProp];\n                while (tempCellElem) {\n                    if (hasClass(tempCellElem, 'fixed--hidden')) {\n                        break;\n                    }\n                    else if (!hasClass(tempCellElem, 'col--group')) {\n                        fixedOffsetWidth += tempCellElem.offsetWidth;\n                    }\n                    tempCellElem = tempCellElem[siblingProp];\n                }\n                if (isRightFixed && rightContainerElem) {\n                    dragPosLeft = rightContainerElem.offsetLeft + fixedOffsetWidth;\n                }\n            }\n            // 处理拖动事件\n            var updateEvent = function (evnt) {\n                evnt.stopPropagation();\n                evnt.preventDefault();\n                var offsetX = evnt.clientX - dragClientX;\n                var left = dragPosLeft + offsetX;\n                var scrollLeft = fixedType ? 0 : tableBodyElem.scrollLeft;\n                if (isLeftFixed) {\n                    // 左固定列（不允许超过右侧固定列、不允许超过右边距）\n                    left = Math.min(left, (rightContainerElem ? rightContainerElem.offsetLeft : tableBodyElem.clientWidth) - fixedOffsetWidth - minInterval);\n                }\n                else if (isRightFixed) {\n                    // 右侧固定列（不允许超过左侧固定列、不允许超过左边距）\n                    dragMinLeft = (leftContainerElem ? leftContainerElem.clientWidth : 0) + fixedOffsetWidth + minInterval;\n                    left = Math.min(left, dragPosLeft + cell.clientWidth - minInterval);\n                }\n                else {\n                    dragMinLeft = Math.max(tableBodyElem.scrollLeft, dragMinLeft);\n                    // left = Math.min(left, tableBodyElem.clientWidth + tableBodyElem.scrollLeft - 40)\n                }\n                dragLeft = Math.max(left, dragMinLeft);\n                resizeBarElem.style.left = \"\".concat(dragLeft - scrollLeft, \"px\");\n            };\n            tableReactData._isResize = true;\n            addClass(tableEl, 'drag--resize');\n            resizeBarElem.style.display = 'block';\n            document.onmousemove = updateEvent;\n            document.onmouseup = function (evnt) {\n                document.onmousemove = domMousemove;\n                document.onmouseup = domMouseup;\n                var resizeWidth = column.renderWidth + (isRightFixed ? dragPosLeft - dragLeft : dragLeft - dragPosLeft);\n                column.resizeWidth = resizeWidth;\n                resizeBarElem.style.display = 'none';\n                tableReactData._isResize = false;\n                tableInternalData._lastResizeTime = Date.now();\n                $xetable.analyColumnWidth();\n                $xetable.recalculate(true).then(function () {\n                    $xetable.saveCustomResizable();\n                    $xetable.updateCellAreas();\n                    $xetable.dispatchEvent('resizable-change', __assign(__assign({}, params), { resizeWidth: resizeWidth }), evnt);\n                });\n                removeClass(tableEl, 'drag--resize');\n            };\n            updateEvent(evnt);\n            if ($xetable.closeMenu) {\n                $xetable.closeMenu();\n            }\n        };\n        watch(function () { return props.tableColumn; }, uploadColumn);\n        onMounted(function () {\n            nextTick(function () {\n                var fixedType = props.fixedType;\n                var internalData = $xetable.internalData;\n                var elemStore = internalData.elemStore;\n                var prefix = \"\".concat(fixedType || 'main', \"-header-\");\n                elemStore[\"\".concat(prefix, \"wrapper\")] = refElem;\n                elemStore[\"\".concat(prefix, \"table\")] = refHeaderTable;\n                elemStore[\"\".concat(prefix, \"colgroup\")] = refHeaderColgroup;\n                elemStore[\"\".concat(prefix, \"list\")] = refHeaderTHead;\n                elemStore[\"\".concat(prefix, \"xSpace\")] = refHeaderXSpace;\n                elemStore[\"\".concat(prefix, \"repair\")] = refHeaderBorderRepair;\n                uploadColumn();\n            });\n        });\n        onUnmounted(function () {\n            var fixedType = props.fixedType;\n            var internalData = $xetable.internalData;\n            var elemStore = internalData.elemStore;\n            var prefix = \"\".concat(fixedType || 'main', \"-header-\");\n            elemStore[\"\".concat(prefix, \"wrapper\")] = null;\n            elemStore[\"\".concat(prefix, \"table\")] = null;\n            elemStore[\"\".concat(prefix, \"colgroup\")] = null;\n            elemStore[\"\".concat(prefix, \"list\")] = null;\n            elemStore[\"\".concat(prefix, \"xSpace\")] = null;\n            elemStore[\"\".concat(prefix, \"repair\")] = null;\n        });\n        var renderVN = function () {\n            var fixedType = props.fixedType, fixedColumn = props.fixedColumn, tableColumn = props.tableColumn;\n            var resizable = tableProps.resizable, border = tableProps.border, columnKey = tableProps.columnKey, headerRowClassName = tableProps.headerRowClassName, headerCellClassName = tableProps.headerCellClassName, headerRowStyle = tableProps.headerRowStyle, headerCellStyle = tableProps.headerCellStyle, allColumnHeaderOverflow = tableProps.showHeaderOverflow, allHeaderAlign = tableProps.headerAlign, allAlign = tableProps.align, mouseConfig = tableProps.mouseConfig;\n            var isGroup = tableReactData.isGroup, currentColumn = tableReactData.currentColumn, scrollXLoad = tableReactData.scrollXLoad, overflowX = tableReactData.overflowX, scrollbarWidth = tableReactData.scrollbarWidth;\n            var visibleColumn = tableInternalData.visibleColumn;\n            var columnOpts = computeColumnOpts.value;\n            var headerGroups = headerColumn.value;\n            var renderColumnList = tableColumn;\n            if (isGroup) {\n                renderColumnList = visibleColumn;\n            }\n            else {\n                // 如果是使用优化模式\n                if (fixedType) {\n                    if (scrollXLoad || allColumnHeaderOverflow) {\n                        renderColumnList = fixedColumn;\n                    }\n                }\n                headerGroups = [renderColumnList];\n            }\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-table--header-wrapper', fixedType ? \"fixed-\".concat(fixedType, \"--wrapper\") : 'body--wrapper'],\n                xid: xID\n            }, [\n                fixedType ? createCommentVNode() : h('div', {\n                    ref: refHeaderXSpace,\n                    class: 'vxe-body--x-space'\n                }),\n                h('table', {\n                    ref: refHeaderTable,\n                    class: 'vxe-table--header',\n                    xid: xID,\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    /**\n                     * 列宽\n                     */\n                    h('colgroup', {\n                        ref: refHeaderColgroup\n                    }, renderColumnList.map(function (column, $columnIndex) {\n                        return h('col', {\n                            name: column.id,\n                            key: $columnIndex\n                        });\n                    }).concat(scrollbarWidth ? [\n                        h('col', {\n                            name: 'col_gutter'\n                        })\n                    ] : [])),\n                    /**\n                     * 头部\n                     */\n                    h('thead', {\n                        ref: refHeaderTHead\n                    }, headerGroups.map(function (cols, $rowIndex) {\n                        return h('tr', {\n                            class: ['vxe-header--row', headerRowClassName ? (XEUtils.isFunction(headerRowClassName) ? headerRowClassName({ $table: $xetable, $rowIndex: $rowIndex, fixed: fixedType, type: renderType }) : headerRowClassName) : ''],\n                            style: headerRowStyle ? (XEUtils.isFunction(headerRowStyle) ? headerRowStyle({ $table: $xetable, $rowIndex: $rowIndex, fixed: fixedType, type: renderType }) : headerRowStyle) : null\n                        }, cols.map(function (column, $columnIndex) {\n                            var _a;\n                            var type = column.type, showHeaderOverflow = column.showHeaderOverflow, headerAlign = column.headerAlign, align = column.align, headerClassName = column.headerClassName;\n                            var isColGroup = column.children && column.children.length;\n                            var fixedHiddenColumn = fixedType ? (column.fixed !== fixedType && !isColGroup) : !!column.fixed && overflowX;\n                            var headOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;\n                            var headAlign = headerAlign || align || allHeaderAlign || allAlign;\n                            var showEllipsis = headOverflow === 'ellipsis';\n                            var showTitle = headOverflow === 'title';\n                            var showTooltip = headOverflow === true || headOverflow === 'tooltip';\n                            var hasEllipsis = showTitle || showTooltip || showEllipsis;\n                            var hasFilter = column.filters && column.filters.some(function (item) { return item.checked; });\n                            var columnIndex = $xetable.getColumnIndex(column);\n                            var _columnIndex = $xetable.getVTColumnIndex(column);\n                            var params = { $table: $xetable, $grid: $xetable.xegrid, $rowIndex: $rowIndex, column: column, columnIndex: columnIndex, $columnIndex: $columnIndex, _columnIndex: _columnIndex, fixed: fixedType, type: renderType, isHidden: fixedHiddenColumn, hasFilter: hasFilter };\n                            var thOns = {\n                                onClick: function (evnt) { return $xetable.triggerHeaderCellClickEvent(evnt, params); },\n                                onDblclick: function (evnt) { return $xetable.triggerHeaderCellDblclickEvent(evnt, params); }\n                            };\n                            // 横向虚拟滚动不支持动态行高\n                            if (scrollXLoad && !hasEllipsis) {\n                                showEllipsis = hasEllipsis = true;\n                            }\n                            // 按下事件处理\n                            if (mouseConfig) {\n                                thOns.onMousedown = function (evnt) { return $xetable.triggerHeaderCellMousedownEvent(evnt, params); };\n                            }\n                            return h('th', __assign(__assign({ class: ['vxe-header--column', column.id, (_a = {},\n                                        _a[\"col--\".concat(headAlign)] = headAlign,\n                                        _a[\"col--\".concat(type)] = type,\n                                        _a['col--last'] = $columnIndex === cols.length - 1,\n                                        _a['col--fixed'] = column.fixed,\n                                        _a['col--group'] = isColGroup,\n                                        _a['col--ellipsis'] = hasEllipsis,\n                                        _a['fixed--hidden'] = fixedHiddenColumn,\n                                        _a['is--sortable'] = column.sortable,\n                                        _a['col--filter'] = !!column.filters,\n                                        _a['is--filter-active'] = hasFilter,\n                                        _a['col--current'] = currentColumn === column,\n                                        _a), headerClassName ? (XEUtils.isFunction(headerClassName) ? headerClassName(params) : headerClassName) : '',\n                                    headerCellClassName ? (XEUtils.isFunction(headerCellClassName) ? headerCellClassName(params) : headerCellClassName) : ''], colid: column.id, colspan: column.colSpan > 1 ? column.colSpan : null, rowspan: column.rowSpan > 1 ? column.rowSpan : null, style: headerCellStyle ? (XEUtils.isFunction(headerCellStyle) ? headerCellStyle(params) : headerCellStyle) : null }, thOns), { key: columnKey || columnOpts.useKey || isColGroup ? column.id : $columnIndex }), [\n                                h('div', {\n                                    class: ['vxe-cell', {\n                                            'c--title': showTitle,\n                                            'c--tooltip': showTooltip,\n                                            'c--ellipsis': showEllipsis\n                                        }]\n                                }, column.renderHeader(params)),\n                                /**\n                                 * 列宽拖动\n                                 */\n                                !fixedHiddenColumn && !isColGroup && (XEUtils.isBoolean(column.resizable) ? column.resizable : (columnOpts.resizable || resizable)) ? h('div', {\n                                    class: ['vxe-resizable', {\n                                            'is--line': !border || border === 'none'\n                                        }],\n                                    onMousedown: function (evnt) { return resizeMousedown(evnt, params); }\n                                }) : null\n                            ]);\n                        }).concat(scrollbarWidth ? [\n                            h('th', {\n                                class: 'vxe-header--gutter col--gutter'\n                            })\n                        ] : []));\n                    }))\n                ]),\n                /**\n                 * 其他\n                 */\n                h('div', {\n                    ref: refHeaderBorderRepair,\n                    class: 'vxe-table--header-border-line'\n                })\n            ]);\n        };\n        return renderVN;\n    }\n});\n",
      "start": 1714699767846,
      "end": 1714699767846,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767846,
      "end": 1714699767846,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767846,
      "end": 1714699767846,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767846,
      "end": 1714699767846,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767846,
      "end": 1714699767846,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767846,
      "end": 1714699767846,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767846,
      "end": 1714699767846,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767846,
      "end": 1714699767847,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767847,
      "end": 1714699767847,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767847,
      "end": 1714699767847,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767847,
      "end": 1714699767847,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767847,
      "end": 1714699767847,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767847,
      "end": 1714699767847,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767847,
      "end": 1714699767847,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767847,
      "end": 1714699767847,
      "order": "normal"
    }
  ]
}

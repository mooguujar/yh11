{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/input/src/input.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { defineComponent, h, Teleport, ref, computed, reactive, inject, nextTick, watch, onUnmounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { useSize } from '../../hooks/size';\nimport { getFuncText, getLastZIndex, nextZIndex } from '../../tools/utils';\nimport { hasClass, getAbsolutePos, getEventTargetNode } from '../../tools/dom';\nimport { GlobalEvent, hasEventKey, EVENT_KEYS } from '../../tools/event';\nimport { toStringTimeDate, getDateQuarter } from './date';\nimport { handleNumber, toFloatValueFixed } from './number';\nvar yearSize = 12;\nvar monthSize = 20;\nvar quarterSize = 8;\nexport default defineComponent({\n    name: 'VxeInput',\n    props: {\n        modelValue: [String, Number, Date],\n        immediate: { type: Boolean, default: true },\n        name: String,\n        type: { type: String, default: 'text' },\n        clearable: { type: Boolean, default: function () { return GlobalConfig.input.clearable; } },\n        readonly: Boolean,\n        disabled: Boolean,\n        placeholder: {\n            type: String,\n            default: function () { return XEUtils.eqNull(GlobalConfig.input.placeholder) ? GlobalConfig.i18n('vxe.base.pleaseInput') : GlobalConfig.input.placeholder; }\n        },\n        maxlength: [String, Number],\n        autocomplete: { type: String, default: 'off' },\n        align: String,\n        form: String,\n        className: String,\n        size: { type: String, default: function () { return GlobalConfig.input.size || GlobalConfig.size; } },\n        multiple: Boolean,\n        // text\n        showWordCount: Boolean,\n        countMethod: Function,\n        // number、integer、float\n        min: { type: [String, Number], default: null },\n        max: { type: [String, Number], default: null },\n        step: [String, Number],\n        exponential: { type: Boolean, default: function () { return GlobalConfig.input.exponential; } },\n        // number、integer、float、password\n        controls: { type: Boolean, default: function () { return GlobalConfig.input.controls; } },\n        // float\n        digits: { type: [String, Number], default: function () { return GlobalConfig.input.digits; } },\n        // date、week、month、quarter、year\n        startDate: { type: [String, Number, Date], default: function () { return GlobalConfig.input.startDate; } },\n        endDate: { type: [String, Number, Date], default: function () { return GlobalConfig.input.endDate; } },\n        minDate: [String, Number, Date],\n        maxDate: [String, Number, Date],\n        // 已废弃 startWeek，被 startDay 替换\n        startWeek: Number,\n        startDay: { type: [String, Number], default: function () { return GlobalConfig.input.startDay; } },\n        labelFormat: { type: String, default: function () { return GlobalConfig.input.labelFormat; } },\n        valueFormat: { type: String, default: function () { return GlobalConfig.input.valueFormat; } },\n        editable: { type: Boolean, default: true },\n        festivalMethod: { type: Function, default: function () { return GlobalConfig.input.festivalMethod; } },\n        disabledMethod: { type: Function, default: function () { return GlobalConfig.input.disabledMethod; } },\n        // week\n        selectDay: { type: [String, Number], default: function () { return GlobalConfig.input.selectDay; } },\n        prefixIcon: String,\n        suffixIcon: String,\n        placement: String,\n        transfer: { type: Boolean, default: function () { return GlobalConfig.input.transfer; } }\n    },\n    emits: [\n        'update:modelValue',\n        'input',\n        'change',\n        'keydown',\n        'keyup',\n        'wheel',\n        'click',\n        'focus',\n        'blur',\n        'clear',\n        'search-click',\n        'toggle-visible',\n        'prev-number',\n        'next-number',\n        'prefix-click',\n        'suffix-click',\n        'date-prev',\n        'date-today',\n        'date-next'\n    ],\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var $xeform = inject('$xeform', null);\n        var $xeformiteminfo = inject('$xeformiteminfo', null);\n        var xID = XEUtils.uniqueId();\n        var computeSize = useSize(props);\n        var reactData = reactive({\n            inited: false,\n            panelIndex: 0,\n            showPwd: false,\n            visiblePanel: false,\n            animatVisible: false,\n            panelStyle: null,\n            panelPlacement: '',\n            isActivated: false,\n            inputValue: props.modelValue,\n            datetimePanelValue: null,\n            datePanelValue: null,\n            datePanelLabel: '',\n            datePanelType: 'day',\n            selectMonth: null,\n            currentDate: null\n        });\n        var refElem = ref();\n        var refInputTarget = ref();\n        var refInputPanel = ref();\n        var refInputTimeBody = ref();\n        var refMaps = {\n            refElem: refElem,\n            refInput: refInputTarget\n        };\n        var $xeinput = {\n            xID: xID,\n            props: props,\n            context: context,\n            reactData: reactData,\n            getRefMaps: function () { return refMaps; }\n        };\n        var inputMethods = {};\n        var parseDate = function (value, format) {\n            var type = props.type;\n            if (type === 'time') {\n                return toStringTimeDate(value);\n            }\n            return XEUtils.toStringDate(value, format);\n        };\n        var computeIsDateTimeType = computed(function () {\n            var type = props.type;\n            return type === 'time' || type === 'datetime';\n        });\n        var computeIsNumType = computed(function () {\n            return ['number', 'integer', 'float'].indexOf(props.type) > -1;\n        });\n        var computeInputCount = computed(function () {\n            return XEUtils.getSize(reactData.inputValue);\n        });\n        var computeIsCountError = computed(function () {\n            var inputCount = computeInputCount.value;\n            return props.maxlength && inputCount > XEUtils.toNumber(props.maxlength);\n        });\n        var computeIsDatePickerType = computed(function () {\n            var isDateTimeType = computeIsDateTimeType.value;\n            return isDateTimeType || ['date', 'week', 'month', 'quarter', 'year'].indexOf(props.type) > -1;\n        });\n        var computeIsPawdType = computed(function () {\n            return props.type === 'password';\n        });\n        var computeIsSearchType = computed(function () {\n            return props.type === 'search';\n        });\n        var computeDigitsValue = computed(function () {\n            return XEUtils.toInteger(props.digits) || 1;\n        });\n        var computeStepValue = computed(function () {\n            var type = props.type;\n            var digitsValue = computeDigitsValue.value;\n            var step = props.step;\n            if (type === 'integer') {\n                return XEUtils.toInteger(step) || 1;\n            }\n            else if (type === 'float') {\n                return XEUtils.toNumber(step) || (1 / Math.pow(10, digitsValue));\n            }\n            return XEUtils.toNumber(step) || 1;\n        });\n        var computeIsClearable = computed(function () {\n            var type = props.type;\n            var isNumType = computeIsNumType.value;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var isPawdType = computeIsPawdType.value;\n            return props.clearable && (isPawdType || isNumType || isDatePickerType || type === 'text' || type === 'search');\n        });\n        var computeDateStartTime = computed(function () {\n            return props.startDate ? XEUtils.toStringDate(props.startDate) : null;\n        });\n        var computeDateEndTime = computed(function () {\n            return props.endDate ? XEUtils.toStringDate(props.endDate) : null;\n        });\n        var computeSupportMultiples = computed(function () {\n            return ['date', 'week', 'month', 'quarter', 'year'].includes(props.type);\n        });\n        var computeDateListValue = computed(function () {\n            var modelValue = props.modelValue, multiple = props.multiple;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var dateValueFormat = computeDateValueFormat.value;\n            if (multiple && modelValue && isDatePickerType) {\n                return XEUtils.toValueString(modelValue).split(',').map(function (item) {\n                    var date = parseDate(item, dateValueFormat);\n                    if (XEUtils.isValidDate(date)) {\n                        return date;\n                    }\n                    return null;\n                });\n            }\n            return [];\n        });\n        var computeDateMultipleValue = computed(function () {\n            var dateListValue = computeDateListValue.value;\n            var dateValueFormat = computeDateValueFormat.value;\n            return dateListValue.map(function (date) { return XEUtils.toDateString(date, dateValueFormat); });\n        });\n        var computeDateMultipleLabel = computed(function () {\n            var dateListValue = computeDateListValue.value;\n            var dateLabelFormat = computeDateLabelFormat.value;\n            return dateListValue.map(function (date) { return XEUtils.toDateString(date, dateLabelFormat); }).join(', ');\n        });\n        var computeDateValueFormat = computed(function () {\n            var type = props.type;\n            return type === 'time' ? 'HH:mm:ss' : (props.valueFormat || (type === 'datetime' ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'));\n        });\n        var computeDateValue = computed(function () {\n            var modelValue = props.modelValue;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var dateValueFormat = computeDateValueFormat.value;\n            var val = null;\n            if (modelValue && isDatePickerType) {\n                var date = parseDate(modelValue, dateValueFormat);\n                if (XEUtils.isValidDate(date)) {\n                    val = date;\n                }\n            }\n            return val;\n        });\n        var computeIsDisabledPrevDateBtn = computed(function () {\n            var dateStartTime = computeDateStartTime.value;\n            var selectMonth = reactData.selectMonth;\n            if (selectMonth && dateStartTime) {\n                return selectMonth <= dateStartTime;\n            }\n            return false;\n        });\n        var computeIsDisabledNextDateBtn = computed(function () {\n            var dateEndTime = computeDateEndTime.value;\n            var selectMonth = reactData.selectMonth;\n            if (selectMonth && dateEndTime) {\n                return selectMonth >= dateEndTime;\n            }\n            return false;\n        });\n        var computeDateTimeLabel = computed(function () {\n            var datetimePanelValue = reactData.datetimePanelValue;\n            if (datetimePanelValue) {\n                return XEUtils.toDateString(datetimePanelValue, 'HH:mm:ss');\n            }\n            return '';\n        });\n        var computeDateHMSTime = computed(function () {\n            var dateValue = computeDateValue.value;\n            var isDateTimeType = computeIsDateTimeType.value;\n            return dateValue && isDateTimeType ? (dateValue.getHours() * 3600 + dateValue.getMinutes() * 60 + dateValue.getSeconds()) * 1000 : 0;\n        });\n        var computeDateLabelFormat = computed(function () {\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                return props.labelFormat || GlobalConfig.i18n(\"vxe.input.date.labelFormat.\".concat(props.type));\n            }\n            return null;\n        });\n        var computeYearList = computed(function () {\n            var selectMonth = reactData.selectMonth, currentDate = reactData.currentDate;\n            var years = [];\n            if (selectMonth && currentDate) {\n                var currFullYear = currentDate.getFullYear();\n                var selectFullYear = selectMonth.getFullYear();\n                var startYearDate = new Date(selectFullYear - selectFullYear % yearSize, 0, 1);\n                for (var index = -4; index < yearSize + 4; index++) {\n                    var date = XEUtils.getWhatYear(startYearDate, index, 'first');\n                    var itemFullYear = date.getFullYear();\n                    years.push({\n                        date: date,\n                        isCurrent: true,\n                        isPrev: index < 0,\n                        isNow: currFullYear === itemFullYear,\n                        isNext: index >= yearSize,\n                        year: itemFullYear\n                    });\n                }\n            }\n            return years;\n        });\n        var computeSelectDatePanelLabel = computed(function () {\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                var datePanelType = reactData.datePanelType, selectMonth = reactData.selectMonth;\n                var yearList = computeYearList.value;\n                var year = '';\n                var month = void 0;\n                if (selectMonth) {\n                    year = selectMonth.getFullYear();\n                    month = selectMonth.getMonth() + 1;\n                }\n                if (datePanelType === 'quarter') {\n                    return GlobalConfig.i18n('vxe.input.date.quarterLabel', [year]);\n                }\n                else if (datePanelType === 'month') {\n                    return GlobalConfig.i18n('vxe.input.date.monthLabel', [year]);\n                }\n                else if (datePanelType === 'year') {\n                    return yearList.length ? \"\".concat(yearList[0].year, \" - \").concat(yearList[yearList.length - 1].year) : '';\n                }\n                return GlobalConfig.i18n('vxe.input.date.dayLabel', [year, month ? GlobalConfig.i18n(\"vxe.input.date.m\".concat(month)) : '-']);\n            }\n            return '';\n        });\n        var computeFirstDayOfWeek = computed(function () {\n            var startDay = props.startDay, startWeek = props.startWeek;\n            return XEUtils.toNumber(XEUtils.isNumber(startDay) || XEUtils.isString(startDay) ? startDay : startWeek);\n        });\n        var computeWeekDatas = computed(function () {\n            var weeks = [];\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                var sWeek = computeFirstDayOfWeek.value;\n                weeks.push(sWeek);\n                for (var index = 0; index < 6; index++) {\n                    if (sWeek >= 6) {\n                        sWeek = 0;\n                    }\n                    else {\n                        sWeek++;\n                    }\n                    weeks.push(sWeek);\n                }\n            }\n            return weeks;\n        });\n        var computeDateHeaders = computed(function () {\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                var weekDatas = computeWeekDatas.value;\n                return weekDatas.map(function (day) {\n                    return {\n                        value: day,\n                        label: GlobalConfig.i18n(\"vxe.input.date.weeks.w\".concat(day))\n                    };\n                });\n            }\n            return [];\n        });\n        var computeWeekHeaders = computed(function () {\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                var dateHeaders = computeDateHeaders.value;\n                return [{ label: GlobalConfig.i18n('vxe.input.date.weeks.w') }].concat(dateHeaders);\n            }\n            return [];\n        });\n        var computeYearDatas = computed(function () {\n            var yearList = computeYearList.value;\n            return XEUtils.chunk(yearList, 4);\n        });\n        var computeQuarterList = computed(function () {\n            var selectMonth = reactData.selectMonth, currentDate = reactData.currentDate;\n            var quarters = [];\n            if (selectMonth && currentDate) {\n                var currFullYear = currentDate.getFullYear();\n                var currQuarter = getDateQuarter(currentDate);\n                var firstYear = XEUtils.getWhatYear(selectMonth, 0, 'first');\n                var selFullYear = firstYear.getFullYear();\n                for (var index = -2; index < quarterSize - 2; index++) {\n                    var date = XEUtils.getWhatQuarter(firstYear, index);\n                    var itemFullYear = date.getFullYear();\n                    var itemQuarter = getDateQuarter(date);\n                    var isPrev = itemFullYear < selFullYear;\n                    quarters.push({\n                        date: date,\n                        isPrev: isPrev,\n                        isCurrent: itemFullYear === selFullYear,\n                        isNow: itemFullYear === currFullYear && itemQuarter === currQuarter,\n                        isNext: !isPrev && itemFullYear > selFullYear,\n                        quarter: itemQuarter\n                    });\n                }\n            }\n            return quarters;\n        });\n        var computeQuarterDatas = computed(function () {\n            var quarterList = computeQuarterList.value;\n            return XEUtils.chunk(quarterList, 2);\n        });\n        var computeMonthList = computed(function () {\n            var selectMonth = reactData.selectMonth, currentDate = reactData.currentDate;\n            var months = [];\n            if (selectMonth && currentDate) {\n                var currFullYear = currentDate.getFullYear();\n                var currMonth = currentDate.getMonth();\n                var selFullYear = XEUtils.getWhatYear(selectMonth, 0, 'first').getFullYear();\n                for (var index = -4; index < monthSize - 4; index++) {\n                    var date = XEUtils.getWhatYear(selectMonth, 0, index);\n                    var itemFullYear = date.getFullYear();\n                    var itemMonth = date.getMonth();\n                    var isPrev = itemFullYear < selFullYear;\n                    months.push({\n                        date: date,\n                        isPrev: isPrev,\n                        isCurrent: itemFullYear === selFullYear,\n                        isNow: itemFullYear === currFullYear && itemMonth === currMonth,\n                        isNext: !isPrev && itemFullYear > selFullYear,\n                        month: itemMonth\n                    });\n                }\n            }\n            return months;\n        });\n        var computeMonthDatas = computed(function () {\n            var monthList = computeMonthList.value;\n            return XEUtils.chunk(monthList, 4);\n        });\n        var computeDayList = computed(function () {\n            var selectMonth = reactData.selectMonth, currentDate = reactData.currentDate;\n            var days = [];\n            if (selectMonth && currentDate) {\n                var dateHMSTime = computeDateHMSTime.value;\n                var weekDatas = computeWeekDatas.value;\n                var currFullYear = currentDate.getFullYear();\n                var currMonth = currentDate.getMonth();\n                var currDate = currentDate.getDate();\n                var selFullYear = selectMonth.getFullYear();\n                var selMonth = selectMonth.getMonth();\n                var selDay = selectMonth.getDay();\n                var prevOffsetDate = -weekDatas.indexOf(selDay);\n                var startDayDate = new Date(XEUtils.getWhatDay(selectMonth, prevOffsetDate).getTime() + dateHMSTime);\n                for (var index = 0; index < 42; index++) {\n                    var date = XEUtils.getWhatDay(startDayDate, index);\n                    var itemFullYear = date.getFullYear();\n                    var itemMonth = date.getMonth();\n                    var itemDate = date.getDate();\n                    var isPrev = date < selectMonth;\n                    days.push({\n                        date: date,\n                        isPrev: isPrev,\n                        isCurrent: itemFullYear === selFullYear && itemMonth === selMonth,\n                        isNow: itemFullYear === currFullYear && itemMonth === currMonth && itemDate === currDate,\n                        isNext: !isPrev && selMonth !== itemMonth,\n                        label: itemDate\n                    });\n                }\n            }\n            return days;\n        });\n        var computeDayDatas = computed(function () {\n            var dayList = computeDayList.value;\n            return XEUtils.chunk(dayList, 7);\n        });\n        var computeWeekDates = computed(function () {\n            var dayDatas = computeDayDatas.value;\n            var firstDayOfWeek = computeFirstDayOfWeek.value;\n            return dayDatas.map(function (list) {\n                var firstItem = list[0];\n                var item = {\n                    date: firstItem.date,\n                    isWeekNumber: true,\n                    isPrev: false,\n                    isCurrent: false,\n                    isNow: false,\n                    isNext: false,\n                    label: XEUtils.getYearWeek(firstItem.date, firstDayOfWeek)\n                };\n                return [item].concat(list);\n            });\n        });\n        var computeHourList = computed(function () {\n            var list = [];\n            var isDateTimeType = computeIsDateTimeType.value;\n            if (isDateTimeType) {\n                for (var index = 0; index < 24; index++) {\n                    list.push({\n                        value: index,\n                        label: ('' + index).padStart(2, '0')\n                    });\n                }\n            }\n            return list;\n        });\n        var computeMinuteList = computed(function () {\n            var list = [];\n            var isDateTimeType = computeIsDateTimeType.value;\n            if (isDateTimeType) {\n                for (var index = 0; index < 60; index++) {\n                    list.push({\n                        value: index,\n                        label: ('' + index).padStart(2, '0')\n                    });\n                }\n            }\n            return list;\n        });\n        var computeSecondList = computed(function () {\n            var minuteList = computeMinuteList.value;\n            return minuteList;\n        });\n        var computeInpReadonly = computed(function () {\n            var type = props.type, readonly = props.readonly, editable = props.editable, multiple = props.multiple;\n            return readonly || multiple || !editable || type === 'week' || type === 'quarter';\n        });\n        var computeInputType = computed(function () {\n            var type = props.type;\n            var showPwd = reactData.showPwd;\n            var isNumType = computeIsNumType.value;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var isPawdType = computeIsPawdType.value;\n            if (isDatePickerType || isNumType || (isPawdType && showPwd) || type === 'number') {\n                return 'text';\n            }\n            return type;\n        });\n        var computeInpPlaceholder = computed(function () {\n            var placeholder = props.placeholder;\n            if (placeholder) {\n                return getFuncText(placeholder);\n            }\n            return '';\n        });\n        var computeInpMaxlength = computed(function () {\n            var maxlength = props.maxlength;\n            var isNumType = computeIsNumType.value;\n            // 数值最大长度限制 16 位，包含小数\n            return isNumType && !XEUtils.toNumber(maxlength) ? 16 : maxlength;\n        });\n        var computeInpImmediate = computed(function () {\n            var type = props.type, immediate = props.immediate;\n            return immediate || !(type === 'text' || type === 'number' || type === 'integer' || type === 'float');\n        });\n        var computeNumValue = computed(function () {\n            var type = props.type;\n            var inputValue = reactData.inputValue;\n            var isNumType = computeIsNumType.value;\n            if (isNumType) {\n                return type === 'integer' ? XEUtils.toInteger(handleNumber(inputValue)) : XEUtils.toNumber(handleNumber(inputValue));\n            }\n            return 0;\n        });\n        var computeIsDisabledSubtractNumber = computed(function () {\n            var min = props.min;\n            var inputValue = reactData.inputValue;\n            var isNumType = computeIsNumType.value;\n            var numValue = computeNumValue.value;\n            // 当有值时再进行判断\n            if ((inputValue || inputValue === 0) && isNumType && min !== null) {\n                return numValue <= XEUtils.toNumber(min);\n            }\n            return false;\n        });\n        var computeIsDisabledAddNumber = computed(function () {\n            var max = props.max;\n            var inputValue = reactData.inputValue;\n            var isNumType = computeIsNumType.value;\n            var numValue = computeNumValue.value;\n            // 当有值时再进行判断\n            if ((inputValue || inputValue === 0) && isNumType && max !== null) {\n                return numValue >= XEUtils.toNumber(max);\n            }\n            return false;\n        });\n        var getNumberValue = function (val) {\n            var type = props.type, exponential = props.exponential;\n            var inpMaxlength = computeInpMaxlength.value;\n            var digitsValue = computeDigitsValue.value;\n            var restVal = (type === 'float' ? toFloatValueFixed(val, digitsValue) : XEUtils.toValueString(val));\n            if (exponential && (val === restVal || XEUtils.toValueString(val).toLowerCase() === XEUtils.toNumber(restVal).toExponential())) {\n                return val;\n            }\n            return restVal.slice(0, inpMaxlength);\n        };\n        var triggerEvent = function (evnt) {\n            var inputValue = reactData.inputValue;\n            inputMethods.dispatchEvent(evnt.type, { value: inputValue }, evnt);\n        };\n        var emitModel = function (value, evnt) {\n            reactData.inputValue = value;\n            emit('update:modelValue', value);\n            inputMethods.dispatchEvent('input', { value: value }, evnt);\n            if (XEUtils.toValueString(props.modelValue) !== value) {\n                inputMethods.dispatchEvent('change', { value: value }, evnt);\n                // 自动更新校验状态\n                if ($xeform && $xeformiteminfo) {\n                    $xeform.triggerItemEvent(evnt, $xeformiteminfo.itemConfig.field, value);\n                }\n            }\n        };\n        var emitInputEvent = function (value, evnt) {\n            var isDatePickerType = computeIsDatePickerType.value;\n            var inpImmediate = computeInpImmediate.value;\n            reactData.inputValue = value;\n            if (!isDatePickerType) {\n                if (inpImmediate) {\n                    emitModel(value, evnt);\n                }\n                else {\n                    inputMethods.dispatchEvent('input', { value: value }, evnt);\n                }\n            }\n        };\n        var inputEvent = function (evnt) {\n            var inputElem = evnt.target;\n            var value = inputElem.value;\n            emitInputEvent(value, evnt);\n        };\n        var changeEvent = function (evnt) {\n            var inpImmediate = computeInpImmediate.value;\n            if (!inpImmediate) {\n                triggerEvent(evnt);\n            }\n        };\n        var focusEvent = function (evnt) {\n            reactData.isActivated = true;\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                datePickerOpenEvent(evnt);\n            }\n            triggerEvent(evnt);\n        };\n        var clickPrefixEvent = function (evnt) {\n            var disabled = props.disabled;\n            if (!disabled) {\n                var inputValue = reactData.inputValue;\n                inputMethods.dispatchEvent('prefix-click', { value: inputValue }, evnt);\n            }\n        };\n        var hidePanelTimeout;\n        var hidePanel = function () {\n            return new Promise(function (resolve) {\n                reactData.visiblePanel = false;\n                hidePanelTimeout = window.setTimeout(function () {\n                    reactData.animatVisible = false;\n                    resolve();\n                }, 350);\n            });\n        };\n        var clearValueEvent = function (evnt, value) {\n            var type = props.type;\n            var isNumType = computeIsNumType.value;\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                hidePanel();\n            }\n            if (isNumType || ['text', 'search', 'password'].indexOf(type) > -1) {\n                focus();\n            }\n            inputMethods.dispatchEvent('clear', { value: value }, evnt);\n        };\n        var clickSuffixEvent = function (evnt) {\n            var disabled = props.disabled;\n            if (!disabled) {\n                if (hasClass(evnt.currentTarget, 'is--clear')) {\n                    emitModel('', evnt);\n                    clearValueEvent(evnt, '');\n                }\n                else {\n                    var inputValue = reactData.inputValue;\n                    inputMethods.dispatchEvent('suffix-click', { value: inputValue }, evnt);\n                }\n            }\n        };\n        var dateParseValue = function (value) {\n            var type = props.type;\n            var valueFormat = props.valueFormat;\n            var dateLabelFormat = computeDateLabelFormat.value;\n            var firstDayOfWeek = computeFirstDayOfWeek.value;\n            var dValue = null;\n            var dLabel = '';\n            if (value) {\n                dValue = parseDate(value, valueFormat);\n            }\n            if (XEUtils.isValidDate(dValue)) {\n                dLabel = XEUtils.toDateString(dValue, dateLabelFormat, { firstDay: firstDayOfWeek });\n                // 由于年份和第几周是冲突的行为，所以需要特殊处理，判断是否跨年\n                if (dateLabelFormat && type === 'week') {\n                    var firstWeekDate = XEUtils.getWhatWeek(dValue, 0, firstDayOfWeek, firstDayOfWeek);\n                    if (firstWeekDate.getFullYear() < dValue.getFullYear()) {\n                        var yyIndex = dateLabelFormat.indexOf('yyyy');\n                        if (yyIndex > -1) {\n                            var yyNum = Number(dLabel.substring(yyIndex, yyIndex + 4));\n                            if (yyNum && !isNaN(yyNum)) {\n                                dLabel = dLabel.replace(\"\".concat(yyNum), \"\".concat(yyNum - 1));\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                dValue = null;\n            }\n            reactData.datePanelValue = dValue;\n            reactData.datePanelLabel = dLabel;\n        };\n        /**\n         * 值变化时处理\n         */\n        var changeValue = function () {\n            var isDatePickerType = computeIsDatePickerType.value;\n            var inputValue = reactData.inputValue;\n            if (isDatePickerType) {\n                dateParseValue(inputValue);\n                reactData.inputValue = props.multiple ? computeDateMultipleLabel.value : reactData.datePanelLabel;\n            }\n        };\n        /**\n         * 检查初始值\n         */\n        var initValue = function () {\n            var type = props.type;\n            var inputValue = reactData.inputValue;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var digitsValue = computeDigitsValue.value;\n            if (isDatePickerType) {\n                changeValue();\n            }\n            else if (type === 'float') {\n                if (inputValue) {\n                    var validValue = toFloatValueFixed(inputValue, digitsValue);\n                    if (inputValue !== validValue) {\n                        emitModel(validValue, { type: 'init' });\n                    }\n                }\n            }\n        };\n        var vaildMaxNum = function (num) {\n            return props.max === null || XEUtils.toNumber(num) <= XEUtils.toNumber(props.max);\n        };\n        var vaildMinNum = function (num) {\n            return props.min === null || XEUtils.toNumber(num) >= XEUtils.toNumber(props.min);\n        };\n        var dateRevert = function () {\n            reactData.inputValue = props.multiple ? computeDateMultipleLabel.value : reactData.datePanelLabel;\n        };\n        var dateCheckMonth = function (date) {\n            var month = XEUtils.getWhatMonth(date, 0, 'first');\n            if (!XEUtils.isEqual(month, reactData.selectMonth)) {\n                reactData.selectMonth = month;\n            }\n        };\n        var dateChange = function (date) {\n            var modelValue = props.modelValue, multiple = props.multiple;\n            var datetimePanelValue = reactData.datetimePanelValue;\n            var isDateTimeType = computeIsDateTimeType.value;\n            var dateValueFormat = computeDateValueFormat.value;\n            var firstDayOfWeek = computeFirstDayOfWeek.value;\n            if (props.type === 'week') {\n                var sWeek = XEUtils.toNumber(props.selectDay);\n                date = XEUtils.getWhatWeek(date, 0, sWeek, firstDayOfWeek);\n            }\n            else if (isDateTimeType) {\n                date.setHours(datetimePanelValue.getHours());\n                date.setMinutes(datetimePanelValue.getMinutes());\n                date.setSeconds(datetimePanelValue.getSeconds());\n            }\n            var inpVal = XEUtils.toDateString(date, dateValueFormat, { firstDay: firstDayOfWeek });\n            dateCheckMonth(date);\n            if (multiple) {\n                // 如果为多选\n                var dateMultipleValue = computeDateMultipleValue.value;\n                if (isDateTimeType) {\n                    // 如果是datetime特殊类型\n                    var dateListValue = __spreadArray([], computeDateListValue.value, true);\n                    var datetimeRest_1 = [];\n                    var eqIndex = XEUtils.findIndexOf(dateListValue, function (val) { return XEUtils.isDateSame(date, val, 'yyyyMMdd'); });\n                    if (eqIndex === -1) {\n                        dateListValue.push(date);\n                    }\n                    else {\n                        dateListValue.splice(eqIndex, 1);\n                    }\n                    dateListValue.forEach(function (item) {\n                        if (item) {\n                            item.setHours(datetimePanelValue.getHours());\n                            item.setMinutes(datetimePanelValue.getMinutes());\n                            item.setSeconds(datetimePanelValue.getSeconds());\n                            datetimeRest_1.push(item);\n                        }\n                    });\n                    emitModel(datetimeRest_1.map(function (date) { return XEUtils.toDateString(date, dateValueFormat); }).join(','), { type: 'update' });\n                }\n                else {\n                    // 如果是日期类型\n                    if (dateMultipleValue.some(function (val) { return XEUtils.isEqual(val, inpVal); })) {\n                        emitModel(dateMultipleValue.filter(function (val) { return !XEUtils.isEqual(val, inpVal); }).join(','), { type: 'update' });\n                    }\n                    else {\n                        emitModel(dateMultipleValue.concat([inpVal]).join(','), { type: 'update' });\n                    }\n                }\n            }\n            else {\n                // 如果为单选\n                if (!XEUtils.isEqual(modelValue, inpVal)) {\n                    emitModel(inpVal, { type: 'update' });\n                }\n            }\n        };\n        var afterCheckValue = function () {\n            var type = props.type, min = props.min, max = props.max, exponential = props.exponential;\n            var inputValue = reactData.inputValue, datetimePanelValue = reactData.datetimePanelValue;\n            var isNumType = computeIsNumType.value;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var dateLabelFormat = computeDateLabelFormat.value;\n            var inpReadonly = computeInpReadonly.value;\n            if (!inpReadonly) {\n                if (isNumType) {\n                    if (inputValue) {\n                        var inpNumVal = type === 'integer' ? XEUtils.toInteger(handleNumber(inputValue)) : XEUtils.toNumber(handleNumber(inputValue));\n                        if (!vaildMinNum(inpNumVal)) {\n                            inpNumVal = min;\n                        }\n                        else if (!vaildMaxNum(inpNumVal)) {\n                            inpNumVal = max;\n                        }\n                        if (exponential) {\n                            var inpStringVal = XEUtils.toValueString(inputValue).toLowerCase();\n                            if (inpStringVal === XEUtils.toNumber(inpNumVal).toExponential()) {\n                                inpNumVal = inpStringVal;\n                            }\n                        }\n                        emitModel(getNumberValue(inpNumVal), { type: 'check' });\n                    }\n                }\n                else if (isDatePickerType) {\n                    if (inputValue) {\n                        var inpDateVal = parseDate(inputValue, dateLabelFormat);\n                        if (XEUtils.isValidDate(inpDateVal)) {\n                            if (type === 'time') {\n                                inpDateVal = XEUtils.toDateString(inpDateVal, dateLabelFormat);\n                                if (inputValue !== inpDateVal) {\n                                    emitModel(inpDateVal, { type: 'check' });\n                                }\n                                reactData.inputValue = inpDateVal;\n                            }\n                            else {\n                                var isChange = false;\n                                var firstDayOfWeek = computeFirstDayOfWeek.value;\n                                if (type === 'datetime') {\n                                    var dateValue = computeDateValue.value;\n                                    if (inputValue !== XEUtils.toDateString(dateValue, dateLabelFormat) || inputValue !== XEUtils.toDateString(inpDateVal, dateLabelFormat)) {\n                                        isChange = true;\n                                        datetimePanelValue.setHours(inpDateVal.getHours());\n                                        datetimePanelValue.setMinutes(inpDateVal.getMinutes());\n                                        datetimePanelValue.setSeconds(inpDateVal.getSeconds());\n                                    }\n                                }\n                                else {\n                                    isChange = true;\n                                }\n                                reactData.inputValue = XEUtils.toDateString(inpDateVal, dateLabelFormat, { firstDay: firstDayOfWeek });\n                                if (isChange) {\n                                    dateChange(inpDateVal);\n                                }\n                            }\n                        }\n                        else {\n                            dateRevert();\n                        }\n                    }\n                    else {\n                        emitModel('', { type: 'check' });\n                    }\n                }\n            }\n        };\n        var blurEvent = function (evnt) {\n            var inputValue = reactData.inputValue;\n            var inpImmediate = computeInpImmediate.value;\n            if (!inpImmediate) {\n                emitModel(inputValue, evnt);\n            }\n            afterCheckValue();\n            if (!reactData.visiblePanel) {\n                reactData.isActivated = false;\n            }\n            inputMethods.dispatchEvent('blur', { value: inputValue }, evnt);\n        };\n        // 密码\n        var passwordToggleEvent = function (evnt) {\n            var readonly = props.readonly, disabled = props.disabled;\n            var showPwd = reactData.showPwd;\n            if (!disabled && !readonly) {\n                reactData.showPwd = !showPwd;\n            }\n            inputMethods.dispatchEvent('toggle-visible', { visible: reactData.showPwd }, evnt);\n        };\n        // 密码\n        // 搜索\n        var searchEvent = function (evnt) {\n            inputMethods.dispatchEvent('search-click', {}, evnt);\n        };\n        // 搜索\n        // 数值\n        var numberChange = function (isPlus, evnt) {\n            var min = props.min, max = props.max, type = props.type;\n            var inputValue = reactData.inputValue;\n            var stepValue = computeStepValue.value;\n            var numValue = type === 'integer' ? XEUtils.toInteger(handleNumber(inputValue)) : XEUtils.toNumber(handleNumber(inputValue));\n            var newValue = isPlus ? XEUtils.add(numValue, stepValue) : XEUtils.subtract(numValue, stepValue);\n            var restNum;\n            if (!vaildMinNum(newValue)) {\n                restNum = min;\n            }\n            else if (!vaildMaxNum(newValue)) {\n                restNum = max;\n            }\n            else {\n                restNum = newValue;\n            }\n            emitInputEvent(getNumberValue(restNum), evnt);\n        };\n        var downbumTimeout;\n        var numberNextEvent = function (evnt) {\n            var readonly = props.readonly, disabled = props.disabled;\n            var isDisabledSubtractNumber = computeIsDisabledSubtractNumber.value;\n            clearTimeout(downbumTimeout);\n            if (!disabled && !readonly && !isDisabledSubtractNumber) {\n                numberChange(false, evnt);\n            }\n            inputMethods.dispatchEvent('next-number', {}, evnt);\n        };\n        var numberDownNextEvent = function (evnt) {\n            downbumTimeout = window.setTimeout(function () {\n                numberNextEvent(evnt);\n                numberDownNextEvent(evnt);\n            }, 60);\n        };\n        var numberPrevEvent = function (evnt) {\n            var readonly = props.readonly, disabled = props.disabled;\n            var isDisabledAddNumber = computeIsDisabledAddNumber.value;\n            clearTimeout(downbumTimeout);\n            if (!disabled && !readonly && !isDisabledAddNumber) {\n                numberChange(true, evnt);\n            }\n            inputMethods.dispatchEvent('prev-number', {}, evnt);\n        };\n        var numberKeydownEvent = function (evnt) {\n            var isUpArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_UP);\n            var isDwArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_DOWN);\n            if (isUpArrow || isDwArrow) {\n                evnt.preventDefault();\n                if (isUpArrow) {\n                    numberPrevEvent(evnt);\n                }\n                else {\n                    numberNextEvent(evnt);\n                }\n            }\n        };\n        var keydownEvent = function (evnt) {\n            var exponential = props.exponential, controls = props.controls;\n            var isNumType = computeIsNumType.value;\n            if (isNumType) {\n                var isCtrlKey = evnt.ctrlKey;\n                var isShiftKey = evnt.shiftKey;\n                var isAltKey = evnt.altKey;\n                var keyCode = evnt.keyCode;\n                if (!isCtrlKey && !isShiftKey && !isAltKey && (hasEventKey(evnt, EVENT_KEYS.SPACEBAR) || ((!exponential || keyCode !== 69) && (keyCode >= 65 && keyCode <= 90)) || (keyCode >= 186 && keyCode <= 188) || keyCode >= 191)) {\n                    evnt.preventDefault();\n                }\n                if (controls) {\n                    numberKeydownEvent(evnt);\n                }\n            }\n            triggerEvent(evnt);\n        };\n        var keyupEvent = function (evnt) {\n            triggerEvent(evnt);\n        };\n        // 数值\n        var numberStopDown = function () {\n            clearTimeout(downbumTimeout);\n        };\n        var numberDownPrevEvent = function (evnt) {\n            downbumTimeout = window.setTimeout(function () {\n                numberPrevEvent(evnt);\n                numberDownPrevEvent(evnt);\n            }, 60);\n        };\n        var numberMousedownEvent = function (evnt) {\n            numberStopDown();\n            if (evnt.button === 0) {\n                var isPrevNumber_1 = hasClass(evnt.currentTarget, 'is--prev');\n                if (isPrevNumber_1) {\n                    numberPrevEvent(evnt);\n                }\n                else {\n                    numberNextEvent(evnt);\n                }\n                downbumTimeout = window.setTimeout(function () {\n                    if (isPrevNumber_1) {\n                        numberDownPrevEvent(evnt);\n                    }\n                    else {\n                        numberDownNextEvent(evnt);\n                    }\n                }, 500);\n            }\n        };\n        var wheelEvent = function (evnt) {\n            var isNumType = computeIsNumType.value;\n            if (isNumType && props.controls) {\n                if (reactData.isActivated) {\n                    var delta = evnt.deltaY;\n                    if (delta > 0) {\n                        numberNextEvent(evnt);\n                    }\n                    else if (delta < 0) {\n                        numberPrevEvent(evnt);\n                    }\n                    evnt.preventDefault();\n                }\n            }\n            triggerEvent(evnt);\n        };\n        // 日期\n        var dateMonthHandle = function (date, offsetMonth) {\n            reactData.selectMonth = XEUtils.getWhatMonth(date, offsetMonth, 'first');\n        };\n        var dateNowHandle = function () {\n            var currentDate = XEUtils.getWhatDay(Date.now(), 0, 'first');\n            reactData.currentDate = currentDate;\n            dateMonthHandle(currentDate, 0);\n        };\n        var dateToggleTypeEvent = function () {\n            var datePanelType = reactData.datePanelType;\n            if (datePanelType === 'month' || datePanelType === 'quarter') {\n                datePanelType = 'year';\n            }\n            else {\n                datePanelType = 'month';\n            }\n            reactData.datePanelType = datePanelType;\n        };\n        var datePrevEvent = function (evnt) {\n            var type = props.type;\n            var datePanelType = reactData.datePanelType, selectMonth = reactData.selectMonth;\n            var isDisabledPrevDateBtn = computeIsDisabledPrevDateBtn.value;\n            if (!isDisabledPrevDateBtn) {\n                if (type === 'year') {\n                    reactData.selectMonth = XEUtils.getWhatYear(selectMonth, -yearSize, 'first');\n                }\n                else if (type === 'month' || type === 'quarter') {\n                    if (datePanelType === 'year') {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, -yearSize, 'first');\n                    }\n                    else {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, -1, 'first');\n                    }\n                }\n                else {\n                    if (datePanelType === 'year') {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, -yearSize, 'first');\n                    }\n                    else if (datePanelType === 'month') {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, -1, 'first');\n                    }\n                    else {\n                        reactData.selectMonth = XEUtils.getWhatMonth(selectMonth, -1, 'first');\n                    }\n                }\n                inputMethods.dispatchEvent('date-prev', { type: type }, evnt);\n            }\n        };\n        var dateTodayMonthEvent = function (evnt) {\n            dateNowHandle();\n            if (!props.multiple) {\n                dateChange(reactData.currentDate);\n                hidePanel();\n            }\n            inputMethods.dispatchEvent('date-today', { type: props.type }, evnt);\n        };\n        var dateNextEvent = function (evnt) {\n            var type = props.type;\n            var datePanelType = reactData.datePanelType, selectMonth = reactData.selectMonth;\n            var isDisabledNextDateBtn = computeIsDisabledNextDateBtn.value;\n            if (!isDisabledNextDateBtn) {\n                if (type === 'year') {\n                    reactData.selectMonth = XEUtils.getWhatYear(selectMonth, yearSize, 'first');\n                }\n                else if (type === 'month' || type === 'quarter') {\n                    if (datePanelType === 'year') {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, yearSize, 'first');\n                    }\n                    else {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, 1, 'first');\n                    }\n                }\n                else {\n                    if (datePanelType === 'year') {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, yearSize, 'first');\n                    }\n                    else if (datePanelType === 'month') {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, 1, 'first');\n                    }\n                    else {\n                        reactData.selectMonth = XEUtils.getWhatMonth(selectMonth, 1, 'first');\n                    }\n                }\n                inputMethods.dispatchEvent('date-next', { type: type }, evnt);\n            }\n        };\n        var isDateDisabled = function (item) {\n            var disabledMethod = props.disabledMethod;\n            var datePanelType = reactData.datePanelType;\n            return disabledMethod && disabledMethod({ type: datePanelType, viewType: datePanelType, date: item.date, $input: $xeinput });\n        };\n        var dateSelectItem = function (date) {\n            var type = props.type, multiple = props.multiple;\n            var datePanelType = reactData.datePanelType;\n            if (type === 'month') {\n                if (datePanelType === 'year') {\n                    reactData.datePanelType = 'month';\n                    dateCheckMonth(date);\n                }\n                else {\n                    dateChange(date);\n                    if (!multiple) {\n                        hidePanel();\n                    }\n                }\n            }\n            else if (type === 'year') {\n                dateChange(date);\n                if (!multiple) {\n                    hidePanel();\n                }\n            }\n            else if (type === 'quarter') {\n                if (datePanelType === 'year') {\n                    reactData.datePanelType = 'quarter';\n                    dateCheckMonth(date);\n                }\n                else {\n                    dateChange(date);\n                    if (!multiple) {\n                        hidePanel();\n                    }\n                }\n            }\n            else {\n                if (datePanelType === 'month') {\n                    reactData.datePanelType = type === 'week' ? type : 'day';\n                    dateCheckMonth(date);\n                }\n                else if (datePanelType === 'year') {\n                    reactData.datePanelType = 'month';\n                    dateCheckMonth(date);\n                }\n                else {\n                    dateChange(date);\n                    if (type === 'datetime') {\n                        // 日期带时间\n                    }\n                    else {\n                        if (!multiple) {\n                            hidePanel();\n                        }\n                    }\n                }\n            }\n        };\n        var dateSelectEvent = function (item) {\n            if (!isDateDisabled(item)) {\n                dateSelectItem(item.date);\n            }\n        };\n        var dateMoveDay = function (offsetDay) {\n            if (!isDateDisabled({ date: offsetDay })) {\n                var dayList = computeDayList.value;\n                if (!dayList.some(function (item) { return XEUtils.isDateSame(item.date, offsetDay, 'yyyyMMdd'); })) {\n                    dateCheckMonth(offsetDay);\n                }\n                dateParseValue(offsetDay);\n            }\n        };\n        var dateMoveYear = function (offsetYear) {\n            if (!isDateDisabled({ date: offsetYear })) {\n                var yearList = computeYearList.value;\n                if (!yearList.some(function (item) { return XEUtils.isDateSame(item.date, offsetYear, 'yyyy'); })) {\n                    dateCheckMonth(offsetYear);\n                }\n                dateParseValue(offsetYear);\n            }\n        };\n        var dateMoveQuarter = function (offsetQuarter) {\n            if (!isDateDisabled({ date: offsetQuarter })) {\n                var quarterList = computeQuarterList.value;\n                if (!quarterList.some(function (item) { return XEUtils.isDateSame(item.date, offsetQuarter, 'yyyyq'); })) {\n                    dateCheckMonth(offsetQuarter);\n                }\n                dateParseValue(offsetQuarter);\n            }\n        };\n        var dateMoveMonth = function (offsetMonth) {\n            if (!isDateDisabled({ date: offsetMonth })) {\n                var monthList = computeMonthList.value;\n                if (!monthList.some(function (item) { return XEUtils.isDateSame(item.date, offsetMonth, 'yyyyMM'); })) {\n                    dateCheckMonth(offsetMonth);\n                }\n                dateParseValue(offsetMonth);\n            }\n        };\n        var dateMouseenterEvent = function (item) {\n            if (!isDateDisabled(item)) {\n                var datePanelType = reactData.datePanelType;\n                if (datePanelType === 'month') {\n                    dateMoveMonth(item.date);\n                }\n                else if (datePanelType === 'quarter') {\n                    dateMoveQuarter(item.date);\n                }\n                else if (datePanelType === 'year') {\n                    dateMoveYear(item.date);\n                }\n                else {\n                    dateMoveDay(item.date);\n                }\n            }\n        };\n        var updateTimePos = function (liElem) {\n            if (liElem) {\n                var height = liElem.offsetHeight;\n                var ulElem = liElem.parentNode;\n                ulElem.scrollTop = liElem.offsetTop - height * 4;\n            }\n        };\n        var dateTimeChangeEvent = function (evnt) {\n            reactData.datetimePanelValue = new Date(reactData.datetimePanelValue.getTime());\n            updateTimePos(evnt.currentTarget);\n        };\n        var dateHourEvent = function (evnt, item) {\n            reactData.datetimePanelValue.setHours(item.value);\n            dateTimeChangeEvent(evnt);\n        };\n        var dateConfirmEvent = function () {\n            var multiple = props.multiple;\n            var datetimePanelValue = reactData.datetimePanelValue;\n            var dateValue = computeDateValue.value;\n            var isDateTimeType = computeIsDateTimeType.value;\n            if (isDateTimeType) {\n                var dateValueFormat_1 = computeDateValueFormat.value;\n                if (multiple) {\n                    // 如果为多选\n                    var dateMultipleValue = computeDateMultipleValue.value;\n                    if (isDateTimeType) {\n                        // 如果是datetime特殊类型\n                        var dateListValue = __spreadArray([], computeDateListValue.value, true);\n                        var datetimeRest_2 = [];\n                        dateListValue.forEach(function (item) {\n                            if (item) {\n                                item.setHours(datetimePanelValue.getHours());\n                                item.setMinutes(datetimePanelValue.getMinutes());\n                                item.setSeconds(datetimePanelValue.getSeconds());\n                                datetimeRest_2.push(item);\n                            }\n                        });\n                        emitModel(datetimeRest_2.map(function (date) { return XEUtils.toDateString(date, dateValueFormat_1); }).join(','), { type: 'update' });\n                    }\n                    else {\n                        // 如果是日期类型\n                        emitModel(dateMultipleValue.join(','), { type: 'update' });\n                    }\n                }\n                else {\n                    dateChange(dateValue || reactData.currentDate);\n                }\n            }\n            hidePanel();\n        };\n        var dateMinuteEvent = function (evnt, item) {\n            reactData.datetimePanelValue.setMinutes(item.value);\n            dateTimeChangeEvent(evnt);\n        };\n        var dateSecondEvent = function (evnt, item) {\n            reactData.datetimePanelValue.setSeconds(item.value);\n            dateTimeChangeEvent(evnt);\n        };\n        var dateOffsetEvent = function (evnt) {\n            var isActivated = reactData.isActivated, datePanelValue = reactData.datePanelValue, datePanelType = reactData.datePanelType;\n            if (isActivated) {\n                evnt.preventDefault();\n                var isLeftArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_LEFT);\n                var isUpArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_UP);\n                var isRightArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_RIGHT);\n                var isDwArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_DOWN);\n                if (datePanelType === 'year') {\n                    var offsetYear = XEUtils.getWhatYear(datePanelValue || Date.now(), 0, 'first');\n                    if (isLeftArrow) {\n                        offsetYear = XEUtils.getWhatYear(offsetYear, -1);\n                    }\n                    else if (isUpArrow) {\n                        offsetYear = XEUtils.getWhatYear(offsetYear, -4);\n                    }\n                    else if (isRightArrow) {\n                        offsetYear = XEUtils.getWhatYear(offsetYear, 1);\n                    }\n                    else if (isDwArrow) {\n                        offsetYear = XEUtils.getWhatYear(offsetYear, 4);\n                    }\n                    dateMoveYear(offsetYear);\n                }\n                else if (datePanelType === 'quarter') {\n                    var offsetQuarter = XEUtils.getWhatQuarter(datePanelValue || Date.now(), 0, 'first');\n                    if (isLeftArrow) {\n                        offsetQuarter = XEUtils.getWhatQuarter(offsetQuarter, -1);\n                    }\n                    else if (isUpArrow) {\n                        offsetQuarter = XEUtils.getWhatQuarter(offsetQuarter, -2);\n                    }\n                    else if (isRightArrow) {\n                        offsetQuarter = XEUtils.getWhatQuarter(offsetQuarter, 1);\n                    }\n                    else if (isDwArrow) {\n                        offsetQuarter = XEUtils.getWhatQuarter(offsetQuarter, 2);\n                    }\n                    dateMoveQuarter(offsetQuarter);\n                }\n                else if (datePanelType === 'month') {\n                    var offsetMonth = XEUtils.getWhatMonth(datePanelValue || Date.now(), 0, 'first');\n                    if (isLeftArrow) {\n                        offsetMonth = XEUtils.getWhatMonth(offsetMonth, -1);\n                    }\n                    else if (isUpArrow) {\n                        offsetMonth = XEUtils.getWhatMonth(offsetMonth, -4);\n                    }\n                    else if (isRightArrow) {\n                        offsetMonth = XEUtils.getWhatMonth(offsetMonth, 1);\n                    }\n                    else if (isDwArrow) {\n                        offsetMonth = XEUtils.getWhatMonth(offsetMonth, 4);\n                    }\n                    dateMoveMonth(offsetMonth);\n                }\n                else {\n                    var offsetDay = datePanelValue || XEUtils.getWhatDay(Date.now(), 0, 'first');\n                    var firstDayOfWeek = computeFirstDayOfWeek.value;\n                    if (isLeftArrow) {\n                        offsetDay = XEUtils.getWhatDay(offsetDay, -1);\n                    }\n                    else if (isUpArrow) {\n                        offsetDay = XEUtils.getWhatWeek(offsetDay, -1, firstDayOfWeek);\n                    }\n                    else if (isRightArrow) {\n                        offsetDay = XEUtils.getWhatDay(offsetDay, 1);\n                    }\n                    else if (isDwArrow) {\n                        offsetDay = XEUtils.getWhatWeek(offsetDay, 1, firstDayOfWeek);\n                    }\n                    dateMoveDay(offsetDay);\n                }\n            }\n        };\n        var datePgOffsetEvent = function (evnt) {\n            var isActivated = reactData.isActivated;\n            if (isActivated) {\n                var isPgUp = hasEventKey(evnt, EVENT_KEYS.PAGE_UP);\n                evnt.preventDefault();\n                if (isPgUp) {\n                    datePrevEvent(evnt);\n                }\n                else {\n                    dateNextEvent(evnt);\n                }\n            }\n        };\n        var dateOpenPanel = function () {\n            var type = props.type;\n            var isDateTimeType = computeIsDateTimeType.value;\n            var dateValue = computeDateValue.value;\n            if (['year', 'quarter', 'month', 'week'].indexOf(type) > -1) {\n                reactData.datePanelType = type;\n            }\n            else {\n                reactData.datePanelType = 'day';\n            }\n            reactData.currentDate = XEUtils.getWhatDay(Date.now(), 0, 'first');\n            if (dateValue) {\n                dateMonthHandle(dateValue, 0);\n                dateParseValue(dateValue);\n            }\n            else {\n                dateNowHandle();\n            }\n            if (isDateTimeType) {\n                reactData.datetimePanelValue = reactData.datePanelValue || XEUtils.getWhatDay(Date.now(), 0, 'first');\n                nextTick(function () {\n                    var timeBodyElem = refInputTimeBody.value;\n                    XEUtils.arrayEach(timeBodyElem.querySelectorAll('li.is--selected'), updateTimePos);\n                });\n            }\n        };\n        // 日期\n        // 弹出面板\n        var updateZindex = function () {\n            if (reactData.panelIndex < getLastZIndex()) {\n                reactData.panelIndex = nextZIndex();\n            }\n        };\n        var updatePlacement = function () {\n            return nextTick().then(function () {\n                var transfer = props.transfer, placement = props.placement;\n                var panelIndex = reactData.panelIndex;\n                var targetElem = refInputTarget.value;\n                var panelElem = refInputPanel.value;\n                if (targetElem && panelElem) {\n                    var targetHeight = targetElem.offsetHeight;\n                    var targetWidth = targetElem.offsetWidth;\n                    var panelHeight = panelElem.offsetHeight;\n                    var panelWidth = panelElem.offsetWidth;\n                    var marginSize = 5;\n                    var panelStyle = {\n                        zIndex: panelIndex\n                    };\n                    var _a = getAbsolutePos(targetElem), boundingTop = _a.boundingTop, boundingLeft = _a.boundingLeft, visibleHeight = _a.visibleHeight, visibleWidth = _a.visibleWidth;\n                    var panelPlacement = 'bottom';\n                    if (transfer) {\n                        var left = boundingLeft;\n                        var top_1 = boundingTop + targetHeight;\n                        if (placement === 'top') {\n                            panelPlacement = 'top';\n                            top_1 = boundingTop - panelHeight;\n                        }\n                        else if (!placement) {\n                            // 如果下面不够放，则向上\n                            if (top_1 + panelHeight + marginSize > visibleHeight) {\n                                panelPlacement = 'top';\n                                top_1 = boundingTop - panelHeight;\n                            }\n                            // 如果上面不够放，则向下（优先）\n                            if (top_1 < marginSize) {\n                                panelPlacement = 'bottom';\n                                top_1 = boundingTop + targetHeight;\n                            }\n                        }\n                        // 如果溢出右边\n                        if (left + panelWidth + marginSize > visibleWidth) {\n                            left -= left + panelWidth + marginSize - visibleWidth;\n                        }\n                        // 如果溢出左边\n                        if (left < marginSize) {\n                            left = marginSize;\n                        }\n                        Object.assign(panelStyle, {\n                            left: \"\".concat(left, \"px\"),\n                            top: \"\".concat(top_1, \"px\"),\n                            minWidth: \"\".concat(targetWidth, \"px\")\n                        });\n                    }\n                    else {\n                        if (placement === 'top') {\n                            panelPlacement = 'top';\n                            panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                        }\n                        else if (!placement) {\n                            // 如果下面不够放，则向上\n                            if (boundingTop + targetHeight + panelHeight > visibleHeight) {\n                                // 如果上面不够放，则向下（优先）\n                                if (boundingTop - targetHeight - panelHeight > marginSize) {\n                                    panelPlacement = 'top';\n                                    panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                                }\n                            }\n                        }\n                    }\n                    reactData.panelStyle = panelStyle;\n                    reactData.panelPlacement = panelPlacement;\n                    return nextTick();\n                }\n            });\n        };\n        var showPanel = function () {\n            var disabled = props.disabled;\n            var visiblePanel = reactData.visiblePanel;\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (!disabled && !visiblePanel) {\n                if (!reactData.inited) {\n                    reactData.inited = true;\n                }\n                clearTimeout(hidePanelTimeout);\n                reactData.isActivated = true;\n                reactData.animatVisible = true;\n                if (isDatePickerType) {\n                    dateOpenPanel();\n                }\n                setTimeout(function () {\n                    reactData.visiblePanel = true;\n                }, 10);\n                updateZindex();\n                return updatePlacement();\n            }\n            return nextTick();\n        };\n        var datePickerOpenEvent = function (evnt) {\n            var readonly = props.readonly;\n            if (!readonly) {\n                evnt.preventDefault();\n                showPanel();\n            }\n        };\n        var clickEvent = function (evnt) {\n            triggerEvent(evnt);\n        };\n        // 弹出面板\n        // 全局事件\n        var handleGlobalMousedownEvent = function (evnt) {\n            var disabled = props.disabled;\n            var visiblePanel = reactData.visiblePanel, isActivated = reactData.isActivated;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var el = refElem.value;\n            var panelElem = refInputPanel.value;\n            if (!disabled && isActivated) {\n                reactData.isActivated = getEventTargetNode(evnt, el).flag || getEventTargetNode(evnt, panelElem).flag;\n                if (!reactData.isActivated) {\n                    // 如果是日期类型\n                    if (isDatePickerType) {\n                        if (visiblePanel) {\n                            hidePanel();\n                            afterCheckValue();\n                        }\n                    }\n                    else {\n                        afterCheckValue();\n                    }\n                }\n            }\n        };\n        var handleGlobalKeydownEvent = function (evnt) {\n            var clearable = props.clearable, disabled = props.disabled;\n            var visiblePanel = reactData.visiblePanel;\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (!disabled) {\n                var isTab = hasEventKey(evnt, EVENT_KEYS.TAB);\n                var isDel = hasEventKey(evnt, EVENT_KEYS.DELETE);\n                var isEsc = hasEventKey(evnt, EVENT_KEYS.ESCAPE);\n                var isEnter = hasEventKey(evnt, EVENT_KEYS.ENTER);\n                var isLeftArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_LEFT);\n                var isUpArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_UP);\n                var isRightArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_RIGHT);\n                var isDwArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_DOWN);\n                var isPgUp = hasEventKey(evnt, EVENT_KEYS.PAGE_UP);\n                var isPgDn = hasEventKey(evnt, EVENT_KEYS.PAGE_DOWN);\n                var operArrow = isLeftArrow || isUpArrow || isRightArrow || isDwArrow;\n                var isActivated = reactData.isActivated;\n                if (isTab) {\n                    if (isActivated) {\n                        afterCheckValue();\n                    }\n                    isActivated = false;\n                    reactData.isActivated = isActivated;\n                }\n                else if (operArrow) {\n                    if (isDatePickerType) {\n                        if (isActivated) {\n                            if (visiblePanel) {\n                                dateOffsetEvent(evnt);\n                            }\n                            else if (isUpArrow || isDwArrow) {\n                                datePickerOpenEvent(evnt);\n                            }\n                        }\n                    }\n                }\n                else if (isEnter) {\n                    if (isDatePickerType) {\n                        if (visiblePanel) {\n                            if (reactData.datePanelValue) {\n                                dateSelectItem(reactData.datePanelValue);\n                            }\n                            else {\n                                hidePanel();\n                            }\n                        }\n                        else if (isActivated) {\n                            datePickerOpenEvent(evnt);\n                        }\n                    }\n                }\n                else if (isPgUp || isPgDn) {\n                    if (isDatePickerType) {\n                        if (isActivated) {\n                            datePgOffsetEvent(evnt);\n                        }\n                    }\n                }\n                if (isTab || isEsc) {\n                    if (visiblePanel) {\n                        hidePanel();\n                    }\n                }\n                else if (isDel && clearable) {\n                    if (isActivated) {\n                        clearValueEvent(evnt, null);\n                    }\n                }\n            }\n        };\n        var handleGlobalMousewheelEvent = function (evnt) {\n            var disabled = props.disabled;\n            var visiblePanel = reactData.visiblePanel;\n            if (!disabled) {\n                if (visiblePanel) {\n                    var panelElem = refInputPanel.value;\n                    if (getEventTargetNode(evnt, panelElem).flag) {\n                        updatePlacement();\n                    }\n                    else {\n                        hidePanel();\n                        afterCheckValue();\n                    }\n                }\n            }\n        };\n        var handleGlobalBlurEvent = function () {\n            var isActivated = reactData.isActivated, visiblePanel = reactData.visiblePanel;\n            if (visiblePanel) {\n                hidePanel();\n                afterCheckValue();\n            }\n            else if (isActivated) {\n                afterCheckValue();\n            }\n        };\n        var renderDateLabel = function (item, label) {\n            var festivalMethod = props.festivalMethod;\n            if (festivalMethod) {\n                var datePanelType = reactData.datePanelType;\n                var festivalRest = festivalMethod({ type: datePanelType, viewType: datePanelType, date: item.date, $input: $xeinput });\n                var festivalItem = festivalRest ? (XEUtils.isString(festivalRest) ? { label: festivalRest } : festivalRest) : {};\n                var extraItem = festivalItem.extra ? (XEUtils.isString(festivalItem.extra) ? { label: festivalItem.extra } : festivalItem.extra) : null;\n                var labels = [\n                    h('span', {\n                        class: ['vxe-input--date-label', {\n                                'is-notice': festivalItem.notice\n                            }]\n                    }, extraItem && extraItem.label ? [\n                        h('span', label),\n                        h('span', {\n                            class: ['vxe-input--date-label--extra', extraItem.important ? 'is-important' : '', extraItem.className],\n                            style: extraItem.style\n                        }, XEUtils.toValueString(extraItem.label))\n                    ] : label)\n                ];\n                var festivalLabel = festivalItem.label;\n                if (festivalLabel) {\n                    // 默认最多支持3个节日重叠\n                    var festivalLabels = XEUtils.toValueString(festivalLabel).split(',');\n                    labels.push(h('span', {\n                        class: ['vxe-input--date-festival', festivalItem.important ? 'is-important' : '', festivalItem.className],\n                        style: festivalItem.style\n                    }, [\n                        festivalLabels.length > 1 ? h('span', {\n                            class: ['vxe-input--date-festival--overlap', \"overlap--\".concat(festivalLabels.length)]\n                        }, festivalLabels.map(function (label) { return h('span', label.substring(0, 3)); })) : h('span', {\n                            class: 'vxe-input--date-festival--label'\n                        }, festivalLabels[0].substring(0, 3))\n                    ]));\n                }\n                return labels;\n            }\n            return label;\n        };\n        var renderDateDayTable = function () {\n            var multiple = props.multiple;\n            var datePanelType = reactData.datePanelType, datePanelValue = reactData.datePanelValue;\n            var dateValue = computeDateValue.value;\n            var dateHeaders = computeDateHeaders.value;\n            var dayDatas = computeDayDatas.value;\n            var dateListValue = computeDateListValue.value;\n            var matchFormat = 'yyyyMMdd';\n            return [\n                h('table', {\n                    class: \"vxe-input--date-\".concat(datePanelType, \"-view\"),\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    h('thead', [\n                        h('tr', dateHeaders.map(function (item) {\n                            return h('th', item.label);\n                        }))\n                    ]),\n                    h('tbody', dayDatas.map(function (rows) {\n                        return h('tr', rows.map(function (item) {\n                            return h('td', {\n                                class: {\n                                    'is--prev': item.isPrev,\n                                    'is--current': item.isCurrent,\n                                    'is--now': item.isNow,\n                                    'is--next': item.isNext,\n                                    'is--disabled': isDateDisabled(item),\n                                    'is--selected': multiple ? dateListValue.some(function (val) { return XEUtils.isDateSame(val, item.date, matchFormat); }) : XEUtils.isDateSame(dateValue, item.date, matchFormat),\n                                    'is--hover': XEUtils.isDateSame(datePanelValue, item.date, matchFormat)\n                                },\n                                onClick: function () { return dateSelectEvent(item); },\n                                onMouseenter: function () { return dateMouseenterEvent(item); }\n                            }, renderDateLabel(item, item.label));\n                        }));\n                    }))\n                ])\n            ];\n        };\n        var renderDateWeekTable = function () {\n            var multiple = props.multiple;\n            var datePanelType = reactData.datePanelType, datePanelValue = reactData.datePanelValue;\n            var dateValue = computeDateValue.value;\n            var weekHeaders = computeWeekHeaders.value;\n            var weekDates = computeWeekDates.value;\n            var dateListValue = computeDateListValue.value;\n            var matchFormat = 'yyyyMMdd';\n            return [\n                h('table', {\n                    class: \"vxe-input--date-\".concat(datePanelType, \"-view\"),\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    h('thead', [\n                        h('tr', weekHeaders.map(function (item) {\n                            return h('th', item.label);\n                        }))\n                    ]),\n                    h('tbody', weekDates.map(function (rows) {\n                        var isSelected = multiple ? rows.some(function (item) { return dateListValue.some(function (val) { return XEUtils.isDateSame(val, item.date, matchFormat); }); }) : rows.some(function (item) { return XEUtils.isDateSame(dateValue, item.date, matchFormat); });\n                        var isHover = rows.some(function (item) { return XEUtils.isDateSame(datePanelValue, item.date, matchFormat); });\n                        return h('tr', rows.map(function (item) {\n                            return h('td', {\n                                class: {\n                                    'is--prev': item.isPrev,\n                                    'is--current': item.isCurrent,\n                                    'is--now': item.isNow,\n                                    'is--next': item.isNext,\n                                    'is--disabled': isDateDisabled(item),\n                                    'is--selected': isSelected,\n                                    'is--hover': isHover\n                                },\n                                // event\n                                onClick: function () { return dateSelectEvent(item); },\n                                onMouseenter: function () { return dateMouseenterEvent(item); }\n                            }, renderDateLabel(item, item.label));\n                        }));\n                    }))\n                ])\n            ];\n        };\n        var renderDateMonthTable = function () {\n            var multiple = props.multiple;\n            var datePanelType = reactData.datePanelType, datePanelValue = reactData.datePanelValue;\n            var dateValue = computeDateValue.value;\n            var monthDatas = computeMonthDatas.value;\n            var dateListValue = computeDateListValue.value;\n            var matchFormat = 'yyyyMM';\n            return [\n                h('table', {\n                    class: \"vxe-input--date-\".concat(datePanelType, \"-view\"),\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    h('tbody', monthDatas.map(function (rows) {\n                        return h('tr', rows.map(function (item) {\n                            return h('td', {\n                                class: {\n                                    'is--prev': item.isPrev,\n                                    'is--current': item.isCurrent,\n                                    'is--now': item.isNow,\n                                    'is--next': item.isNext,\n                                    'is--disabled': isDateDisabled(item),\n                                    'is--selected': multiple ? dateListValue.some(function (val) { return XEUtils.isDateSame(val, item.date, matchFormat); }) : XEUtils.isDateSame(dateValue, item.date, matchFormat),\n                                    'is--hover': XEUtils.isDateSame(datePanelValue, item.date, matchFormat)\n                                },\n                                onClick: function () { return dateSelectEvent(item); },\n                                onMouseenter: function () { return dateMouseenterEvent(item); }\n                            }, renderDateLabel(item, GlobalConfig.i18n(\"vxe.input.date.months.m\".concat(item.month))));\n                        }));\n                    }))\n                ])\n            ];\n        };\n        var renderDateQuarterTable = function () {\n            var multiple = props.multiple;\n            var datePanelType = reactData.datePanelType, datePanelValue = reactData.datePanelValue;\n            var dateValue = computeDateValue.value;\n            var quarterDatas = computeQuarterDatas.value;\n            var dateListValue = computeDateListValue.value;\n            var matchFormat = 'yyyyq';\n            return [\n                h('table', {\n                    class: \"vxe-input--date-\".concat(datePanelType, \"-view\"),\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    h('tbody', quarterDatas.map(function (rows) {\n                        return h('tr', rows.map(function (item) {\n                            return h('td', {\n                                class: {\n                                    'is--prev': item.isPrev,\n                                    'is--current': item.isCurrent,\n                                    'is--now': item.isNow,\n                                    'is--next': item.isNext,\n                                    'is--disabled': isDateDisabled(item),\n                                    'is--selected': multiple ? dateListValue.some(function (val) { return XEUtils.isDateSame(val, item.date, matchFormat); }) : XEUtils.isDateSame(dateValue, item.date, matchFormat),\n                                    'is--hover': XEUtils.isDateSame(datePanelValue, item.date, matchFormat)\n                                },\n                                onClick: function () { return dateSelectEvent(item); },\n                                onMouseenter: function () { return dateMouseenterEvent(item); }\n                            }, renderDateLabel(item, GlobalConfig.i18n(\"vxe.input.date.quarters.q\".concat(item.quarter))));\n                        }));\n                    }))\n                ])\n            ];\n        };\n        var renderDateYearTable = function () {\n            var multiple = props.multiple;\n            var datePanelType = reactData.datePanelType, datePanelValue = reactData.datePanelValue;\n            var dateValue = computeDateValue.value;\n            var yearDatas = computeYearDatas.value;\n            var dateListValue = computeDateListValue.value;\n            var matchFormat = 'yyyy';\n            return [\n                h('table', {\n                    class: \"vxe-input--date-\".concat(datePanelType, \"-view\"),\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    h('tbody', yearDatas.map(function (rows) {\n                        return h('tr', rows.map(function (item) {\n                            return h('td', {\n                                class: {\n                                    'is--prev': item.isPrev,\n                                    'is--current': item.isCurrent,\n                                    'is--now': item.isNow,\n                                    'is--next': item.isNext,\n                                    'is--disabled': isDateDisabled(item),\n                                    'is--selected': multiple ? dateListValue.some(function (val) { return XEUtils.isDateSame(val, item.date, matchFormat); }) : XEUtils.isDateSame(dateValue, item.date, matchFormat),\n                                    'is--hover': XEUtils.isDateSame(datePanelValue, item.date, matchFormat)\n                                },\n                                onClick: function () { return dateSelectEvent(item); },\n                                onMouseenter: function () { return dateMouseenterEvent(item); }\n                            }, renderDateLabel(item, item.year));\n                        }));\n                    }))\n                ])\n            ];\n        };\n        var renderDateTable = function () {\n            var datePanelType = reactData.datePanelType;\n            switch (datePanelType) {\n                case 'week':\n                    return renderDateWeekTable();\n                case 'month':\n                    return renderDateMonthTable();\n                case 'quarter':\n                    return renderDateQuarterTable();\n                case 'year':\n                    return renderDateYearTable();\n            }\n            return renderDateDayTable();\n        };\n        var renderDatePanel = function () {\n            var multiple = props.multiple;\n            var datePanelType = reactData.datePanelType;\n            var isDisabledPrevDateBtn = computeIsDisabledPrevDateBtn.value;\n            var isDisabledNextDateBtn = computeIsDisabledNextDateBtn.value;\n            var selectDatePanelLabel = computeSelectDatePanelLabel.value;\n            return [\n                h('div', {\n                    class: 'vxe-input--date-picker-header'\n                }, [\n                    h('div', {\n                        class: 'vxe-input--date-picker-type-wrapper'\n                    }, [\n                        datePanelType === 'year' ? h('span', {\n                            class: 'vxe-input--date-picker-label'\n                        }, selectDatePanelLabel) : h('span', {\n                            class: 'vxe-input--date-picker-btn',\n                            onClick: dateToggleTypeEvent\n                        }, selectDatePanelLabel)\n                    ]),\n                    h('div', {\n                        class: 'vxe-input--date-picker-btn-wrapper'\n                    }, [\n                        h('span', {\n                            class: ['vxe-input--date-picker-btn vxe-input--date-picker-prev-btn', {\n                                    'is--disabled': isDisabledPrevDateBtn\n                                }],\n                            onClick: datePrevEvent\n                        }, [\n                            h('i', {\n                                class: 'vxe-icon-caret-left'\n                            })\n                        ]),\n                        h('span', {\n                            class: 'vxe-input--date-picker-btn vxe-input--date-picker-current-btn',\n                            onClick: dateTodayMonthEvent\n                        }, [\n                            h('i', {\n                                class: 'vxe-icon-dot'\n                            })\n                        ]),\n                        h('span', {\n                            class: ['vxe-input--date-picker-btn vxe-input--date-picker-next-btn', {\n                                    'is--disabled': isDisabledNextDateBtn\n                                }],\n                            onClick: dateNextEvent\n                        }, [\n                            h('i', {\n                                class: 'vxe-icon-caret-right'\n                            })\n                        ]),\n                        multiple && computeSupportMultiples.value ? h('span', {\n                            class: 'vxe-input--date-picker-btn vxe-input--date-picker-confirm-btn'\n                        }, [\n                            h('button', {\n                                class: 'vxe-input--date-picker-confirm',\n                                type: 'button',\n                                onClick: dateConfirmEvent\n                            }, GlobalConfig.i18n('vxe.button.confirm'))\n                        ]) : null\n                    ])\n                ]),\n                h('div', {\n                    class: 'vxe-input--date-picker-body'\n                }, renderDateTable())\n            ];\n        };\n        var renderTimePanel = function () {\n            var datetimePanelValue = reactData.datetimePanelValue;\n            var dateTimeLabel = computeDateTimeLabel.value;\n            var hourList = computeHourList.value;\n            var minuteList = computeMinuteList.value;\n            var secondList = computeSecondList.value;\n            return [\n                h('div', {\n                    class: 'vxe-input--time-picker-header'\n                }, [\n                    h('span', {\n                        class: 'vxe-input--time-picker-title'\n                    }, dateTimeLabel),\n                    h('button', {\n                        class: 'vxe-input--time-picker-confirm',\n                        type: 'button',\n                        onClick: dateConfirmEvent\n                    }, GlobalConfig.i18n('vxe.button.confirm'))\n                ]),\n                h('div', {\n                    ref: refInputTimeBody,\n                    class: 'vxe-input--time-picker-body'\n                }, [\n                    h('ul', {\n                        class: 'vxe-input--time-picker-hour-list'\n                    }, hourList.map(function (item, index) {\n                        return h('li', {\n                            key: index,\n                            class: {\n                                'is--selected': datetimePanelValue && datetimePanelValue.getHours() === item.value\n                            },\n                            onClick: function (evnt) { return dateHourEvent(evnt, item); }\n                        }, item.label);\n                    })),\n                    h('ul', {\n                        class: 'vxe-input--time-picker-minute-list'\n                    }, minuteList.map(function (item, index) {\n                        return h('li', {\n                            key: index,\n                            class: {\n                                'is--selected': datetimePanelValue && datetimePanelValue.getMinutes() === item.value\n                            },\n                            onClick: function (evnt) { return dateMinuteEvent(evnt, item); }\n                        }, item.label);\n                    })),\n                    h('ul', {\n                        class: 'vxe-input--time-picker-second-list'\n                    }, secondList.map(function (item, index) {\n                        return h('li', {\n                            key: index,\n                            class: {\n                                'is--selected': datetimePanelValue && datetimePanelValue.getSeconds() === item.value\n                            },\n                            onClick: function (evnt) { return dateSecondEvent(evnt, item); }\n                        }, item.label);\n                    }))\n                ])\n            ];\n        };\n        var renderPanel = function () {\n            var _a;\n            var type = props.type, transfer = props.transfer;\n            var inited = reactData.inited, animatVisible = reactData.animatVisible, visiblePanel = reactData.visiblePanel, panelPlacement = reactData.panelPlacement, panelStyle = reactData.panelStyle;\n            var vSize = computeSize.value;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var renders = [];\n            if (isDatePickerType) {\n                if (type === 'datetime') {\n                    renders.push(h('div', {\n                        class: 'vxe-input--panel-layout-wrapper'\n                    }, [\n                        h('div', {\n                            class: 'vxe-input--panel-left-wrapper'\n                        }, renderDatePanel()),\n                        h('div', {\n                            class: 'vxe-input--panel-right-wrapper'\n                        }, renderTimePanel())\n                    ]));\n                }\n                else if (type === 'time') {\n                    renders.push(h('div', {\n                        class: 'vxe-input--panel-wrapper'\n                    }, renderTimePanel()));\n                }\n                else {\n                    renders.push(h('div', {\n                        class: 'vxe-input--panel-wrapper'\n                    }, renderDatePanel()));\n                }\n                return h(Teleport, {\n                    to: 'body',\n                    disabled: transfer ? !inited : true\n                }, [\n                    h('div', {\n                        ref: refInputPanel,\n                        class: ['vxe-table--ignore-clear vxe-input--panel', \"type--\".concat(type), (_a = {},\n                                _a[\"size--\".concat(vSize)] = vSize,\n                                _a['is--transfer'] = transfer,\n                                _a['animat--leave'] = animatVisible,\n                                _a['animat--enter'] = visiblePanel,\n                                _a)],\n                        placement: panelPlacement,\n                        style: panelStyle\n                    }, renders)\n                ]);\n            }\n            return null;\n        };\n        var renderNumberIcon = function () {\n            var isDisabledAddNumber = computeIsDisabledAddNumber.value;\n            var isDisabledSubtractNumber = computeIsDisabledSubtractNumber.value;\n            return h('span', {\n                class: 'vxe-input--number-suffix'\n            }, [\n                h('span', {\n                    class: ['vxe-input--number-prev is--prev', {\n                            'is--disabled': isDisabledAddNumber\n                        }],\n                    onMousedown: numberMousedownEvent,\n                    onMouseup: numberStopDown,\n                    onMouseleave: numberStopDown\n                }, [\n                    h('i', {\n                        class: ['vxe-input--number-prev-icon', GlobalConfig.icon.INPUT_PREV_NUM]\n                    })\n                ]),\n                h('span', {\n                    class: ['vxe-input--number-next is--next', {\n                            'is--disabled': isDisabledSubtractNumber\n                        }],\n                    onMousedown: numberMousedownEvent,\n                    onMouseup: numberStopDown,\n                    onMouseleave: numberStopDown\n                }, [\n                    h('i', {\n                        class: ['vxe-input--number-next-icon', GlobalConfig.icon.INPUT_NEXT_NUM]\n                    })\n                ])\n            ]);\n        };\n        var renderDatePickerIcon = function () {\n            return h('span', {\n                class: 'vxe-input--date-picker-suffix',\n                onClick: datePickerOpenEvent\n            }, [\n                h('i', {\n                    class: ['vxe-input--date-picker-icon', GlobalConfig.icon.INPUT_DATE]\n                })\n            ]);\n        };\n        var renderSearchIcon = function () {\n            return h('span', {\n                class: 'vxe-input--search-suffix',\n                onClick: searchEvent\n            }, [\n                h('i', {\n                    class: ['vxe-input--search-icon', GlobalConfig.icon.INPUT_SEARCH]\n                })\n            ]);\n        };\n        var renderPasswordIcon = function () {\n            var showPwd = reactData.showPwd;\n            return h('span', {\n                class: 'vxe-input--password-suffix',\n                onClick: passwordToggleEvent\n            }, [\n                h('i', {\n                    class: ['vxe-input--password-icon', showPwd ? GlobalConfig.icon.INPUT_SHOW_PWD : GlobalConfig.icon.INPUT_PWD]\n                })\n            ]);\n        };\n        var rendePrefixIcon = function () {\n            var prefixIcon = props.prefixIcon;\n            var prefixSlot = slots.prefix;\n            var icons = [];\n            if (prefixSlot) {\n                icons.push(h('span', {\n                    class: 'vxe-input--prefix-icon'\n                }, prefixSlot({})));\n            }\n            else if (prefixIcon) {\n                icons.push(h('i', {\n                    class: ['vxe-input--prefix-icon', prefixIcon]\n                }));\n            }\n            return icons.length ? h('span', {\n                class: 'vxe-input--prefix',\n                onClick: clickPrefixEvent\n            }, icons) : null;\n        };\n        var renderSuffixIcon = function () {\n            var disabled = props.disabled, suffixIcon = props.suffixIcon;\n            var inputValue = reactData.inputValue;\n            var suffixSlot = slots.suffix;\n            var isClearable = computeIsClearable.value;\n            var icons = [];\n            if (suffixSlot) {\n                icons.push(h('span', {\n                    class: 'vxe-input--suffix-icon'\n                }, suffixSlot({})));\n            }\n            else if (suffixIcon) {\n                icons.push(h('i', {\n                    class: ['vxe-input--suffix-icon', suffixIcon]\n                }));\n            }\n            if (isClearable) {\n                icons.push(h('i', {\n                    class: ['vxe-input--clear-icon', GlobalConfig.icon.INPUT_CLEAR]\n                }));\n            }\n            return icons.length ? h('span', {\n                class: ['vxe-input--suffix', {\n                        'is--clear': isClearable && !disabled && !(inputValue === '' || XEUtils.eqNull(inputValue))\n                    }],\n                onClick: clickSuffixEvent\n            }, icons) : null;\n        };\n        var renderExtraSuffixIcon = function () {\n            var controls = props.controls;\n            var isNumType = computeIsNumType.value;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var isPawdType = computeIsPawdType.value;\n            var isSearchType = computeIsSearchType.value;\n            var icons;\n            if (isPawdType) {\n                icons = renderPasswordIcon();\n            }\n            else if (isNumType) {\n                if (controls) {\n                    icons = renderNumberIcon();\n                }\n            }\n            else if (isDatePickerType) {\n                icons = renderDatePickerIcon();\n            }\n            else if (isSearchType) {\n                icons = renderSearchIcon();\n            }\n            return icons ? h('span', {\n                class: 'vxe-input--extra-suffix'\n            }, [icons]) : null;\n        };\n        inputMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $input: $xeinput, $event: evnt }, params));\n            },\n            focus: function () {\n                var inputElem = refInputTarget.value;\n                reactData.isActivated = true;\n                inputElem.focus();\n                return nextTick();\n            },\n            blur: function () {\n                var inputElem = refInputTarget.value;\n                inputElem.blur();\n                reactData.isActivated = false;\n                return nextTick();\n            },\n            select: function () {\n                var inputElem = refInputTarget.value;\n                inputElem.select();\n                reactData.isActivated = false;\n                return nextTick();\n            },\n            showPanel: showPanel,\n            hidePanel: hidePanel,\n            updatePlacement: updatePlacement\n        };\n        Object.assign($xeinput, inputMethods);\n        watch(function () { return props.modelValue; }, function (val) {\n            reactData.inputValue = val;\n            changeValue();\n        });\n        watch(function () { return props.type; }, function () {\n            // 切换类型是重置内置变量\n            Object.assign(reactData, {\n                inputValue: props.modelValue,\n                datetimePanelValue: null,\n                datePanelValue: null,\n                datePanelLabel: '',\n                datePanelType: 'day',\n                selectMonth: null,\n                currentDate: null\n            });\n            initValue();\n        });\n        watch(computeDateLabelFormat, function () {\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                dateParseValue(reactData.datePanelValue);\n                reactData.inputValue = props.multiple ? computeDateMultipleLabel.value : reactData.datePanelLabel;\n            }\n        });\n        nextTick(function () {\n            GlobalEvent.on($xeinput, 'mousewheel', handleGlobalMousewheelEvent);\n            GlobalEvent.on($xeinput, 'mousedown', handleGlobalMousedownEvent);\n            GlobalEvent.on($xeinput, 'keydown', handleGlobalKeydownEvent);\n            GlobalEvent.on($xeinput, 'blur', handleGlobalBlurEvent);\n        });\n        onUnmounted(function () {\n            numberStopDown();\n            GlobalEvent.off($xeinput, 'mousewheel');\n            GlobalEvent.off($xeinput, 'mousedown');\n            GlobalEvent.off($xeinput, 'keydown');\n            GlobalEvent.off($xeinput, 'blur');\n        });\n        initValue();\n        var renderVN = function () {\n            var _a;\n            var className = props.className, controls = props.controls, type = props.type, align = props.align, showWordCount = props.showWordCount, countMethod = props.countMethod, name = props.name, disabled = props.disabled, readonly = props.readonly, autocomplete = props.autocomplete;\n            var inputValue = reactData.inputValue, visiblePanel = reactData.visiblePanel, isActivated = reactData.isActivated;\n            var vSize = computeSize.value;\n            var isCountError = computeIsCountError.value;\n            var inputCount = computeInputCount.value;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var inpReadonly = computeInpReadonly.value;\n            var inpMaxlength = computeInpMaxlength.value;\n            var inputType = computeInputType.value;\n            var inpPlaceholder = computeInpPlaceholder.value;\n            var childs = [];\n            var prefix = rendePrefixIcon();\n            var suffix = renderSuffixIcon();\n            // 前缀图标\n            if (prefix) {\n                childs.push(prefix);\n            }\n            // 输入框\n            childs.push(h('input', {\n                ref: refInputTarget,\n                class: 'vxe-input--inner',\n                value: inputValue,\n                name: name,\n                type: inputType,\n                placeholder: inpPlaceholder,\n                maxlength: inpMaxlength,\n                readonly: inpReadonly,\n                disabled: disabled,\n                autocomplete: autocomplete,\n                onKeydown: keydownEvent,\n                onKeyup: keyupEvent,\n                onWheel: wheelEvent,\n                onClick: clickEvent,\n                onInput: inputEvent,\n                onChange: changeEvent,\n                onFocus: focusEvent,\n                onBlur: blurEvent\n            }));\n            // 后缀图标\n            if (suffix) {\n                childs.push(suffix);\n            }\n            // 特殊功能图标\n            childs.push(renderExtraSuffixIcon());\n            // 面板容器\n            if (isDatePickerType) {\n                childs.push(renderPanel());\n            }\n            var isWordCount = false;\n            // 统计字数\n            if (showWordCount && ['text', 'search'].includes(type)) {\n                isWordCount = true;\n                childs.push(h('span', {\n                    class: ['vxe-input--count', {\n                            'is--error': isCountError\n                        }]\n                }, countMethod ? \"\".concat(countMethod({ value: inputValue })) : \"\".concat(inputCount).concat(inpMaxlength ? \"/\".concat(inpMaxlength) : '')));\n            }\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-input', \"type--\".concat(type), className, (_a = {},\n                        _a[\"size--\".concat(vSize)] = vSize,\n                        _a[\"is--\".concat(align)] = align,\n                        _a['is--controls'] = controls,\n                        _a['is--prefix'] = !!prefix,\n                        _a['is--suffix'] = !!suffix,\n                        _a['is--readonly'] = readonly,\n                        _a['is--visivle'] = visiblePanel,\n                        _a['is--count'] = isWordCount,\n                        _a['is--disabled'] = disabled,\n                        _a['is--active'] = isActivated,\n                        _a)]\n            }, childs);\n        };\n        $xeinput.renderVN = renderVN;\n        return $xeinput;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767743,
      "end": 1714699767786,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767786,
      "end": 1714699767786,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767786,
      "end": 1714699767786,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767786,
      "end": 1714699767786,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767786,
      "end": 1714699767786,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767786,
      "end": 1714699767786,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767786,
      "end": 1714699767786,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { defineComponent, h, Teleport, ref, computed, reactive, inject, nextTick, watch, onUnmounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { useSize } from '../../hooks/size';\nimport { getFuncText, getLastZIndex, nextZIndex } from '../../tools/utils';\nimport { hasClass, getAbsolutePos, getEventTargetNode } from '../../tools/dom';\nimport { GlobalEvent, hasEventKey, EVENT_KEYS } from '../../tools/event';\nimport { toStringTimeDate, getDateQuarter } from './date';\nimport { handleNumber, toFloatValueFixed } from './number';\nvar yearSize = 12;\nvar monthSize = 20;\nvar quarterSize = 8;\nexport default defineComponent({\n    name: 'VxeInput',\n    props: {\n        modelValue: [String, Number, Date],\n        immediate: { type: Boolean, default: true },\n        name: String,\n        type: { type: String, default: 'text' },\n        clearable: { type: Boolean, default: function () { return GlobalConfig.input.clearable; } },\n        readonly: Boolean,\n        disabled: Boolean,\n        placeholder: {\n            type: String,\n            default: function () { return XEUtils.eqNull(GlobalConfig.input.placeholder) ? GlobalConfig.i18n('vxe.base.pleaseInput') : GlobalConfig.input.placeholder; }\n        },\n        maxlength: [String, Number],\n        autocomplete: { type: String, default: 'off' },\n        align: String,\n        form: String,\n        className: String,\n        size: { type: String, default: function () { return GlobalConfig.input.size || GlobalConfig.size; } },\n        multiple: Boolean,\n        // text\n        showWordCount: Boolean,\n        countMethod: Function,\n        // number、integer、float\n        min: { type: [String, Number], default: null },\n        max: { type: [String, Number], default: null },\n        step: [String, Number],\n        exponential: { type: Boolean, default: function () { return GlobalConfig.input.exponential; } },\n        // number、integer、float、password\n        controls: { type: Boolean, default: function () { return GlobalConfig.input.controls; } },\n        // float\n        digits: { type: [String, Number], default: function () { return GlobalConfig.input.digits; } },\n        // date、week、month、quarter、year\n        startDate: { type: [String, Number, Date], default: function () { return GlobalConfig.input.startDate; } },\n        endDate: { type: [String, Number, Date], default: function () { return GlobalConfig.input.endDate; } },\n        minDate: [String, Number, Date],\n        maxDate: [String, Number, Date],\n        // 已废弃 startWeek，被 startDay 替换\n        startWeek: Number,\n        startDay: { type: [String, Number], default: function () { return GlobalConfig.input.startDay; } },\n        labelFormat: { type: String, default: function () { return GlobalConfig.input.labelFormat; } },\n        valueFormat: { type: String, default: function () { return GlobalConfig.input.valueFormat; } },\n        editable: { type: Boolean, default: true },\n        festivalMethod: { type: Function, default: function () { return GlobalConfig.input.festivalMethod; } },\n        disabledMethod: { type: Function, default: function () { return GlobalConfig.input.disabledMethod; } },\n        // week\n        selectDay: { type: [String, Number], default: function () { return GlobalConfig.input.selectDay; } },\n        prefixIcon: String,\n        suffixIcon: String,\n        placement: String,\n        transfer: { type: Boolean, default: function () { return GlobalConfig.input.transfer; } }\n    },\n    emits: [\n        'update:modelValue',\n        'input',\n        'change',\n        'keydown',\n        'keyup',\n        'wheel',\n        'click',\n        'focus',\n        'blur',\n        'clear',\n        'search-click',\n        'toggle-visible',\n        'prev-number',\n        'next-number',\n        'prefix-click',\n        'suffix-click',\n        'date-prev',\n        'date-today',\n        'date-next'\n    ],\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var $xeform = inject('$xeform', null);\n        var $xeformiteminfo = inject('$xeformiteminfo', null);\n        var xID = XEUtils.uniqueId();\n        var computeSize = useSize(props);\n        var reactData = reactive({\n            inited: false,\n            panelIndex: 0,\n            showPwd: false,\n            visiblePanel: false,\n            animatVisible: false,\n            panelStyle: null,\n            panelPlacement: '',\n            isActivated: false,\n            inputValue: props.modelValue,\n            datetimePanelValue: null,\n            datePanelValue: null,\n            datePanelLabel: '',\n            datePanelType: 'day',\n            selectMonth: null,\n            currentDate: null\n        });\n        var refElem = ref();\n        var refInputTarget = ref();\n        var refInputPanel = ref();\n        var refInputTimeBody = ref();\n        var refMaps = {\n            refElem: refElem,\n            refInput: refInputTarget\n        };\n        var $xeinput = {\n            xID: xID,\n            props: props,\n            context: context,\n            reactData: reactData,\n            getRefMaps: function () { return refMaps; }\n        };\n        var inputMethods = {};\n        var parseDate = function (value, format) {\n            var type = props.type;\n            if (type === 'time') {\n                return toStringTimeDate(value);\n            }\n            return XEUtils.toStringDate(value, format);\n        };\n        var computeIsDateTimeType = computed(function () {\n            var type = props.type;\n            return type === 'time' || type === 'datetime';\n        });\n        var computeIsNumType = computed(function () {\n            return ['number', 'integer', 'float'].indexOf(props.type) > -1;\n        });\n        var computeInputCount = computed(function () {\n            return XEUtils.getSize(reactData.inputValue);\n        });\n        var computeIsCountError = computed(function () {\n            var inputCount = computeInputCount.value;\n            return props.maxlength && inputCount > XEUtils.toNumber(props.maxlength);\n        });\n        var computeIsDatePickerType = computed(function () {\n            var isDateTimeType = computeIsDateTimeType.value;\n            return isDateTimeType || ['date', 'week', 'month', 'quarter', 'year'].indexOf(props.type) > -1;\n        });\n        var computeIsPawdType = computed(function () {\n            return props.type === 'password';\n        });\n        var computeIsSearchType = computed(function () {\n            return props.type === 'search';\n        });\n        var computeDigitsValue = computed(function () {\n            return XEUtils.toInteger(props.digits) || 1;\n        });\n        var computeStepValue = computed(function () {\n            var type = props.type;\n            var digitsValue = computeDigitsValue.value;\n            var step = props.step;\n            if (type === 'integer') {\n                return XEUtils.toInteger(step) || 1;\n            }\n            else if (type === 'float') {\n                return XEUtils.toNumber(step) || (1 / Math.pow(10, digitsValue));\n            }\n            return XEUtils.toNumber(step) || 1;\n        });\n        var computeIsClearable = computed(function () {\n            var type = props.type;\n            var isNumType = computeIsNumType.value;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var isPawdType = computeIsPawdType.value;\n            return props.clearable && (isPawdType || isNumType || isDatePickerType || type === 'text' || type === 'search');\n        });\n        var computeDateStartTime = computed(function () {\n            return props.startDate ? XEUtils.toStringDate(props.startDate) : null;\n        });\n        var computeDateEndTime = computed(function () {\n            return props.endDate ? XEUtils.toStringDate(props.endDate) : null;\n        });\n        var computeSupportMultiples = computed(function () {\n            return ['date', 'week', 'month', 'quarter', 'year'].includes(props.type);\n        });\n        var computeDateListValue = computed(function () {\n            var modelValue = props.modelValue, multiple = props.multiple;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var dateValueFormat = computeDateValueFormat.value;\n            if (multiple && modelValue && isDatePickerType) {\n                return XEUtils.toValueString(modelValue).split(',').map(function (item) {\n                    var date = parseDate(item, dateValueFormat);\n                    if (XEUtils.isValidDate(date)) {\n                        return date;\n                    }\n                    return null;\n                });\n            }\n            return [];\n        });\n        var computeDateMultipleValue = computed(function () {\n            var dateListValue = computeDateListValue.value;\n            var dateValueFormat = computeDateValueFormat.value;\n            return dateListValue.map(function (date) { return XEUtils.toDateString(date, dateValueFormat); });\n        });\n        var computeDateMultipleLabel = computed(function () {\n            var dateListValue = computeDateListValue.value;\n            var dateLabelFormat = computeDateLabelFormat.value;\n            return dateListValue.map(function (date) { return XEUtils.toDateString(date, dateLabelFormat); }).join(', ');\n        });\n        var computeDateValueFormat = computed(function () {\n            var type = props.type;\n            return type === 'time' ? 'HH:mm:ss' : (props.valueFormat || (type === 'datetime' ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'));\n        });\n        var computeDateValue = computed(function () {\n            var modelValue = props.modelValue;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var dateValueFormat = computeDateValueFormat.value;\n            var val = null;\n            if (modelValue && isDatePickerType) {\n                var date = parseDate(modelValue, dateValueFormat);\n                if (XEUtils.isValidDate(date)) {\n                    val = date;\n                }\n            }\n            return val;\n        });\n        var computeIsDisabledPrevDateBtn = computed(function () {\n            var dateStartTime = computeDateStartTime.value;\n            var selectMonth = reactData.selectMonth;\n            if (selectMonth && dateStartTime) {\n                return selectMonth <= dateStartTime;\n            }\n            return false;\n        });\n        var computeIsDisabledNextDateBtn = computed(function () {\n            var dateEndTime = computeDateEndTime.value;\n            var selectMonth = reactData.selectMonth;\n            if (selectMonth && dateEndTime) {\n                return selectMonth >= dateEndTime;\n            }\n            return false;\n        });\n        var computeDateTimeLabel = computed(function () {\n            var datetimePanelValue = reactData.datetimePanelValue;\n            if (datetimePanelValue) {\n                return XEUtils.toDateString(datetimePanelValue, 'HH:mm:ss');\n            }\n            return '';\n        });\n        var computeDateHMSTime = computed(function () {\n            var dateValue = computeDateValue.value;\n            var isDateTimeType = computeIsDateTimeType.value;\n            return dateValue && isDateTimeType ? (dateValue.getHours() * 3600 + dateValue.getMinutes() * 60 + dateValue.getSeconds()) * 1000 : 0;\n        });\n        var computeDateLabelFormat = computed(function () {\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                return props.labelFormat || GlobalConfig.i18n(\"vxe.input.date.labelFormat.\".concat(props.type));\n            }\n            return null;\n        });\n        var computeYearList = computed(function () {\n            var selectMonth = reactData.selectMonth, currentDate = reactData.currentDate;\n            var years = [];\n            if (selectMonth && currentDate) {\n                var currFullYear = currentDate.getFullYear();\n                var selectFullYear = selectMonth.getFullYear();\n                var startYearDate = new Date(selectFullYear - selectFullYear % yearSize, 0, 1);\n                for (var index = -4; index < yearSize + 4; index++) {\n                    var date = XEUtils.getWhatYear(startYearDate, index, 'first');\n                    var itemFullYear = date.getFullYear();\n                    years.push({\n                        date: date,\n                        isCurrent: true,\n                        isPrev: index < 0,\n                        isNow: currFullYear === itemFullYear,\n                        isNext: index >= yearSize,\n                        year: itemFullYear\n                    });\n                }\n            }\n            return years;\n        });\n        var computeSelectDatePanelLabel = computed(function () {\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                var datePanelType = reactData.datePanelType, selectMonth = reactData.selectMonth;\n                var yearList = computeYearList.value;\n                var year = '';\n                var month = void 0;\n                if (selectMonth) {\n                    year = selectMonth.getFullYear();\n                    month = selectMonth.getMonth() + 1;\n                }\n                if (datePanelType === 'quarter') {\n                    return GlobalConfig.i18n('vxe.input.date.quarterLabel', [year]);\n                }\n                else if (datePanelType === 'month') {\n                    return GlobalConfig.i18n('vxe.input.date.monthLabel', [year]);\n                }\n                else if (datePanelType === 'year') {\n                    return yearList.length ? \"\".concat(yearList[0].year, \" - \").concat(yearList[yearList.length - 1].year) : '';\n                }\n                return GlobalConfig.i18n('vxe.input.date.dayLabel', [year, month ? GlobalConfig.i18n(\"vxe.input.date.m\".concat(month)) : '-']);\n            }\n            return '';\n        });\n        var computeFirstDayOfWeek = computed(function () {\n            var startDay = props.startDay, startWeek = props.startWeek;\n            return XEUtils.toNumber(XEUtils.isNumber(startDay) || XEUtils.isString(startDay) ? startDay : startWeek);\n        });\n        var computeWeekDatas = computed(function () {\n            var weeks = [];\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                var sWeek = computeFirstDayOfWeek.value;\n                weeks.push(sWeek);\n                for (var index = 0; index < 6; index++) {\n                    if (sWeek >= 6) {\n                        sWeek = 0;\n                    }\n                    else {\n                        sWeek++;\n                    }\n                    weeks.push(sWeek);\n                }\n            }\n            return weeks;\n        });\n        var computeDateHeaders = computed(function () {\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                var weekDatas = computeWeekDatas.value;\n                return weekDatas.map(function (day) {\n                    return {\n                        value: day,\n                        label: GlobalConfig.i18n(\"vxe.input.date.weeks.w\".concat(day))\n                    };\n                });\n            }\n            return [];\n        });\n        var computeWeekHeaders = computed(function () {\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                var dateHeaders = computeDateHeaders.value;\n                return [{ label: GlobalConfig.i18n('vxe.input.date.weeks.w') }].concat(dateHeaders);\n            }\n            return [];\n        });\n        var computeYearDatas = computed(function () {\n            var yearList = computeYearList.value;\n            return XEUtils.chunk(yearList, 4);\n        });\n        var computeQuarterList = computed(function () {\n            var selectMonth = reactData.selectMonth, currentDate = reactData.currentDate;\n            var quarters = [];\n            if (selectMonth && currentDate) {\n                var currFullYear = currentDate.getFullYear();\n                var currQuarter = getDateQuarter(currentDate);\n                var firstYear = XEUtils.getWhatYear(selectMonth, 0, 'first');\n                var selFullYear = firstYear.getFullYear();\n                for (var index = -2; index < quarterSize - 2; index++) {\n                    var date = XEUtils.getWhatQuarter(firstYear, index);\n                    var itemFullYear = date.getFullYear();\n                    var itemQuarter = getDateQuarter(date);\n                    var isPrev = itemFullYear < selFullYear;\n                    quarters.push({\n                        date: date,\n                        isPrev: isPrev,\n                        isCurrent: itemFullYear === selFullYear,\n                        isNow: itemFullYear === currFullYear && itemQuarter === currQuarter,\n                        isNext: !isPrev && itemFullYear > selFullYear,\n                        quarter: itemQuarter\n                    });\n                }\n            }\n            return quarters;\n        });\n        var computeQuarterDatas = computed(function () {\n            var quarterList = computeQuarterList.value;\n            return XEUtils.chunk(quarterList, 2);\n        });\n        var computeMonthList = computed(function () {\n            var selectMonth = reactData.selectMonth, currentDate = reactData.currentDate;\n            var months = [];\n            if (selectMonth && currentDate) {\n                var currFullYear = currentDate.getFullYear();\n                var currMonth = currentDate.getMonth();\n                var selFullYear = XEUtils.getWhatYear(selectMonth, 0, 'first').getFullYear();\n                for (var index = -4; index < monthSize - 4; index++) {\n                    var date = XEUtils.getWhatYear(selectMonth, 0, index);\n                    var itemFullYear = date.getFullYear();\n                    var itemMonth = date.getMonth();\n                    var isPrev = itemFullYear < selFullYear;\n                    months.push({\n                        date: date,\n                        isPrev: isPrev,\n                        isCurrent: itemFullYear === selFullYear,\n                        isNow: itemFullYear === currFullYear && itemMonth === currMonth,\n                        isNext: !isPrev && itemFullYear > selFullYear,\n                        month: itemMonth\n                    });\n                }\n            }\n            return months;\n        });\n        var computeMonthDatas = computed(function () {\n            var monthList = computeMonthList.value;\n            return XEUtils.chunk(monthList, 4);\n        });\n        var computeDayList = computed(function () {\n            var selectMonth = reactData.selectMonth, currentDate = reactData.currentDate;\n            var days = [];\n            if (selectMonth && currentDate) {\n                var dateHMSTime = computeDateHMSTime.value;\n                var weekDatas = computeWeekDatas.value;\n                var currFullYear = currentDate.getFullYear();\n                var currMonth = currentDate.getMonth();\n                var currDate = currentDate.getDate();\n                var selFullYear = selectMonth.getFullYear();\n                var selMonth = selectMonth.getMonth();\n                var selDay = selectMonth.getDay();\n                var prevOffsetDate = -weekDatas.indexOf(selDay);\n                var startDayDate = new Date(XEUtils.getWhatDay(selectMonth, prevOffsetDate).getTime() + dateHMSTime);\n                for (var index = 0; index < 42; index++) {\n                    var date = XEUtils.getWhatDay(startDayDate, index);\n                    var itemFullYear = date.getFullYear();\n                    var itemMonth = date.getMonth();\n                    var itemDate = date.getDate();\n                    var isPrev = date < selectMonth;\n                    days.push({\n                        date: date,\n                        isPrev: isPrev,\n                        isCurrent: itemFullYear === selFullYear && itemMonth === selMonth,\n                        isNow: itemFullYear === currFullYear && itemMonth === currMonth && itemDate === currDate,\n                        isNext: !isPrev && selMonth !== itemMonth,\n                        label: itemDate\n                    });\n                }\n            }\n            return days;\n        });\n        var computeDayDatas = computed(function () {\n            var dayList = computeDayList.value;\n            return XEUtils.chunk(dayList, 7);\n        });\n        var computeWeekDates = computed(function () {\n            var dayDatas = computeDayDatas.value;\n            var firstDayOfWeek = computeFirstDayOfWeek.value;\n            return dayDatas.map(function (list) {\n                var firstItem = list[0];\n                var item = {\n                    date: firstItem.date,\n                    isWeekNumber: true,\n                    isPrev: false,\n                    isCurrent: false,\n                    isNow: false,\n                    isNext: false,\n                    label: XEUtils.getYearWeek(firstItem.date, firstDayOfWeek)\n                };\n                return [item].concat(list);\n            });\n        });\n        var computeHourList = computed(function () {\n            var list = [];\n            var isDateTimeType = computeIsDateTimeType.value;\n            if (isDateTimeType) {\n                for (var index = 0; index < 24; index++) {\n                    list.push({\n                        value: index,\n                        label: ('' + index).padStart(2, '0')\n                    });\n                }\n            }\n            return list;\n        });\n        var computeMinuteList = computed(function () {\n            var list = [];\n            var isDateTimeType = computeIsDateTimeType.value;\n            if (isDateTimeType) {\n                for (var index = 0; index < 60; index++) {\n                    list.push({\n                        value: index,\n                        label: ('' + index).padStart(2, '0')\n                    });\n                }\n            }\n            return list;\n        });\n        var computeSecondList = computed(function () {\n            var minuteList = computeMinuteList.value;\n            return minuteList;\n        });\n        var computeInpReadonly = computed(function () {\n            var type = props.type, readonly = props.readonly, editable = props.editable, multiple = props.multiple;\n            return readonly || multiple || !editable || type === 'week' || type === 'quarter';\n        });\n        var computeInputType = computed(function () {\n            var type = props.type;\n            var showPwd = reactData.showPwd;\n            var isNumType = computeIsNumType.value;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var isPawdType = computeIsPawdType.value;\n            if (isDatePickerType || isNumType || (isPawdType && showPwd) || type === 'number') {\n                return 'text';\n            }\n            return type;\n        });\n        var computeInpPlaceholder = computed(function () {\n            var placeholder = props.placeholder;\n            if (placeholder) {\n                return getFuncText(placeholder);\n            }\n            return '';\n        });\n        var computeInpMaxlength = computed(function () {\n            var maxlength = props.maxlength;\n            var isNumType = computeIsNumType.value;\n            // 数值最大长度限制 16 位，包含小数\n            return isNumType && !XEUtils.toNumber(maxlength) ? 16 : maxlength;\n        });\n        var computeInpImmediate = computed(function () {\n            var type = props.type, immediate = props.immediate;\n            return immediate || !(type === 'text' || type === 'number' || type === 'integer' || type === 'float');\n        });\n        var computeNumValue = computed(function () {\n            var type = props.type;\n            var inputValue = reactData.inputValue;\n            var isNumType = computeIsNumType.value;\n            if (isNumType) {\n                return type === 'integer' ? XEUtils.toInteger(handleNumber(inputValue)) : XEUtils.toNumber(handleNumber(inputValue));\n            }\n            return 0;\n        });\n        var computeIsDisabledSubtractNumber = computed(function () {\n            var min = props.min;\n            var inputValue = reactData.inputValue;\n            var isNumType = computeIsNumType.value;\n            var numValue = computeNumValue.value;\n            // 当有值时再进行判断\n            if ((inputValue || inputValue === 0) && isNumType && min !== null) {\n                return numValue <= XEUtils.toNumber(min);\n            }\n            return false;\n        });\n        var computeIsDisabledAddNumber = computed(function () {\n            var max = props.max;\n            var inputValue = reactData.inputValue;\n            var isNumType = computeIsNumType.value;\n            var numValue = computeNumValue.value;\n            // 当有值时再进行判断\n            if ((inputValue || inputValue === 0) && isNumType && max !== null) {\n                return numValue >= XEUtils.toNumber(max);\n            }\n            return false;\n        });\n        var getNumberValue = function (val) {\n            var type = props.type, exponential = props.exponential;\n            var inpMaxlength = computeInpMaxlength.value;\n            var digitsValue = computeDigitsValue.value;\n            var restVal = (type === 'float' ? toFloatValueFixed(val, digitsValue) : XEUtils.toValueString(val));\n            if (exponential && (val === restVal || XEUtils.toValueString(val).toLowerCase() === XEUtils.toNumber(restVal).toExponential())) {\n                return val;\n            }\n            return restVal.slice(0, inpMaxlength);\n        };\n        var triggerEvent = function (evnt) {\n            var inputValue = reactData.inputValue;\n            inputMethods.dispatchEvent(evnt.type, { value: inputValue }, evnt);\n        };\n        var emitModel = function (value, evnt) {\n            reactData.inputValue = value;\n            emit('update:modelValue', value);\n            inputMethods.dispatchEvent('input', { value: value }, evnt);\n            if (XEUtils.toValueString(props.modelValue) !== value) {\n                inputMethods.dispatchEvent('change', { value: value }, evnt);\n                // 自动更新校验状态\n                if ($xeform && $xeformiteminfo) {\n                    $xeform.triggerItemEvent(evnt, $xeformiteminfo.itemConfig.field, value);\n                }\n            }\n        };\n        var emitInputEvent = function (value, evnt) {\n            var isDatePickerType = computeIsDatePickerType.value;\n            var inpImmediate = computeInpImmediate.value;\n            reactData.inputValue = value;\n            if (!isDatePickerType) {\n                if (inpImmediate) {\n                    emitModel(value, evnt);\n                }\n                else {\n                    inputMethods.dispatchEvent('input', { value: value }, evnt);\n                }\n            }\n        };\n        var inputEvent = function (evnt) {\n            var inputElem = evnt.target;\n            var value = inputElem.value;\n            emitInputEvent(value, evnt);\n        };\n        var changeEvent = function (evnt) {\n            var inpImmediate = computeInpImmediate.value;\n            if (!inpImmediate) {\n                triggerEvent(evnt);\n            }\n        };\n        var focusEvent = function (evnt) {\n            reactData.isActivated = true;\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                datePickerOpenEvent(evnt);\n            }\n            triggerEvent(evnt);\n        };\n        var clickPrefixEvent = function (evnt) {\n            var disabled = props.disabled;\n            if (!disabled) {\n                var inputValue = reactData.inputValue;\n                inputMethods.dispatchEvent('prefix-click', { value: inputValue }, evnt);\n            }\n        };\n        var hidePanelTimeout;\n        var hidePanel = function () {\n            return new Promise(function (resolve) {\n                reactData.visiblePanel = false;\n                hidePanelTimeout = window.setTimeout(function () {\n                    reactData.animatVisible = false;\n                    resolve();\n                }, 350);\n            });\n        };\n        var clearValueEvent = function (evnt, value) {\n            var type = props.type;\n            var isNumType = computeIsNumType.value;\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                hidePanel();\n            }\n            if (isNumType || ['text', 'search', 'password'].indexOf(type) > -1) {\n                focus();\n            }\n            inputMethods.dispatchEvent('clear', { value: value }, evnt);\n        };\n        var clickSuffixEvent = function (evnt) {\n            var disabled = props.disabled;\n            if (!disabled) {\n                if (hasClass(evnt.currentTarget, 'is--clear')) {\n                    emitModel('', evnt);\n                    clearValueEvent(evnt, '');\n                }\n                else {\n                    var inputValue = reactData.inputValue;\n                    inputMethods.dispatchEvent('suffix-click', { value: inputValue }, evnt);\n                }\n            }\n        };\n        var dateParseValue = function (value) {\n            var type = props.type;\n            var valueFormat = props.valueFormat;\n            var dateLabelFormat = computeDateLabelFormat.value;\n            var firstDayOfWeek = computeFirstDayOfWeek.value;\n            var dValue = null;\n            var dLabel = '';\n            if (value) {\n                dValue = parseDate(value, valueFormat);\n            }\n            if (XEUtils.isValidDate(dValue)) {\n                dLabel = XEUtils.toDateString(dValue, dateLabelFormat, { firstDay: firstDayOfWeek });\n                // 由于年份和第几周是冲突的行为，所以需要特殊处理，判断是否跨年\n                if (dateLabelFormat && type === 'week') {\n                    var firstWeekDate = XEUtils.getWhatWeek(dValue, 0, firstDayOfWeek, firstDayOfWeek);\n                    if (firstWeekDate.getFullYear() < dValue.getFullYear()) {\n                        var yyIndex = dateLabelFormat.indexOf('yyyy');\n                        if (yyIndex > -1) {\n                            var yyNum = Number(dLabel.substring(yyIndex, yyIndex + 4));\n                            if (yyNum && !isNaN(yyNum)) {\n                                dLabel = dLabel.replace(\"\".concat(yyNum), \"\".concat(yyNum - 1));\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                dValue = null;\n            }\n            reactData.datePanelValue = dValue;\n            reactData.datePanelLabel = dLabel;\n        };\n        /**\n         * 值变化时处理\n         */\n        var changeValue = function () {\n            var isDatePickerType = computeIsDatePickerType.value;\n            var inputValue = reactData.inputValue;\n            if (isDatePickerType) {\n                dateParseValue(inputValue);\n                reactData.inputValue = props.multiple ? computeDateMultipleLabel.value : reactData.datePanelLabel;\n            }\n        };\n        /**\n         * 检查初始值\n         */\n        var initValue = function () {\n            var type = props.type;\n            var inputValue = reactData.inputValue;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var digitsValue = computeDigitsValue.value;\n            if (isDatePickerType) {\n                changeValue();\n            }\n            else if (type === 'float') {\n                if (inputValue) {\n                    var validValue = toFloatValueFixed(inputValue, digitsValue);\n                    if (inputValue !== validValue) {\n                        emitModel(validValue, { type: 'init' });\n                    }\n                }\n            }\n        };\n        var vaildMaxNum = function (num) {\n            return props.max === null || XEUtils.toNumber(num) <= XEUtils.toNumber(props.max);\n        };\n        var vaildMinNum = function (num) {\n            return props.min === null || XEUtils.toNumber(num) >= XEUtils.toNumber(props.min);\n        };\n        var dateRevert = function () {\n            reactData.inputValue = props.multiple ? computeDateMultipleLabel.value : reactData.datePanelLabel;\n        };\n        var dateCheckMonth = function (date) {\n            var month = XEUtils.getWhatMonth(date, 0, 'first');\n            if (!XEUtils.isEqual(month, reactData.selectMonth)) {\n                reactData.selectMonth = month;\n            }\n        };\n        var dateChange = function (date) {\n            var modelValue = props.modelValue, multiple = props.multiple;\n            var datetimePanelValue = reactData.datetimePanelValue;\n            var isDateTimeType = computeIsDateTimeType.value;\n            var dateValueFormat = computeDateValueFormat.value;\n            var firstDayOfWeek = computeFirstDayOfWeek.value;\n            if (props.type === 'week') {\n                var sWeek = XEUtils.toNumber(props.selectDay);\n                date = XEUtils.getWhatWeek(date, 0, sWeek, firstDayOfWeek);\n            }\n            else if (isDateTimeType) {\n                date.setHours(datetimePanelValue.getHours());\n                date.setMinutes(datetimePanelValue.getMinutes());\n                date.setSeconds(datetimePanelValue.getSeconds());\n            }\n            var inpVal = XEUtils.toDateString(date, dateValueFormat, { firstDay: firstDayOfWeek });\n            dateCheckMonth(date);\n            if (multiple) {\n                // 如果为多选\n                var dateMultipleValue = computeDateMultipleValue.value;\n                if (isDateTimeType) {\n                    // 如果是datetime特殊类型\n                    var dateListValue = __spreadArray([], computeDateListValue.value, true);\n                    var datetimeRest_1 = [];\n                    var eqIndex = XEUtils.findIndexOf(dateListValue, function (val) { return XEUtils.isDateSame(date, val, 'yyyyMMdd'); });\n                    if (eqIndex === -1) {\n                        dateListValue.push(date);\n                    }\n                    else {\n                        dateListValue.splice(eqIndex, 1);\n                    }\n                    dateListValue.forEach(function (item) {\n                        if (item) {\n                            item.setHours(datetimePanelValue.getHours());\n                            item.setMinutes(datetimePanelValue.getMinutes());\n                            item.setSeconds(datetimePanelValue.getSeconds());\n                            datetimeRest_1.push(item);\n                        }\n                    });\n                    emitModel(datetimeRest_1.map(function (date) { return XEUtils.toDateString(date, dateValueFormat); }).join(','), { type: 'update' });\n                }\n                else {\n                    // 如果是日期类型\n                    if (dateMultipleValue.some(function (val) { return XEUtils.isEqual(val, inpVal); })) {\n                        emitModel(dateMultipleValue.filter(function (val) { return !XEUtils.isEqual(val, inpVal); }).join(','), { type: 'update' });\n                    }\n                    else {\n                        emitModel(dateMultipleValue.concat([inpVal]).join(','), { type: 'update' });\n                    }\n                }\n            }\n            else {\n                // 如果为单选\n                if (!XEUtils.isEqual(modelValue, inpVal)) {\n                    emitModel(inpVal, { type: 'update' });\n                }\n            }\n        };\n        var afterCheckValue = function () {\n            var type = props.type, min = props.min, max = props.max, exponential = props.exponential;\n            var inputValue = reactData.inputValue, datetimePanelValue = reactData.datetimePanelValue;\n            var isNumType = computeIsNumType.value;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var dateLabelFormat = computeDateLabelFormat.value;\n            var inpReadonly = computeInpReadonly.value;\n            if (!inpReadonly) {\n                if (isNumType) {\n                    if (inputValue) {\n                        var inpNumVal = type === 'integer' ? XEUtils.toInteger(handleNumber(inputValue)) : XEUtils.toNumber(handleNumber(inputValue));\n                        if (!vaildMinNum(inpNumVal)) {\n                            inpNumVal = min;\n                        }\n                        else if (!vaildMaxNum(inpNumVal)) {\n                            inpNumVal = max;\n                        }\n                        if (exponential) {\n                            var inpStringVal = XEUtils.toValueString(inputValue).toLowerCase();\n                            if (inpStringVal === XEUtils.toNumber(inpNumVal).toExponential()) {\n                                inpNumVal = inpStringVal;\n                            }\n                        }\n                        emitModel(getNumberValue(inpNumVal), { type: 'check' });\n                    }\n                }\n                else if (isDatePickerType) {\n                    if (inputValue) {\n                        var inpDateVal = parseDate(inputValue, dateLabelFormat);\n                        if (XEUtils.isValidDate(inpDateVal)) {\n                            if (type === 'time') {\n                                inpDateVal = XEUtils.toDateString(inpDateVal, dateLabelFormat);\n                                if (inputValue !== inpDateVal) {\n                                    emitModel(inpDateVal, { type: 'check' });\n                                }\n                                reactData.inputValue = inpDateVal;\n                            }\n                            else {\n                                var isChange = false;\n                                var firstDayOfWeek = computeFirstDayOfWeek.value;\n                                if (type === 'datetime') {\n                                    var dateValue = computeDateValue.value;\n                                    if (inputValue !== XEUtils.toDateString(dateValue, dateLabelFormat) || inputValue !== XEUtils.toDateString(inpDateVal, dateLabelFormat)) {\n                                        isChange = true;\n                                        datetimePanelValue.setHours(inpDateVal.getHours());\n                                        datetimePanelValue.setMinutes(inpDateVal.getMinutes());\n                                        datetimePanelValue.setSeconds(inpDateVal.getSeconds());\n                                    }\n                                }\n                                else {\n                                    isChange = true;\n                                }\n                                reactData.inputValue = XEUtils.toDateString(inpDateVal, dateLabelFormat, { firstDay: firstDayOfWeek });\n                                if (isChange) {\n                                    dateChange(inpDateVal);\n                                }\n                            }\n                        }\n                        else {\n                            dateRevert();\n                        }\n                    }\n                    else {\n                        emitModel('', { type: 'check' });\n                    }\n                }\n            }\n        };\n        var blurEvent = function (evnt) {\n            var inputValue = reactData.inputValue;\n            var inpImmediate = computeInpImmediate.value;\n            if (!inpImmediate) {\n                emitModel(inputValue, evnt);\n            }\n            afterCheckValue();\n            if (!reactData.visiblePanel) {\n                reactData.isActivated = false;\n            }\n            inputMethods.dispatchEvent('blur', { value: inputValue }, evnt);\n        };\n        // 密码\n        var passwordToggleEvent = function (evnt) {\n            var readonly = props.readonly, disabled = props.disabled;\n            var showPwd = reactData.showPwd;\n            if (!disabled && !readonly) {\n                reactData.showPwd = !showPwd;\n            }\n            inputMethods.dispatchEvent('toggle-visible', { visible: reactData.showPwd }, evnt);\n        };\n        // 密码\n        // 搜索\n        var searchEvent = function (evnt) {\n            inputMethods.dispatchEvent('search-click', {}, evnt);\n        };\n        // 搜索\n        // 数值\n        var numberChange = function (isPlus, evnt) {\n            var min = props.min, max = props.max, type = props.type;\n            var inputValue = reactData.inputValue;\n            var stepValue = computeStepValue.value;\n            var numValue = type === 'integer' ? XEUtils.toInteger(handleNumber(inputValue)) : XEUtils.toNumber(handleNumber(inputValue));\n            var newValue = isPlus ? XEUtils.add(numValue, stepValue) : XEUtils.subtract(numValue, stepValue);\n            var restNum;\n            if (!vaildMinNum(newValue)) {\n                restNum = min;\n            }\n            else if (!vaildMaxNum(newValue)) {\n                restNum = max;\n            }\n            else {\n                restNum = newValue;\n            }\n            emitInputEvent(getNumberValue(restNum), evnt);\n        };\n        var downbumTimeout;\n        var numberNextEvent = function (evnt) {\n            var readonly = props.readonly, disabled = props.disabled;\n            var isDisabledSubtractNumber = computeIsDisabledSubtractNumber.value;\n            clearTimeout(downbumTimeout);\n            if (!disabled && !readonly && !isDisabledSubtractNumber) {\n                numberChange(false, evnt);\n            }\n            inputMethods.dispatchEvent('next-number', {}, evnt);\n        };\n        var numberDownNextEvent = function (evnt) {\n            downbumTimeout = window.setTimeout(function () {\n                numberNextEvent(evnt);\n                numberDownNextEvent(evnt);\n            }, 60);\n        };\n        var numberPrevEvent = function (evnt) {\n            var readonly = props.readonly, disabled = props.disabled;\n            var isDisabledAddNumber = computeIsDisabledAddNumber.value;\n            clearTimeout(downbumTimeout);\n            if (!disabled && !readonly && !isDisabledAddNumber) {\n                numberChange(true, evnt);\n            }\n            inputMethods.dispatchEvent('prev-number', {}, evnt);\n        };\n        var numberKeydownEvent = function (evnt) {\n            var isUpArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_UP);\n            var isDwArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_DOWN);\n            if (isUpArrow || isDwArrow) {\n                evnt.preventDefault();\n                if (isUpArrow) {\n                    numberPrevEvent(evnt);\n                }\n                else {\n                    numberNextEvent(evnt);\n                }\n            }\n        };\n        var keydownEvent = function (evnt) {\n            var exponential = props.exponential, controls = props.controls;\n            var isNumType = computeIsNumType.value;\n            if (isNumType) {\n                var isCtrlKey = evnt.ctrlKey;\n                var isShiftKey = evnt.shiftKey;\n                var isAltKey = evnt.altKey;\n                var keyCode = evnt.keyCode;\n                if (!isCtrlKey && !isShiftKey && !isAltKey && (hasEventKey(evnt, EVENT_KEYS.SPACEBAR) || ((!exponential || keyCode !== 69) && (keyCode >= 65 && keyCode <= 90)) || (keyCode >= 186 && keyCode <= 188) || keyCode >= 191)) {\n                    evnt.preventDefault();\n                }\n                if (controls) {\n                    numberKeydownEvent(evnt);\n                }\n            }\n            triggerEvent(evnt);\n        };\n        var keyupEvent = function (evnt) {\n            triggerEvent(evnt);\n        };\n        // 数值\n        var numberStopDown = function () {\n            clearTimeout(downbumTimeout);\n        };\n        var numberDownPrevEvent = function (evnt) {\n            downbumTimeout = window.setTimeout(function () {\n                numberPrevEvent(evnt);\n                numberDownPrevEvent(evnt);\n            }, 60);\n        };\n        var numberMousedownEvent = function (evnt) {\n            numberStopDown();\n            if (evnt.button === 0) {\n                var isPrevNumber_1 = hasClass(evnt.currentTarget, 'is--prev');\n                if (isPrevNumber_1) {\n                    numberPrevEvent(evnt);\n                }\n                else {\n                    numberNextEvent(evnt);\n                }\n                downbumTimeout = window.setTimeout(function () {\n                    if (isPrevNumber_1) {\n                        numberDownPrevEvent(evnt);\n                    }\n                    else {\n                        numberDownNextEvent(evnt);\n                    }\n                }, 500);\n            }\n        };\n        var wheelEvent = function (evnt) {\n            var isNumType = computeIsNumType.value;\n            if (isNumType && props.controls) {\n                if (reactData.isActivated) {\n                    var delta = evnt.deltaY;\n                    if (delta > 0) {\n                        numberNextEvent(evnt);\n                    }\n                    else if (delta < 0) {\n                        numberPrevEvent(evnt);\n                    }\n                    evnt.preventDefault();\n                }\n            }\n            triggerEvent(evnt);\n        };\n        // 日期\n        var dateMonthHandle = function (date, offsetMonth) {\n            reactData.selectMonth = XEUtils.getWhatMonth(date, offsetMonth, 'first');\n        };\n        var dateNowHandle = function () {\n            var currentDate = XEUtils.getWhatDay(Date.now(), 0, 'first');\n            reactData.currentDate = currentDate;\n            dateMonthHandle(currentDate, 0);\n        };\n        var dateToggleTypeEvent = function () {\n            var datePanelType = reactData.datePanelType;\n            if (datePanelType === 'month' || datePanelType === 'quarter') {\n                datePanelType = 'year';\n            }\n            else {\n                datePanelType = 'month';\n            }\n            reactData.datePanelType = datePanelType;\n        };\n        var datePrevEvent = function (evnt) {\n            var type = props.type;\n            var datePanelType = reactData.datePanelType, selectMonth = reactData.selectMonth;\n            var isDisabledPrevDateBtn = computeIsDisabledPrevDateBtn.value;\n            if (!isDisabledPrevDateBtn) {\n                if (type === 'year') {\n                    reactData.selectMonth = XEUtils.getWhatYear(selectMonth, -yearSize, 'first');\n                }\n                else if (type === 'month' || type === 'quarter') {\n                    if (datePanelType === 'year') {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, -yearSize, 'first');\n                    }\n                    else {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, -1, 'first');\n                    }\n                }\n                else {\n                    if (datePanelType === 'year') {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, -yearSize, 'first');\n                    }\n                    else if (datePanelType === 'month') {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, -1, 'first');\n                    }\n                    else {\n                        reactData.selectMonth = XEUtils.getWhatMonth(selectMonth, -1, 'first');\n                    }\n                }\n                inputMethods.dispatchEvent('date-prev', { type: type }, evnt);\n            }\n        };\n        var dateTodayMonthEvent = function (evnt) {\n            dateNowHandle();\n            if (!props.multiple) {\n                dateChange(reactData.currentDate);\n                hidePanel();\n            }\n            inputMethods.dispatchEvent('date-today', { type: props.type }, evnt);\n        };\n        var dateNextEvent = function (evnt) {\n            var type = props.type;\n            var datePanelType = reactData.datePanelType, selectMonth = reactData.selectMonth;\n            var isDisabledNextDateBtn = computeIsDisabledNextDateBtn.value;\n            if (!isDisabledNextDateBtn) {\n                if (type === 'year') {\n                    reactData.selectMonth = XEUtils.getWhatYear(selectMonth, yearSize, 'first');\n                }\n                else if (type === 'month' || type === 'quarter') {\n                    if (datePanelType === 'year') {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, yearSize, 'first');\n                    }\n                    else {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, 1, 'first');\n                    }\n                }\n                else {\n                    if (datePanelType === 'year') {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, yearSize, 'first');\n                    }\n                    else if (datePanelType === 'month') {\n                        reactData.selectMonth = XEUtils.getWhatYear(selectMonth, 1, 'first');\n                    }\n                    else {\n                        reactData.selectMonth = XEUtils.getWhatMonth(selectMonth, 1, 'first');\n                    }\n                }\n                inputMethods.dispatchEvent('date-next', { type: type }, evnt);\n            }\n        };\n        var isDateDisabled = function (item) {\n            var disabledMethod = props.disabledMethod;\n            var datePanelType = reactData.datePanelType;\n            return disabledMethod && disabledMethod({ type: datePanelType, viewType: datePanelType, date: item.date, $input: $xeinput });\n        };\n        var dateSelectItem = function (date) {\n            var type = props.type, multiple = props.multiple;\n            var datePanelType = reactData.datePanelType;\n            if (type === 'month') {\n                if (datePanelType === 'year') {\n                    reactData.datePanelType = 'month';\n                    dateCheckMonth(date);\n                }\n                else {\n                    dateChange(date);\n                    if (!multiple) {\n                        hidePanel();\n                    }\n                }\n            }\n            else if (type === 'year') {\n                dateChange(date);\n                if (!multiple) {\n                    hidePanel();\n                }\n            }\n            else if (type === 'quarter') {\n                if (datePanelType === 'year') {\n                    reactData.datePanelType = 'quarter';\n                    dateCheckMonth(date);\n                }\n                else {\n                    dateChange(date);\n                    if (!multiple) {\n                        hidePanel();\n                    }\n                }\n            }\n            else {\n                if (datePanelType === 'month') {\n                    reactData.datePanelType = type === 'week' ? type : 'day';\n                    dateCheckMonth(date);\n                }\n                else if (datePanelType === 'year') {\n                    reactData.datePanelType = 'month';\n                    dateCheckMonth(date);\n                }\n                else {\n                    dateChange(date);\n                    if (type === 'datetime') {\n                        // 日期带时间\n                    }\n                    else {\n                        if (!multiple) {\n                            hidePanel();\n                        }\n                    }\n                }\n            }\n        };\n        var dateSelectEvent = function (item) {\n            if (!isDateDisabled(item)) {\n                dateSelectItem(item.date);\n            }\n        };\n        var dateMoveDay = function (offsetDay) {\n            if (!isDateDisabled({ date: offsetDay })) {\n                var dayList = computeDayList.value;\n                if (!dayList.some(function (item) { return XEUtils.isDateSame(item.date, offsetDay, 'yyyyMMdd'); })) {\n                    dateCheckMonth(offsetDay);\n                }\n                dateParseValue(offsetDay);\n            }\n        };\n        var dateMoveYear = function (offsetYear) {\n            if (!isDateDisabled({ date: offsetYear })) {\n                var yearList = computeYearList.value;\n                if (!yearList.some(function (item) { return XEUtils.isDateSame(item.date, offsetYear, 'yyyy'); })) {\n                    dateCheckMonth(offsetYear);\n                }\n                dateParseValue(offsetYear);\n            }\n        };\n        var dateMoveQuarter = function (offsetQuarter) {\n            if (!isDateDisabled({ date: offsetQuarter })) {\n                var quarterList = computeQuarterList.value;\n                if (!quarterList.some(function (item) { return XEUtils.isDateSame(item.date, offsetQuarter, 'yyyyq'); })) {\n                    dateCheckMonth(offsetQuarter);\n                }\n                dateParseValue(offsetQuarter);\n            }\n        };\n        var dateMoveMonth = function (offsetMonth) {\n            if (!isDateDisabled({ date: offsetMonth })) {\n                var monthList = computeMonthList.value;\n                if (!monthList.some(function (item) { return XEUtils.isDateSame(item.date, offsetMonth, 'yyyyMM'); })) {\n                    dateCheckMonth(offsetMonth);\n                }\n                dateParseValue(offsetMonth);\n            }\n        };\n        var dateMouseenterEvent = function (item) {\n            if (!isDateDisabled(item)) {\n                var datePanelType = reactData.datePanelType;\n                if (datePanelType === 'month') {\n                    dateMoveMonth(item.date);\n                }\n                else if (datePanelType === 'quarter') {\n                    dateMoveQuarter(item.date);\n                }\n                else if (datePanelType === 'year') {\n                    dateMoveYear(item.date);\n                }\n                else {\n                    dateMoveDay(item.date);\n                }\n            }\n        };\n        var updateTimePos = function (liElem) {\n            if (liElem) {\n                var height = liElem.offsetHeight;\n                var ulElem = liElem.parentNode;\n                ulElem.scrollTop = liElem.offsetTop - height * 4;\n            }\n        };\n        var dateTimeChangeEvent = function (evnt) {\n            reactData.datetimePanelValue = new Date(reactData.datetimePanelValue.getTime());\n            updateTimePos(evnt.currentTarget);\n        };\n        var dateHourEvent = function (evnt, item) {\n            reactData.datetimePanelValue.setHours(item.value);\n            dateTimeChangeEvent(evnt);\n        };\n        var dateConfirmEvent = function () {\n            var multiple = props.multiple;\n            var datetimePanelValue = reactData.datetimePanelValue;\n            var dateValue = computeDateValue.value;\n            var isDateTimeType = computeIsDateTimeType.value;\n            if (isDateTimeType) {\n                var dateValueFormat_1 = computeDateValueFormat.value;\n                if (multiple) {\n                    // 如果为多选\n                    var dateMultipleValue = computeDateMultipleValue.value;\n                    if (isDateTimeType) {\n                        // 如果是datetime特殊类型\n                        var dateListValue = __spreadArray([], computeDateListValue.value, true);\n                        var datetimeRest_2 = [];\n                        dateListValue.forEach(function (item) {\n                            if (item) {\n                                item.setHours(datetimePanelValue.getHours());\n                                item.setMinutes(datetimePanelValue.getMinutes());\n                                item.setSeconds(datetimePanelValue.getSeconds());\n                                datetimeRest_2.push(item);\n                            }\n                        });\n                        emitModel(datetimeRest_2.map(function (date) { return XEUtils.toDateString(date, dateValueFormat_1); }).join(','), { type: 'update' });\n                    }\n                    else {\n                        // 如果是日期类型\n                        emitModel(dateMultipleValue.join(','), { type: 'update' });\n                    }\n                }\n                else {\n                    dateChange(dateValue || reactData.currentDate);\n                }\n            }\n            hidePanel();\n        };\n        var dateMinuteEvent = function (evnt, item) {\n            reactData.datetimePanelValue.setMinutes(item.value);\n            dateTimeChangeEvent(evnt);\n        };\n        var dateSecondEvent = function (evnt, item) {\n            reactData.datetimePanelValue.setSeconds(item.value);\n            dateTimeChangeEvent(evnt);\n        };\n        var dateOffsetEvent = function (evnt) {\n            var isActivated = reactData.isActivated, datePanelValue = reactData.datePanelValue, datePanelType = reactData.datePanelType;\n            if (isActivated) {\n                evnt.preventDefault();\n                var isLeftArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_LEFT);\n                var isUpArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_UP);\n                var isRightArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_RIGHT);\n                var isDwArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_DOWN);\n                if (datePanelType === 'year') {\n                    var offsetYear = XEUtils.getWhatYear(datePanelValue || Date.now(), 0, 'first');\n                    if (isLeftArrow) {\n                        offsetYear = XEUtils.getWhatYear(offsetYear, -1);\n                    }\n                    else if (isUpArrow) {\n                        offsetYear = XEUtils.getWhatYear(offsetYear, -4);\n                    }\n                    else if (isRightArrow) {\n                        offsetYear = XEUtils.getWhatYear(offsetYear, 1);\n                    }\n                    else if (isDwArrow) {\n                        offsetYear = XEUtils.getWhatYear(offsetYear, 4);\n                    }\n                    dateMoveYear(offsetYear);\n                }\n                else if (datePanelType === 'quarter') {\n                    var offsetQuarter = XEUtils.getWhatQuarter(datePanelValue || Date.now(), 0, 'first');\n                    if (isLeftArrow) {\n                        offsetQuarter = XEUtils.getWhatQuarter(offsetQuarter, -1);\n                    }\n                    else if (isUpArrow) {\n                        offsetQuarter = XEUtils.getWhatQuarter(offsetQuarter, -2);\n                    }\n                    else if (isRightArrow) {\n                        offsetQuarter = XEUtils.getWhatQuarter(offsetQuarter, 1);\n                    }\n                    else if (isDwArrow) {\n                        offsetQuarter = XEUtils.getWhatQuarter(offsetQuarter, 2);\n                    }\n                    dateMoveQuarter(offsetQuarter);\n                }\n                else if (datePanelType === 'month') {\n                    var offsetMonth = XEUtils.getWhatMonth(datePanelValue || Date.now(), 0, 'first');\n                    if (isLeftArrow) {\n                        offsetMonth = XEUtils.getWhatMonth(offsetMonth, -1);\n                    }\n                    else if (isUpArrow) {\n                        offsetMonth = XEUtils.getWhatMonth(offsetMonth, -4);\n                    }\n                    else if (isRightArrow) {\n                        offsetMonth = XEUtils.getWhatMonth(offsetMonth, 1);\n                    }\n                    else if (isDwArrow) {\n                        offsetMonth = XEUtils.getWhatMonth(offsetMonth, 4);\n                    }\n                    dateMoveMonth(offsetMonth);\n                }\n                else {\n                    var offsetDay = datePanelValue || XEUtils.getWhatDay(Date.now(), 0, 'first');\n                    var firstDayOfWeek = computeFirstDayOfWeek.value;\n                    if (isLeftArrow) {\n                        offsetDay = XEUtils.getWhatDay(offsetDay, -1);\n                    }\n                    else if (isUpArrow) {\n                        offsetDay = XEUtils.getWhatWeek(offsetDay, -1, firstDayOfWeek);\n                    }\n                    else if (isRightArrow) {\n                        offsetDay = XEUtils.getWhatDay(offsetDay, 1);\n                    }\n                    else if (isDwArrow) {\n                        offsetDay = XEUtils.getWhatWeek(offsetDay, 1, firstDayOfWeek);\n                    }\n                    dateMoveDay(offsetDay);\n                }\n            }\n        };\n        var datePgOffsetEvent = function (evnt) {\n            var isActivated = reactData.isActivated;\n            if (isActivated) {\n                var isPgUp = hasEventKey(evnt, EVENT_KEYS.PAGE_UP);\n                evnt.preventDefault();\n                if (isPgUp) {\n                    datePrevEvent(evnt);\n                }\n                else {\n                    dateNextEvent(evnt);\n                }\n            }\n        };\n        var dateOpenPanel = function () {\n            var type = props.type;\n            var isDateTimeType = computeIsDateTimeType.value;\n            var dateValue = computeDateValue.value;\n            if (['year', 'quarter', 'month', 'week'].indexOf(type) > -1) {\n                reactData.datePanelType = type;\n            }\n            else {\n                reactData.datePanelType = 'day';\n            }\n            reactData.currentDate = XEUtils.getWhatDay(Date.now(), 0, 'first');\n            if (dateValue) {\n                dateMonthHandle(dateValue, 0);\n                dateParseValue(dateValue);\n            }\n            else {\n                dateNowHandle();\n            }\n            if (isDateTimeType) {\n                reactData.datetimePanelValue = reactData.datePanelValue || XEUtils.getWhatDay(Date.now(), 0, 'first');\n                nextTick(function () {\n                    var timeBodyElem = refInputTimeBody.value;\n                    XEUtils.arrayEach(timeBodyElem.querySelectorAll('li.is--selected'), updateTimePos);\n                });\n            }\n        };\n        // 日期\n        // 弹出面板\n        var updateZindex = function () {\n            if (reactData.panelIndex < getLastZIndex()) {\n                reactData.panelIndex = nextZIndex();\n            }\n        };\n        var updatePlacement = function () {\n            return nextTick().then(function () {\n                var transfer = props.transfer, placement = props.placement;\n                var panelIndex = reactData.panelIndex;\n                var targetElem = refInputTarget.value;\n                var panelElem = refInputPanel.value;\n                if (targetElem && panelElem) {\n                    var targetHeight = targetElem.offsetHeight;\n                    var targetWidth = targetElem.offsetWidth;\n                    var panelHeight = panelElem.offsetHeight;\n                    var panelWidth = panelElem.offsetWidth;\n                    var marginSize = 5;\n                    var panelStyle = {\n                        zIndex: panelIndex\n                    };\n                    var _a = getAbsolutePos(targetElem), boundingTop = _a.boundingTop, boundingLeft = _a.boundingLeft, visibleHeight = _a.visibleHeight, visibleWidth = _a.visibleWidth;\n                    var panelPlacement = 'bottom';\n                    if (transfer) {\n                        var left = boundingLeft;\n                        var top_1 = boundingTop + targetHeight;\n                        if (placement === 'top') {\n                            panelPlacement = 'top';\n                            top_1 = boundingTop - panelHeight;\n                        }\n                        else if (!placement) {\n                            // 如果下面不够放，则向上\n                            if (top_1 + panelHeight + marginSize > visibleHeight) {\n                                panelPlacement = 'top';\n                                top_1 = boundingTop - panelHeight;\n                            }\n                            // 如果上面不够放，则向下（优先）\n                            if (top_1 < marginSize) {\n                                panelPlacement = 'bottom';\n                                top_1 = boundingTop + targetHeight;\n                            }\n                        }\n                        // 如果溢出右边\n                        if (left + panelWidth + marginSize > visibleWidth) {\n                            left -= left + panelWidth + marginSize - visibleWidth;\n                        }\n                        // 如果溢出左边\n                        if (left < marginSize) {\n                            left = marginSize;\n                        }\n                        Object.assign(panelStyle, {\n                            left: \"\".concat(left, \"px\"),\n                            top: \"\".concat(top_1, \"px\"),\n                            minWidth: \"\".concat(targetWidth, \"px\")\n                        });\n                    }\n                    else {\n                        if (placement === 'top') {\n                            panelPlacement = 'top';\n                            panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                        }\n                        else if (!placement) {\n                            // 如果下面不够放，则向上\n                            if (boundingTop + targetHeight + panelHeight > visibleHeight) {\n                                // 如果上面不够放，则向下（优先）\n                                if (boundingTop - targetHeight - panelHeight > marginSize) {\n                                    panelPlacement = 'top';\n                                    panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                                }\n                            }\n                        }\n                    }\n                    reactData.panelStyle = panelStyle;\n                    reactData.panelPlacement = panelPlacement;\n                    return nextTick();\n                }\n            });\n        };\n        var showPanel = function () {\n            var disabled = props.disabled;\n            var visiblePanel = reactData.visiblePanel;\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (!disabled && !visiblePanel) {\n                if (!reactData.inited) {\n                    reactData.inited = true;\n                }\n                clearTimeout(hidePanelTimeout);\n                reactData.isActivated = true;\n                reactData.animatVisible = true;\n                if (isDatePickerType) {\n                    dateOpenPanel();\n                }\n                setTimeout(function () {\n                    reactData.visiblePanel = true;\n                }, 10);\n                updateZindex();\n                return updatePlacement();\n            }\n            return nextTick();\n        };\n        var datePickerOpenEvent = function (evnt) {\n            var readonly = props.readonly;\n            if (!readonly) {\n                evnt.preventDefault();\n                showPanel();\n            }\n        };\n        var clickEvent = function (evnt) {\n            triggerEvent(evnt);\n        };\n        // 弹出面板\n        // 全局事件\n        var handleGlobalMousedownEvent = function (evnt) {\n            var disabled = props.disabled;\n            var visiblePanel = reactData.visiblePanel, isActivated = reactData.isActivated;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var el = refElem.value;\n            var panelElem = refInputPanel.value;\n            if (!disabled && isActivated) {\n                reactData.isActivated = getEventTargetNode(evnt, el).flag || getEventTargetNode(evnt, panelElem).flag;\n                if (!reactData.isActivated) {\n                    // 如果是日期类型\n                    if (isDatePickerType) {\n                        if (visiblePanel) {\n                            hidePanel();\n                            afterCheckValue();\n                        }\n                    }\n                    else {\n                        afterCheckValue();\n                    }\n                }\n            }\n        };\n        var handleGlobalKeydownEvent = function (evnt) {\n            var clearable = props.clearable, disabled = props.disabled;\n            var visiblePanel = reactData.visiblePanel;\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (!disabled) {\n                var isTab = hasEventKey(evnt, EVENT_KEYS.TAB);\n                var isDel = hasEventKey(evnt, EVENT_KEYS.DELETE);\n                var isEsc = hasEventKey(evnt, EVENT_KEYS.ESCAPE);\n                var isEnter = hasEventKey(evnt, EVENT_KEYS.ENTER);\n                var isLeftArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_LEFT);\n                var isUpArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_UP);\n                var isRightArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_RIGHT);\n                var isDwArrow = hasEventKey(evnt, EVENT_KEYS.ARROW_DOWN);\n                var isPgUp = hasEventKey(evnt, EVENT_KEYS.PAGE_UP);\n                var isPgDn = hasEventKey(evnt, EVENT_KEYS.PAGE_DOWN);\n                var operArrow = isLeftArrow || isUpArrow || isRightArrow || isDwArrow;\n                var isActivated = reactData.isActivated;\n                if (isTab) {\n                    if (isActivated) {\n                        afterCheckValue();\n                    }\n                    isActivated = false;\n                    reactData.isActivated = isActivated;\n                }\n                else if (operArrow) {\n                    if (isDatePickerType) {\n                        if (isActivated) {\n                            if (visiblePanel) {\n                                dateOffsetEvent(evnt);\n                            }\n                            else if (isUpArrow || isDwArrow) {\n                                datePickerOpenEvent(evnt);\n                            }\n                        }\n                    }\n                }\n                else if (isEnter) {\n                    if (isDatePickerType) {\n                        if (visiblePanel) {\n                            if (reactData.datePanelValue) {\n                                dateSelectItem(reactData.datePanelValue);\n                            }\n                            else {\n                                hidePanel();\n                            }\n                        }\n                        else if (isActivated) {\n                            datePickerOpenEvent(evnt);\n                        }\n                    }\n                }\n                else if (isPgUp || isPgDn) {\n                    if (isDatePickerType) {\n                        if (isActivated) {\n                            datePgOffsetEvent(evnt);\n                        }\n                    }\n                }\n                if (isTab || isEsc) {\n                    if (visiblePanel) {\n                        hidePanel();\n                    }\n                }\n                else if (isDel && clearable) {\n                    if (isActivated) {\n                        clearValueEvent(evnt, null);\n                    }\n                }\n            }\n        };\n        var handleGlobalMousewheelEvent = function (evnt) {\n            var disabled = props.disabled;\n            var visiblePanel = reactData.visiblePanel;\n            if (!disabled) {\n                if (visiblePanel) {\n                    var panelElem = refInputPanel.value;\n                    if (getEventTargetNode(evnt, panelElem).flag) {\n                        updatePlacement();\n                    }\n                    else {\n                        hidePanel();\n                        afterCheckValue();\n                    }\n                }\n            }\n        };\n        var handleGlobalBlurEvent = function () {\n            var isActivated = reactData.isActivated, visiblePanel = reactData.visiblePanel;\n            if (visiblePanel) {\n                hidePanel();\n                afterCheckValue();\n            }\n            else if (isActivated) {\n                afterCheckValue();\n            }\n        };\n        var renderDateLabel = function (item, label) {\n            var festivalMethod = props.festivalMethod;\n            if (festivalMethod) {\n                var datePanelType = reactData.datePanelType;\n                var festivalRest = festivalMethod({ type: datePanelType, viewType: datePanelType, date: item.date, $input: $xeinput });\n                var festivalItem = festivalRest ? (XEUtils.isString(festivalRest) ? { label: festivalRest } : festivalRest) : {};\n                var extraItem = festivalItem.extra ? (XEUtils.isString(festivalItem.extra) ? { label: festivalItem.extra } : festivalItem.extra) : null;\n                var labels = [\n                    h('span', {\n                        class: ['vxe-input--date-label', {\n                                'is-notice': festivalItem.notice\n                            }]\n                    }, extraItem && extraItem.label ? [\n                        h('span', label),\n                        h('span', {\n                            class: ['vxe-input--date-label--extra', extraItem.important ? 'is-important' : '', extraItem.className],\n                            style: extraItem.style\n                        }, XEUtils.toValueString(extraItem.label))\n                    ] : label)\n                ];\n                var festivalLabel = festivalItem.label;\n                if (festivalLabel) {\n                    // 默认最多支持3个节日重叠\n                    var festivalLabels = XEUtils.toValueString(festivalLabel).split(',');\n                    labels.push(h('span', {\n                        class: ['vxe-input--date-festival', festivalItem.important ? 'is-important' : '', festivalItem.className],\n                        style: festivalItem.style\n                    }, [\n                        festivalLabels.length > 1 ? h('span', {\n                            class: ['vxe-input--date-festival--overlap', \"overlap--\".concat(festivalLabels.length)]\n                        }, festivalLabels.map(function (label) { return h('span', label.substring(0, 3)); })) : h('span', {\n                            class: 'vxe-input--date-festival--label'\n                        }, festivalLabels[0].substring(0, 3))\n                    ]));\n                }\n                return labels;\n            }\n            return label;\n        };\n        var renderDateDayTable = function () {\n            var multiple = props.multiple;\n            var datePanelType = reactData.datePanelType, datePanelValue = reactData.datePanelValue;\n            var dateValue = computeDateValue.value;\n            var dateHeaders = computeDateHeaders.value;\n            var dayDatas = computeDayDatas.value;\n            var dateListValue = computeDateListValue.value;\n            var matchFormat = 'yyyyMMdd';\n            return [\n                h('table', {\n                    class: \"vxe-input--date-\".concat(datePanelType, \"-view\"),\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    h('thead', [\n                        h('tr', dateHeaders.map(function (item) {\n                            return h('th', item.label);\n                        }))\n                    ]),\n                    h('tbody', dayDatas.map(function (rows) {\n                        return h('tr', rows.map(function (item) {\n                            return h('td', {\n                                class: {\n                                    'is--prev': item.isPrev,\n                                    'is--current': item.isCurrent,\n                                    'is--now': item.isNow,\n                                    'is--next': item.isNext,\n                                    'is--disabled': isDateDisabled(item),\n                                    'is--selected': multiple ? dateListValue.some(function (val) { return XEUtils.isDateSame(val, item.date, matchFormat); }) : XEUtils.isDateSame(dateValue, item.date, matchFormat),\n                                    'is--hover': XEUtils.isDateSame(datePanelValue, item.date, matchFormat)\n                                },\n                                onClick: function () { return dateSelectEvent(item); },\n                                onMouseenter: function () { return dateMouseenterEvent(item); }\n                            }, renderDateLabel(item, item.label));\n                        }));\n                    }))\n                ])\n            ];\n        };\n        var renderDateWeekTable = function () {\n            var multiple = props.multiple;\n            var datePanelType = reactData.datePanelType, datePanelValue = reactData.datePanelValue;\n            var dateValue = computeDateValue.value;\n            var weekHeaders = computeWeekHeaders.value;\n            var weekDates = computeWeekDates.value;\n            var dateListValue = computeDateListValue.value;\n            var matchFormat = 'yyyyMMdd';\n            return [\n                h('table', {\n                    class: \"vxe-input--date-\".concat(datePanelType, \"-view\"),\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    h('thead', [\n                        h('tr', weekHeaders.map(function (item) {\n                            return h('th', item.label);\n                        }))\n                    ]),\n                    h('tbody', weekDates.map(function (rows) {\n                        var isSelected = multiple ? rows.some(function (item) { return dateListValue.some(function (val) { return XEUtils.isDateSame(val, item.date, matchFormat); }); }) : rows.some(function (item) { return XEUtils.isDateSame(dateValue, item.date, matchFormat); });\n                        var isHover = rows.some(function (item) { return XEUtils.isDateSame(datePanelValue, item.date, matchFormat); });\n                        return h('tr', rows.map(function (item) {\n                            return h('td', {\n                                class: {\n                                    'is--prev': item.isPrev,\n                                    'is--current': item.isCurrent,\n                                    'is--now': item.isNow,\n                                    'is--next': item.isNext,\n                                    'is--disabled': isDateDisabled(item),\n                                    'is--selected': isSelected,\n                                    'is--hover': isHover\n                                },\n                                // event\n                                onClick: function () { return dateSelectEvent(item); },\n                                onMouseenter: function () { return dateMouseenterEvent(item); }\n                            }, renderDateLabel(item, item.label));\n                        }));\n                    }))\n                ])\n            ];\n        };\n        var renderDateMonthTable = function () {\n            var multiple = props.multiple;\n            var datePanelType = reactData.datePanelType, datePanelValue = reactData.datePanelValue;\n            var dateValue = computeDateValue.value;\n            var monthDatas = computeMonthDatas.value;\n            var dateListValue = computeDateListValue.value;\n            var matchFormat = 'yyyyMM';\n            return [\n                h('table', {\n                    class: \"vxe-input--date-\".concat(datePanelType, \"-view\"),\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    h('tbody', monthDatas.map(function (rows) {\n                        return h('tr', rows.map(function (item) {\n                            return h('td', {\n                                class: {\n                                    'is--prev': item.isPrev,\n                                    'is--current': item.isCurrent,\n                                    'is--now': item.isNow,\n                                    'is--next': item.isNext,\n                                    'is--disabled': isDateDisabled(item),\n                                    'is--selected': multiple ? dateListValue.some(function (val) { return XEUtils.isDateSame(val, item.date, matchFormat); }) : XEUtils.isDateSame(dateValue, item.date, matchFormat),\n                                    'is--hover': XEUtils.isDateSame(datePanelValue, item.date, matchFormat)\n                                },\n                                onClick: function () { return dateSelectEvent(item); },\n                                onMouseenter: function () { return dateMouseenterEvent(item); }\n                            }, renderDateLabel(item, GlobalConfig.i18n(\"vxe.input.date.months.m\".concat(item.month))));\n                        }));\n                    }))\n                ])\n            ];\n        };\n        var renderDateQuarterTable = function () {\n            var multiple = props.multiple;\n            var datePanelType = reactData.datePanelType, datePanelValue = reactData.datePanelValue;\n            var dateValue = computeDateValue.value;\n            var quarterDatas = computeQuarterDatas.value;\n            var dateListValue = computeDateListValue.value;\n            var matchFormat = 'yyyyq';\n            return [\n                h('table', {\n                    class: \"vxe-input--date-\".concat(datePanelType, \"-view\"),\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    h('tbody', quarterDatas.map(function (rows) {\n                        return h('tr', rows.map(function (item) {\n                            return h('td', {\n                                class: {\n                                    'is--prev': item.isPrev,\n                                    'is--current': item.isCurrent,\n                                    'is--now': item.isNow,\n                                    'is--next': item.isNext,\n                                    'is--disabled': isDateDisabled(item),\n                                    'is--selected': multiple ? dateListValue.some(function (val) { return XEUtils.isDateSame(val, item.date, matchFormat); }) : XEUtils.isDateSame(dateValue, item.date, matchFormat),\n                                    'is--hover': XEUtils.isDateSame(datePanelValue, item.date, matchFormat)\n                                },\n                                onClick: function () { return dateSelectEvent(item); },\n                                onMouseenter: function () { return dateMouseenterEvent(item); }\n                            }, renderDateLabel(item, GlobalConfig.i18n(\"vxe.input.date.quarters.q\".concat(item.quarter))));\n                        }));\n                    }))\n                ])\n            ];\n        };\n        var renderDateYearTable = function () {\n            var multiple = props.multiple;\n            var datePanelType = reactData.datePanelType, datePanelValue = reactData.datePanelValue;\n            var dateValue = computeDateValue.value;\n            var yearDatas = computeYearDatas.value;\n            var dateListValue = computeDateListValue.value;\n            var matchFormat = 'yyyy';\n            return [\n                h('table', {\n                    class: \"vxe-input--date-\".concat(datePanelType, \"-view\"),\n                    cellspacing: 0,\n                    cellpadding: 0,\n                    border: 0\n                }, [\n                    h('tbody', yearDatas.map(function (rows) {\n                        return h('tr', rows.map(function (item) {\n                            return h('td', {\n                                class: {\n                                    'is--prev': item.isPrev,\n                                    'is--current': item.isCurrent,\n                                    'is--now': item.isNow,\n                                    'is--next': item.isNext,\n                                    'is--disabled': isDateDisabled(item),\n                                    'is--selected': multiple ? dateListValue.some(function (val) { return XEUtils.isDateSame(val, item.date, matchFormat); }) : XEUtils.isDateSame(dateValue, item.date, matchFormat),\n                                    'is--hover': XEUtils.isDateSame(datePanelValue, item.date, matchFormat)\n                                },\n                                onClick: function () { return dateSelectEvent(item); },\n                                onMouseenter: function () { return dateMouseenterEvent(item); }\n                            }, renderDateLabel(item, item.year));\n                        }));\n                    }))\n                ])\n            ];\n        };\n        var renderDateTable = function () {\n            var datePanelType = reactData.datePanelType;\n            switch (datePanelType) {\n                case 'week':\n                    return renderDateWeekTable();\n                case 'month':\n                    return renderDateMonthTable();\n                case 'quarter':\n                    return renderDateQuarterTable();\n                case 'year':\n                    return renderDateYearTable();\n            }\n            return renderDateDayTable();\n        };\n        var renderDatePanel = function () {\n            var multiple = props.multiple;\n            var datePanelType = reactData.datePanelType;\n            var isDisabledPrevDateBtn = computeIsDisabledPrevDateBtn.value;\n            var isDisabledNextDateBtn = computeIsDisabledNextDateBtn.value;\n            var selectDatePanelLabel = computeSelectDatePanelLabel.value;\n            return [\n                h('div', {\n                    class: 'vxe-input--date-picker-header'\n                }, [\n                    h('div', {\n                        class: 'vxe-input--date-picker-type-wrapper'\n                    }, [\n                        datePanelType === 'year' ? h('span', {\n                            class: 'vxe-input--date-picker-label'\n                        }, selectDatePanelLabel) : h('span', {\n                            class: 'vxe-input--date-picker-btn',\n                            onClick: dateToggleTypeEvent\n                        }, selectDatePanelLabel)\n                    ]),\n                    h('div', {\n                        class: 'vxe-input--date-picker-btn-wrapper'\n                    }, [\n                        h('span', {\n                            class: ['vxe-input--date-picker-btn vxe-input--date-picker-prev-btn', {\n                                    'is--disabled': isDisabledPrevDateBtn\n                                }],\n                            onClick: datePrevEvent\n                        }, [\n                            h('i', {\n                                class: 'vxe-icon-caret-left'\n                            })\n                        ]),\n                        h('span', {\n                            class: 'vxe-input--date-picker-btn vxe-input--date-picker-current-btn',\n                            onClick: dateTodayMonthEvent\n                        }, [\n                            h('i', {\n                                class: 'vxe-icon-dot'\n                            })\n                        ]),\n                        h('span', {\n                            class: ['vxe-input--date-picker-btn vxe-input--date-picker-next-btn', {\n                                    'is--disabled': isDisabledNextDateBtn\n                                }],\n                            onClick: dateNextEvent\n                        }, [\n                            h('i', {\n                                class: 'vxe-icon-caret-right'\n                            })\n                        ]),\n                        multiple && computeSupportMultiples.value ? h('span', {\n                            class: 'vxe-input--date-picker-btn vxe-input--date-picker-confirm-btn'\n                        }, [\n                            h('button', {\n                                class: 'vxe-input--date-picker-confirm',\n                                type: 'button',\n                                onClick: dateConfirmEvent\n                            }, GlobalConfig.i18n('vxe.button.confirm'))\n                        ]) : null\n                    ])\n                ]),\n                h('div', {\n                    class: 'vxe-input--date-picker-body'\n                }, renderDateTable())\n            ];\n        };\n        var renderTimePanel = function () {\n            var datetimePanelValue = reactData.datetimePanelValue;\n            var dateTimeLabel = computeDateTimeLabel.value;\n            var hourList = computeHourList.value;\n            var minuteList = computeMinuteList.value;\n            var secondList = computeSecondList.value;\n            return [\n                h('div', {\n                    class: 'vxe-input--time-picker-header'\n                }, [\n                    h('span', {\n                        class: 'vxe-input--time-picker-title'\n                    }, dateTimeLabel),\n                    h('button', {\n                        class: 'vxe-input--time-picker-confirm',\n                        type: 'button',\n                        onClick: dateConfirmEvent\n                    }, GlobalConfig.i18n('vxe.button.confirm'))\n                ]),\n                h('div', {\n                    ref: refInputTimeBody,\n                    class: 'vxe-input--time-picker-body'\n                }, [\n                    h('ul', {\n                        class: 'vxe-input--time-picker-hour-list'\n                    }, hourList.map(function (item, index) {\n                        return h('li', {\n                            key: index,\n                            class: {\n                                'is--selected': datetimePanelValue && datetimePanelValue.getHours() === item.value\n                            },\n                            onClick: function (evnt) { return dateHourEvent(evnt, item); }\n                        }, item.label);\n                    })),\n                    h('ul', {\n                        class: 'vxe-input--time-picker-minute-list'\n                    }, minuteList.map(function (item, index) {\n                        return h('li', {\n                            key: index,\n                            class: {\n                                'is--selected': datetimePanelValue && datetimePanelValue.getMinutes() === item.value\n                            },\n                            onClick: function (evnt) { return dateMinuteEvent(evnt, item); }\n                        }, item.label);\n                    })),\n                    h('ul', {\n                        class: 'vxe-input--time-picker-second-list'\n                    }, secondList.map(function (item, index) {\n                        return h('li', {\n                            key: index,\n                            class: {\n                                'is--selected': datetimePanelValue && datetimePanelValue.getSeconds() === item.value\n                            },\n                            onClick: function (evnt) { return dateSecondEvent(evnt, item); }\n                        }, item.label);\n                    }))\n                ])\n            ];\n        };\n        var renderPanel = function () {\n            var _a;\n            var type = props.type, transfer = props.transfer;\n            var inited = reactData.inited, animatVisible = reactData.animatVisible, visiblePanel = reactData.visiblePanel, panelPlacement = reactData.panelPlacement, panelStyle = reactData.panelStyle;\n            var vSize = computeSize.value;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var renders = [];\n            if (isDatePickerType) {\n                if (type === 'datetime') {\n                    renders.push(h('div', {\n                        class: 'vxe-input--panel-layout-wrapper'\n                    }, [\n                        h('div', {\n                            class: 'vxe-input--panel-left-wrapper'\n                        }, renderDatePanel()),\n                        h('div', {\n                            class: 'vxe-input--panel-right-wrapper'\n                        }, renderTimePanel())\n                    ]));\n                }\n                else if (type === 'time') {\n                    renders.push(h('div', {\n                        class: 'vxe-input--panel-wrapper'\n                    }, renderTimePanel()));\n                }\n                else {\n                    renders.push(h('div', {\n                        class: 'vxe-input--panel-wrapper'\n                    }, renderDatePanel()));\n                }\n                return h(Teleport, {\n                    to: 'body',\n                    disabled: transfer ? !inited : true\n                }, [\n                    h('div', {\n                        ref: refInputPanel,\n                        class: ['vxe-table--ignore-clear vxe-input--panel', \"type--\".concat(type), (_a = {},\n                                _a[\"size--\".concat(vSize)] = vSize,\n                                _a['is--transfer'] = transfer,\n                                _a['animat--leave'] = animatVisible,\n                                _a['animat--enter'] = visiblePanel,\n                                _a)],\n                        placement: panelPlacement,\n                        style: panelStyle\n                    }, renders)\n                ]);\n            }\n            return null;\n        };\n        var renderNumberIcon = function () {\n            var isDisabledAddNumber = computeIsDisabledAddNumber.value;\n            var isDisabledSubtractNumber = computeIsDisabledSubtractNumber.value;\n            return h('span', {\n                class: 'vxe-input--number-suffix'\n            }, [\n                h('span', {\n                    class: ['vxe-input--number-prev is--prev', {\n                            'is--disabled': isDisabledAddNumber\n                        }],\n                    onMousedown: numberMousedownEvent,\n                    onMouseup: numberStopDown,\n                    onMouseleave: numberStopDown\n                }, [\n                    h('i', {\n                        class: ['vxe-input--number-prev-icon', GlobalConfig.icon.INPUT_PREV_NUM]\n                    })\n                ]),\n                h('span', {\n                    class: ['vxe-input--number-next is--next', {\n                            'is--disabled': isDisabledSubtractNumber\n                        }],\n                    onMousedown: numberMousedownEvent,\n                    onMouseup: numberStopDown,\n                    onMouseleave: numberStopDown\n                }, [\n                    h('i', {\n                        class: ['vxe-input--number-next-icon', GlobalConfig.icon.INPUT_NEXT_NUM]\n                    })\n                ])\n            ]);\n        };\n        var renderDatePickerIcon = function () {\n            return h('span', {\n                class: 'vxe-input--date-picker-suffix',\n                onClick: datePickerOpenEvent\n            }, [\n                h('i', {\n                    class: ['vxe-input--date-picker-icon', GlobalConfig.icon.INPUT_DATE]\n                })\n            ]);\n        };\n        var renderSearchIcon = function () {\n            return h('span', {\n                class: 'vxe-input--search-suffix',\n                onClick: searchEvent\n            }, [\n                h('i', {\n                    class: ['vxe-input--search-icon', GlobalConfig.icon.INPUT_SEARCH]\n                })\n            ]);\n        };\n        var renderPasswordIcon = function () {\n            var showPwd = reactData.showPwd;\n            return h('span', {\n                class: 'vxe-input--password-suffix',\n                onClick: passwordToggleEvent\n            }, [\n                h('i', {\n                    class: ['vxe-input--password-icon', showPwd ? GlobalConfig.icon.INPUT_SHOW_PWD : GlobalConfig.icon.INPUT_PWD]\n                })\n            ]);\n        };\n        var rendePrefixIcon = function () {\n            var prefixIcon = props.prefixIcon;\n            var prefixSlot = slots.prefix;\n            var icons = [];\n            if (prefixSlot) {\n                icons.push(h('span', {\n                    class: 'vxe-input--prefix-icon'\n                }, prefixSlot({})));\n            }\n            else if (prefixIcon) {\n                icons.push(h('i', {\n                    class: ['vxe-input--prefix-icon', prefixIcon]\n                }));\n            }\n            return icons.length ? h('span', {\n                class: 'vxe-input--prefix',\n                onClick: clickPrefixEvent\n            }, icons) : null;\n        };\n        var renderSuffixIcon = function () {\n            var disabled = props.disabled, suffixIcon = props.suffixIcon;\n            var inputValue = reactData.inputValue;\n            var suffixSlot = slots.suffix;\n            var isClearable = computeIsClearable.value;\n            var icons = [];\n            if (suffixSlot) {\n                icons.push(h('span', {\n                    class: 'vxe-input--suffix-icon'\n                }, suffixSlot({})));\n            }\n            else if (suffixIcon) {\n                icons.push(h('i', {\n                    class: ['vxe-input--suffix-icon', suffixIcon]\n                }));\n            }\n            if (isClearable) {\n                icons.push(h('i', {\n                    class: ['vxe-input--clear-icon', GlobalConfig.icon.INPUT_CLEAR]\n                }));\n            }\n            return icons.length ? h('span', {\n                class: ['vxe-input--suffix', {\n                        'is--clear': isClearable && !disabled && !(inputValue === '' || XEUtils.eqNull(inputValue))\n                    }],\n                onClick: clickSuffixEvent\n            }, icons) : null;\n        };\n        var renderExtraSuffixIcon = function () {\n            var controls = props.controls;\n            var isNumType = computeIsNumType.value;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var isPawdType = computeIsPawdType.value;\n            var isSearchType = computeIsSearchType.value;\n            var icons;\n            if (isPawdType) {\n                icons = renderPasswordIcon();\n            }\n            else if (isNumType) {\n                if (controls) {\n                    icons = renderNumberIcon();\n                }\n            }\n            else if (isDatePickerType) {\n                icons = renderDatePickerIcon();\n            }\n            else if (isSearchType) {\n                icons = renderSearchIcon();\n            }\n            return icons ? h('span', {\n                class: 'vxe-input--extra-suffix'\n            }, [icons]) : null;\n        };\n        inputMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $input: $xeinput, $event: evnt }, params));\n            },\n            focus: function () {\n                var inputElem = refInputTarget.value;\n                reactData.isActivated = true;\n                inputElem.focus();\n                return nextTick();\n            },\n            blur: function () {\n                var inputElem = refInputTarget.value;\n                inputElem.blur();\n                reactData.isActivated = false;\n                return nextTick();\n            },\n            select: function () {\n                var inputElem = refInputTarget.value;\n                inputElem.select();\n                reactData.isActivated = false;\n                return nextTick();\n            },\n            showPanel: showPanel,\n            hidePanel: hidePanel,\n            updatePlacement: updatePlacement\n        };\n        Object.assign($xeinput, inputMethods);\n        watch(function () { return props.modelValue; }, function (val) {\n            reactData.inputValue = val;\n            changeValue();\n        });\n        watch(function () { return props.type; }, function () {\n            // 切换类型是重置内置变量\n            Object.assign(reactData, {\n                inputValue: props.modelValue,\n                datetimePanelValue: null,\n                datePanelValue: null,\n                datePanelLabel: '',\n                datePanelType: 'day',\n                selectMonth: null,\n                currentDate: null\n            });\n            initValue();\n        });\n        watch(computeDateLabelFormat, function () {\n            var isDatePickerType = computeIsDatePickerType.value;\n            if (isDatePickerType) {\n                dateParseValue(reactData.datePanelValue);\n                reactData.inputValue = props.multiple ? computeDateMultipleLabel.value : reactData.datePanelLabel;\n            }\n        });\n        nextTick(function () {\n            GlobalEvent.on($xeinput, 'mousewheel', handleGlobalMousewheelEvent);\n            GlobalEvent.on($xeinput, 'mousedown', handleGlobalMousedownEvent);\n            GlobalEvent.on($xeinput, 'keydown', handleGlobalKeydownEvent);\n            GlobalEvent.on($xeinput, 'blur', handleGlobalBlurEvent);\n        });\n        onUnmounted(function () {\n            numberStopDown();\n            GlobalEvent.off($xeinput, 'mousewheel');\n            GlobalEvent.off($xeinput, 'mousedown');\n            GlobalEvent.off($xeinput, 'keydown');\n            GlobalEvent.off($xeinput, 'blur');\n        });\n        initValue();\n        var renderVN = function () {\n            var _a;\n            var className = props.className, controls = props.controls, type = props.type, align = props.align, showWordCount = props.showWordCount, countMethod = props.countMethod, name = props.name, disabled = props.disabled, readonly = props.readonly, autocomplete = props.autocomplete;\n            var inputValue = reactData.inputValue, visiblePanel = reactData.visiblePanel, isActivated = reactData.isActivated;\n            var vSize = computeSize.value;\n            var isCountError = computeIsCountError.value;\n            var inputCount = computeInputCount.value;\n            var isDatePickerType = computeIsDatePickerType.value;\n            var inpReadonly = computeInpReadonly.value;\n            var inpMaxlength = computeInpMaxlength.value;\n            var inputType = computeInputType.value;\n            var inpPlaceholder = computeInpPlaceholder.value;\n            var childs = [];\n            var prefix = rendePrefixIcon();\n            var suffix = renderSuffixIcon();\n            // 前缀图标\n            if (prefix) {\n                childs.push(prefix);\n            }\n            // 输入框\n            childs.push(h('input', {\n                ref: refInputTarget,\n                class: 'vxe-input--inner',\n                value: inputValue,\n                name: name,\n                type: inputType,\n                placeholder: inpPlaceholder,\n                maxlength: inpMaxlength,\n                readonly: inpReadonly,\n                disabled: disabled,\n                autocomplete: autocomplete,\n                onKeydown: keydownEvent,\n                onKeyup: keyupEvent,\n                onWheel: wheelEvent,\n                onClick: clickEvent,\n                onInput: inputEvent,\n                onChange: changeEvent,\n                onFocus: focusEvent,\n                onBlur: blurEvent\n            }));\n            // 后缀图标\n            if (suffix) {\n                childs.push(suffix);\n            }\n            // 特殊功能图标\n            childs.push(renderExtraSuffixIcon());\n            // 面板容器\n            if (isDatePickerType) {\n                childs.push(renderPanel());\n            }\n            var isWordCount = false;\n            // 统计字数\n            if (showWordCount && ['text', 'search'].includes(type)) {\n                isWordCount = true;\n                childs.push(h('span', {\n                    class: ['vxe-input--count', {\n                            'is--error': isCountError\n                        }]\n                }, countMethod ? \"\".concat(countMethod({ value: inputValue })) : \"\".concat(inputCount).concat(inpMaxlength ? \"/\".concat(inpMaxlength) : '')));\n            }\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-input', \"type--\".concat(type), className, (_a = {},\n                        _a[\"size--\".concat(vSize)] = vSize,\n                        _a[\"is--\".concat(align)] = align,\n                        _a['is--controls'] = controls,\n                        _a['is--prefix'] = !!prefix,\n                        _a['is--suffix'] = !!suffix,\n                        _a['is--readonly'] = readonly,\n                        _a['is--visivle'] = visiblePanel,\n                        _a['is--count'] = isWordCount,\n                        _a['is--disabled'] = disabled,\n                        _a['is--active'] = isActivated,\n                        _a)]\n            }, childs);\n        };\n        $xeinput.renderVN = renderVN;\n        return $xeinput;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767786,
      "end": 1714699767786,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767786,
      "end": 1714699767786,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767786,
      "end": 1714699767787,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767787,
      "end": 1714699767787,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767787,
      "end": 1714699767787,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767787,
      "end": 1714699767787,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767787,
      "end": 1714699767787,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767787,
      "end": 1714699767791,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767791,
      "end": 1714699767791,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767791,
      "end": 1714699767791,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767791,
      "end": 1714699767791,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767791,
      "end": 1714699767791,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767791,
      "end": 1714699767791,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767791,
      "end": 1714699767791,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767791,
      "end": 1714699767791,
      "order": "normal"
    }
  ]
}

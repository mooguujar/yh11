{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isEmpty.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import baseKeys from './_baseKeys.js';\nimport getTag from './_getTag.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLike from './isArrayLike.js';\nimport isBuffer from './isBuffer.js';\nimport isPrototype from './_isPrototype.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEmpty;\n",
      "start": 1714699768400,
      "end": 1714699768424,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import baseKeys from './_baseKeys.js';\nimport getTag from './_getTag.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLike from './isArrayLike.js';\nimport isBuffer from './isBuffer.js';\nimport isPrototype from './_isPrototype.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEmpty;\n",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768424,
      "end": 1714699768424,
      "order": "normal"
    }
  ]
}

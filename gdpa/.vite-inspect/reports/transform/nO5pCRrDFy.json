{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vant@4.8.4_vue@3.4.19/node_modules/vant/es/config-provider/ConfigProvider.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode as _createVNode } from \"vue\";\nimport { watch, provide, computed, watchEffect, onActivated, onDeactivated, onBeforeUnmount, defineComponent } from \"vue\";\nimport { extend, inBrowser, kebabCase, makeStringProp, createNamespace } from \"../utils/index.mjs\";\nimport { setGlobalZIndex } from \"../composables/use-global-z-index.mjs\";\nconst [name, bem] = createNamespace(\"config-provider\");\nconst CONFIG_PROVIDER_KEY = Symbol(name);\nconst configProviderProps = {\n  tag: makeStringProp(\"div\"),\n  theme: makeStringProp(\"light\"),\n  zIndex: Number,\n  themeVars: Object,\n  themeVarsDark: Object,\n  themeVarsLight: Object,\n  themeVarsScope: makeStringProp(\"local\"),\n  iconPrefix: String\n};\nfunction insertDash(str) {\n  return str.replace(/([a-zA-Z])(\\d)/g, \"$1-$2\");\n}\nfunction mapThemeVarsToCSSVars(themeVars) {\n  const cssVars = {};\n  Object.keys(themeVars).forEach((key) => {\n    const formattedKey = insertDash(kebabCase(key));\n    cssVars[`--van-${formattedKey}`] = themeVars[key];\n  });\n  return cssVars;\n}\nfunction syncThemeVarsOnRoot(newStyle = {}, oldStyle = {}) {\n  Object.keys(newStyle).forEach((key) => {\n    if (newStyle[key] !== oldStyle[key]) {\n      document.documentElement.style.setProperty(key, newStyle[key]);\n    }\n  });\n  Object.keys(oldStyle).forEach((key) => {\n    if (!newStyle[key]) {\n      document.documentElement.style.removeProperty(key);\n    }\n  });\n}\nvar stdin_default = defineComponent({\n  name,\n  props: configProviderProps,\n  setup(props, {\n    slots\n  }) {\n    const style = computed(() => mapThemeVarsToCSSVars(extend({}, props.themeVars, props.theme === \"dark\" ? props.themeVarsDark : props.themeVarsLight)));\n    if (inBrowser) {\n      const addTheme = () => {\n        document.documentElement.classList.add(`van-theme-${props.theme}`);\n      };\n      const removeTheme = (theme = props.theme) => {\n        document.documentElement.classList.remove(`van-theme-${theme}`);\n      };\n      watch(() => props.theme, (newVal, oldVal) => {\n        if (oldVal) {\n          removeTheme(oldVal);\n        }\n        addTheme();\n      }, {\n        immediate: true\n      });\n      onActivated(addTheme);\n      onDeactivated(removeTheme);\n      onBeforeUnmount(removeTheme);\n      watch(style, (newStyle, oldStyle) => {\n        if (props.themeVarsScope === \"global\") {\n          syncThemeVarsOnRoot(newStyle, oldStyle);\n        }\n      });\n      watch(() => props.themeVarsScope, (newScope, oldScope) => {\n        if (oldScope === \"global\") {\n          syncThemeVarsOnRoot({}, style.value);\n        }\n        if (newScope === \"global\") {\n          syncThemeVarsOnRoot(style.value, {});\n        }\n      });\n      if (props.themeVarsScope === \"global\") {\n        syncThemeVarsOnRoot(style.value, {});\n      }\n    }\n    provide(CONFIG_PROVIDER_KEY, props);\n    watchEffect(() => {\n      if (props.zIndex !== void 0) {\n        setGlobalZIndex(props.zIndex);\n      }\n    });\n    return () => _createVNode(props.tag, {\n      \"class\": bem(),\n      \"style\": props.themeVarsScope === \"local\" ? style.value : void 0\n    }, {\n      default: () => {\n        var _a;\n        return [(_a = slots.default) == null ? void 0 : _a.call(slots)];\n      }\n    });\n  }\n});\nexport {\n  CONFIG_PROVIDER_KEY,\n  configProviderProps,\n  stdin_default as default\n};\n",
      "start": 1714699767188,
      "end": 1714699767248,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import { createVNode as _createVNode } from \"vue\";\nimport { watch, provide, computed, watchEffect, onActivated, onDeactivated, onBeforeUnmount, defineComponent } from \"vue\";\nimport { extend, inBrowser, kebabCase, makeStringProp, createNamespace } from \"../utils/index.mjs\";\nimport { setGlobalZIndex } from \"../composables/use-global-z-index.mjs\";\nconst [name, bem] = createNamespace(\"config-provider\");\nconst CONFIG_PROVIDER_KEY = Symbol(name);\nconst configProviderProps = {\n  tag: makeStringProp(\"div\"),\n  theme: makeStringProp(\"light\"),\n  zIndex: Number,\n  themeVars: Object,\n  themeVarsDark: Object,\n  themeVarsLight: Object,\n  themeVarsScope: makeStringProp(\"local\"),\n  iconPrefix: String\n};\nfunction insertDash(str) {\n  return str.replace(/([a-zA-Z])(\\d)/g, \"$1-$2\");\n}\nfunction mapThemeVarsToCSSVars(themeVars) {\n  const cssVars = {};\n  Object.keys(themeVars).forEach((key) => {\n    const formattedKey = insertDash(kebabCase(key));\n    cssVars[`--van-${formattedKey}`] = themeVars[key];\n  });\n  return cssVars;\n}\nfunction syncThemeVarsOnRoot(newStyle = {}, oldStyle = {}) {\n  Object.keys(newStyle).forEach((key) => {\n    if (newStyle[key] !== oldStyle[key]) {\n      document.documentElement.style.setProperty(key, newStyle[key]);\n    }\n  });\n  Object.keys(oldStyle).forEach((key) => {\n    if (!newStyle[key]) {\n      document.documentElement.style.removeProperty(key);\n    }\n  });\n}\nvar stdin_default = defineComponent({\n  name,\n  props: configProviderProps,\n  setup(props, {\n    slots\n  }) {\n    const style = computed(() => mapThemeVarsToCSSVars(extend({}, props.themeVars, props.theme === \"dark\" ? props.themeVarsDark : props.themeVarsLight)));\n    if (inBrowser) {\n      const addTheme = () => {\n        document.documentElement.classList.add(`van-theme-${props.theme}`);\n      };\n      const removeTheme = (theme = props.theme) => {\n        document.documentElement.classList.remove(`van-theme-${theme}`);\n      };\n      watch(() => props.theme, (newVal, oldVal) => {\n        if (oldVal) {\n          removeTheme(oldVal);\n        }\n        addTheme();\n      }, {\n        immediate: true\n      });\n      onActivated(addTheme);\n      onDeactivated(removeTheme);\n      onBeforeUnmount(removeTheme);\n      watch(style, (newStyle, oldStyle) => {\n        if (props.themeVarsScope === \"global\") {\n          syncThemeVarsOnRoot(newStyle, oldStyle);\n        }\n      });\n      watch(() => props.themeVarsScope, (newScope, oldScope) => {\n        if (oldScope === \"global\") {\n          syncThemeVarsOnRoot({}, style.value);\n        }\n        if (newScope === \"global\") {\n          syncThemeVarsOnRoot(style.value, {});\n        }\n      });\n      if (props.themeVarsScope === \"global\") {\n        syncThemeVarsOnRoot(style.value, {});\n      }\n    }\n    provide(CONFIG_PROVIDER_KEY, props);\n    watchEffect(() => {\n      if (props.zIndex !== void 0) {\n        setGlobalZIndex(props.zIndex);\n      }\n    });\n    return () => _createVNode(props.tag, {\n      \"class\": bem(),\n      \"style\": props.themeVarsScope === \"local\" ? style.value : void 0\n    }, {\n      default: () => {\n        var _a;\n        return [(_a = slots.default) == null ? void 0 : _a.call(slots)];\n      }\n    });\n  }\n});\nexport {\n  CONFIG_PROVIDER_KEY,\n  configProviderProps,\n  stdin_default as default\n};\n",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767248,
      "end": 1714699767248,
      "order": "normal"
    }
  ]
}

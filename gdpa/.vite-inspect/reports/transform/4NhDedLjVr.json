{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vant@4.8.4_vue@3.4.19/node_modules/vant/es/checkbox/Checkbox.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { watch, computed, defineComponent } from \"vue\";\nimport { pick, extend, truthProp, createNamespace } from \"../utils/index.mjs\";\nimport { CHECKBOX_GROUP_KEY } from \"../checkbox-group/CheckboxGroup.mjs\";\nimport { useParent, useCustomFieldValue } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport Checker, { checkerProps } from \"./Checker.mjs\";\nconst [name, bem] = createNamespace(\"checkbox\");\nconst checkboxProps = extend({}, checkerProps, {\n  shape: String,\n  bindGroup: truthProp,\n  indeterminate: {\n    type: Boolean,\n    default: null\n  }\n});\nvar stdin_default = defineComponent({\n  name,\n  props: checkboxProps,\n  emits: [\"change\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const {\n      parent\n    } = useParent(CHECKBOX_GROUP_KEY);\n    const setParentValue = (checked2) => {\n      const {\n        name: name2\n      } = props;\n      const {\n        max,\n        modelValue\n      } = parent.props;\n      const value = modelValue.slice();\n      if (checked2) {\n        const overlimit = max && value.length >= +max;\n        if (!overlimit && !value.includes(name2)) {\n          value.push(name2);\n          if (props.bindGroup) {\n            parent.updateValue(value);\n          }\n        }\n      } else {\n        const index = value.indexOf(name2);\n        if (index !== -1) {\n          value.splice(index, 1);\n          if (props.bindGroup) {\n            parent.updateValue(value);\n          }\n        }\n      }\n    };\n    const checked = computed(() => {\n      if (parent && props.bindGroup) {\n        return parent.props.modelValue.indexOf(props.name) !== -1;\n      }\n      return !!props.modelValue;\n    });\n    const toggle = (newValue = !checked.value) => {\n      if (parent && props.bindGroup) {\n        setParentValue(newValue);\n      } else {\n        emit(\"update:modelValue\", newValue);\n      }\n      if (props.indeterminate !== null)\n        emit(\"change\", newValue);\n    };\n    watch(() => props.modelValue, (value) => {\n      if (props.indeterminate === null)\n        emit(\"change\", value);\n    });\n    useExpose({\n      toggle,\n      props,\n      checked\n    });\n    useCustomFieldValue(() => props.modelValue);\n    return () => _createVNode(Checker, _mergeProps({\n      \"bem\": bem,\n      \"role\": \"checkbox\",\n      \"parent\": parent,\n      \"checked\": checked.value,\n      \"onToggle\": toggle\n    }, props), pick(slots, [\"default\", \"icon\"]));\n  }\n});\nexport {\n  checkboxProps,\n  stdin_default as default\n};\n",
      "start": 1714699767166,
      "end": 1714699767247,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { watch, computed, defineComponent } from \"vue\";\nimport { pick, extend, truthProp, createNamespace } from \"../utils/index.mjs\";\nimport { CHECKBOX_GROUP_KEY } from \"../checkbox-group/CheckboxGroup.mjs\";\nimport { useParent, useCustomFieldValue } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport Checker, { checkerProps } from \"./Checker.mjs\";\nconst [name, bem] = createNamespace(\"checkbox\");\nconst checkboxProps = extend({}, checkerProps, {\n  shape: String,\n  bindGroup: truthProp,\n  indeterminate: {\n    type: Boolean,\n    default: null\n  }\n});\nvar stdin_default = defineComponent({\n  name,\n  props: checkboxProps,\n  emits: [\"change\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const {\n      parent\n    } = useParent(CHECKBOX_GROUP_KEY);\n    const setParentValue = (checked2) => {\n      const {\n        name: name2\n      } = props;\n      const {\n        max,\n        modelValue\n      } = parent.props;\n      const value = modelValue.slice();\n      if (checked2) {\n        const overlimit = max && value.length >= +max;\n        if (!overlimit && !value.includes(name2)) {\n          value.push(name2);\n          if (props.bindGroup) {\n            parent.updateValue(value);\n          }\n        }\n      } else {\n        const index = value.indexOf(name2);\n        if (index !== -1) {\n          value.splice(index, 1);\n          if (props.bindGroup) {\n            parent.updateValue(value);\n          }\n        }\n      }\n    };\n    const checked = computed(() => {\n      if (parent && props.bindGroup) {\n        return parent.props.modelValue.indexOf(props.name) !== -1;\n      }\n      return !!props.modelValue;\n    });\n    const toggle = (newValue = !checked.value) => {\n      if (parent && props.bindGroup) {\n        setParentValue(newValue);\n      } else {\n        emit(\"update:modelValue\", newValue);\n      }\n      if (props.indeterminate !== null)\n        emit(\"change\", newValue);\n    };\n    watch(() => props.modelValue, (value) => {\n      if (props.indeterminate === null)\n        emit(\"change\", value);\n    });\n    useExpose({\n      toggle,\n      props,\n      checked\n    });\n    useCustomFieldValue(() => props.modelValue);\n    return () => _createVNode(Checker, _mergeProps({\n      \"bem\": bem,\n      \"role\": \"checkbox\",\n      \"parent\": parent,\n      \"checked\": checked.value,\n      \"onToggle\": toggle\n    }, props), pick(slots, [\"default\", \"icon\"]));\n  }\n});\nexport {\n  checkboxProps,\n  stdin_default as default\n};\n",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767247,
      "end": 1714699767247,
      "order": "normal"
    }
  ]
}

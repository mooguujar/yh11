{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vant@4.8.4_vue@3.4.19/node_modules/vant/es/floating-panel/FloatingPanel.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode as _createVNode } from \"vue\";\nimport { ref, watch, computed, defineComponent } from \"vue\";\nimport { addUnit, closest, createNamespace, makeArrayProp, makeNumericProp, preventDefault, truthProp, windowHeight } from \"../utils/index.mjs\";\nimport { useEventListener } from \"@vant/use\";\nimport { useLockScroll } from \"../composables/use-lock-scroll.mjs\";\nimport { useTouch } from \"../composables/use-touch.mjs\";\nimport { useSyncPropRef } from \"../composables/use-sync-prop-ref.mjs\";\nconst floatingPanelProps = {\n  height: makeNumericProp(0),\n  anchors: makeArrayProp(),\n  duration: makeNumericProp(0.3),\n  contentDraggable: truthProp,\n  lockScroll: Boolean,\n  safeAreaInsetBottom: truthProp\n};\nconst [name, bem] = createNamespace(\"floating-panel\");\nvar stdin_default = defineComponent({\n  name,\n  props: floatingPanelProps,\n  emits: [\"heightChange\", \"update:height\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const DAMP = 0.2;\n    const rootRef = ref();\n    const contentRef = ref();\n    const height = useSyncPropRef(() => +props.height, (value) => emit(\"update:height\", value));\n    const boundary = computed(() => {\n      var _a, _b;\n      return {\n        min: (_a = props.anchors[0]) != null ? _a : 100,\n        max: (_b = props.anchors[props.anchors.length - 1]) != null ? _b : Math.round(windowHeight.value * 0.6)\n      };\n    });\n    const anchors = computed(() => props.anchors.length >= 2 ? props.anchors : [boundary.value.min, boundary.value.max]);\n    const dragging = ref(false);\n    const rootStyle = computed(() => ({\n      height: addUnit(boundary.value.max),\n      transform: `translateY(calc(100% + ${addUnit(-height.value)}))`,\n      transition: !dragging.value ? `transform ${props.duration}s cubic-bezier(0.18, 0.89, 0.32, 1.28)` : \"none\"\n    }));\n    const ease = (moveY) => {\n      const absDistance = Math.abs(moveY);\n      const {\n        min,\n        max\n      } = boundary.value;\n      if (absDistance > max) {\n        return -(max + (absDistance - max) * DAMP);\n      }\n      if (absDistance < min) {\n        return -(min - (min - absDistance) * DAMP);\n      }\n      return moveY;\n    };\n    let startY;\n    let maxScroll = -1;\n    const touch = useTouch();\n    const onTouchstart = (e) => {\n      touch.start(e);\n      dragging.value = true;\n      startY = -height.value;\n      maxScroll = -1;\n    };\n    const onTouchmove = (e) => {\n      var _a;\n      touch.move(e);\n      const target = e.target;\n      if (contentRef.value === target || ((_a = contentRef.value) == null ? void 0 : _a.contains(target))) {\n        const {\n          scrollTop\n        } = contentRef.value;\n        maxScroll = Math.max(maxScroll, scrollTop);\n        if (!props.contentDraggable)\n          return;\n        if (-startY < boundary.value.max) {\n          preventDefault(e, true);\n        } else if (!(scrollTop <= 0 && touch.deltaY.value > 0) || maxScroll > 0) {\n          return;\n        }\n      }\n      const moveY = touch.deltaY.value + startY;\n      height.value = -ease(moveY);\n    };\n    const onTouchend = () => {\n      maxScroll = -1;\n      dragging.value = false;\n      height.value = closest(anchors.value, height.value);\n      if (height.value !== -startY) {\n        emit(\"heightChange\", {\n          height: height.value\n        });\n      }\n    };\n    watch(boundary, () => {\n      height.value = closest(anchors.value, height.value);\n    }, {\n      immediate: true\n    });\n    useLockScroll(rootRef, () => props.lockScroll || dragging.value);\n    useEventListener(\"touchmove\", onTouchmove, {\n      target: rootRef\n    });\n    return () => {\n      var _a;\n      return _createVNode(\"div\", {\n        \"class\": [bem(), {\n          \"van-safe-area-bottom\": props.safeAreaInsetBottom\n        }],\n        \"ref\": rootRef,\n        \"style\": rootStyle.value,\n        \"onTouchstartPassive\": onTouchstart,\n        \"onTouchend\": onTouchend,\n        \"onTouchcancel\": onTouchend\n      }, [_createVNode(\"div\", {\n        \"class\": bem(\"header\")\n      }, [_createVNode(\"div\", {\n        \"class\": bem(\"header-bar\")\n      }, null)]), _createVNode(\"div\", {\n        \"class\": bem(\"content\"),\n        \"ref\": contentRef\n      }, [(_a = slots.default) == null ? void 0 : _a.call(slots)])]);\n    };\n  }\n});\nexport {\n  stdin_default as default,\n  floatingPanelProps\n};\n",
      "start": 1714699767249,
      "end": 1714699767293,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767293,
      "end": 1714699767293,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import { createVNode as _createVNode } from \"vue\";\nimport { ref, watch, computed, defineComponent } from \"vue\";\nimport { addUnit, closest, createNamespace, makeArrayProp, makeNumericProp, preventDefault, truthProp, windowHeight } from \"../utils/index.mjs\";\nimport { useEventListener } from \"@vant/use\";\nimport { useLockScroll } from \"../composables/use-lock-scroll.mjs\";\nimport { useTouch } from \"../composables/use-touch.mjs\";\nimport { useSyncPropRef } from \"../composables/use-sync-prop-ref.mjs\";\nconst floatingPanelProps = {\n  height: makeNumericProp(0),\n  anchors: makeArrayProp(),\n  duration: makeNumericProp(0.3),\n  contentDraggable: truthProp,\n  lockScroll: Boolean,\n  safeAreaInsetBottom: truthProp\n};\nconst [name, bem] = createNamespace(\"floating-panel\");\nvar stdin_default = defineComponent({\n  name,\n  props: floatingPanelProps,\n  emits: [\"heightChange\", \"update:height\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const DAMP = 0.2;\n    const rootRef = ref();\n    const contentRef = ref();\n    const height = useSyncPropRef(() => +props.height, (value) => emit(\"update:height\", value));\n    const boundary = computed(() => {\n      var _a, _b;\n      return {\n        min: (_a = props.anchors[0]) != null ? _a : 100,\n        max: (_b = props.anchors[props.anchors.length - 1]) != null ? _b : Math.round(windowHeight.value * 0.6)\n      };\n    });\n    const anchors = computed(() => props.anchors.length >= 2 ? props.anchors : [boundary.value.min, boundary.value.max]);\n    const dragging = ref(false);\n    const rootStyle = computed(() => ({\n      height: addUnit(boundary.value.max),\n      transform: `translateY(calc(100% + ${addUnit(-height.value)}))`,\n      transition: !dragging.value ? `transform ${props.duration}s cubic-bezier(0.18, 0.89, 0.32, 1.28)` : \"none\"\n    }));\n    const ease = (moveY) => {\n      const absDistance = Math.abs(moveY);\n      const {\n        min,\n        max\n      } = boundary.value;\n      if (absDistance > max) {\n        return -(max + (absDistance - max) * DAMP);\n      }\n      if (absDistance < min) {\n        return -(min - (min - absDistance) * DAMP);\n      }\n      return moveY;\n    };\n    let startY;\n    let maxScroll = -1;\n    const touch = useTouch();\n    const onTouchstart = (e) => {\n      touch.start(e);\n      dragging.value = true;\n      startY = -height.value;\n      maxScroll = -1;\n    };\n    const onTouchmove = (e) => {\n      var _a;\n      touch.move(e);\n      const target = e.target;\n      if (contentRef.value === target || ((_a = contentRef.value) == null ? void 0 : _a.contains(target))) {\n        const {\n          scrollTop\n        } = contentRef.value;\n        maxScroll = Math.max(maxScroll, scrollTop);\n        if (!props.contentDraggable)\n          return;\n        if (-startY < boundary.value.max) {\n          preventDefault(e, true);\n        } else if (!(scrollTop <= 0 && touch.deltaY.value > 0) || maxScroll > 0) {\n          return;\n        }\n      }\n      const moveY = touch.deltaY.value + startY;\n      height.value = -ease(moveY);\n    };\n    const onTouchend = () => {\n      maxScroll = -1;\n      dragging.value = false;\n      height.value = closest(anchors.value, height.value);\n      if (height.value !== -startY) {\n        emit(\"heightChange\", {\n          height: height.value\n        });\n      }\n    };\n    watch(boundary, () => {\n      height.value = closest(anchors.value, height.value);\n    }, {\n      immediate: true\n    });\n    useLockScroll(rootRef, () => props.lockScroll || dragging.value);\n    useEventListener(\"touchmove\", onTouchmove, {\n      target: rootRef\n    });\n    return () => {\n      var _a;\n      return _createVNode(\"div\", {\n        \"class\": [bem(), {\n          \"van-safe-area-bottom\": props.safeAreaInsetBottom\n        }],\n        \"ref\": rootRef,\n        \"style\": rootStyle.value,\n        \"onTouchstartPassive\": onTouchstart,\n        \"onTouchend\": onTouchend,\n        \"onTouchcancel\": onTouchend\n      }, [_createVNode(\"div\", {\n        \"class\": bem(\"header\")\n      }, [_createVNode(\"div\", {\n        \"class\": bem(\"header-bar\")\n      }, null)]), _createVNode(\"div\", {\n        \"class\": bem(\"content\"),\n        \"ref\": contentRef\n      }, [(_a = slots.default) == null ? void 0 : _a.call(slots)])]);\n    };\n  }\n});\nexport {\n  stdin_default as default,\n  floatingPanelProps\n};\n",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767294,
      "end": 1714699767294,
      "order": "normal"
    }
  ]
}

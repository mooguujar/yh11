{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_basePullAll.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import arrayMap from './_arrayMap.js';\nimport baseIndexOf from './_baseIndexOf.js';\nimport baseIndexOfWith from './_baseIndexOfWith.js';\nimport baseUnary from './_baseUnary.js';\nimport copyArray from './_copyArray.js';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * The base implementation of `_.pullAllBy` without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns `array`.\n */\nfunction basePullAll(array, values, iteratee, comparator) {\n  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n      index = -1,\n      length = values.length,\n      seen = array;\n\n  if (array === values) {\n    values = copyArray(values);\n  }\n  if (iteratee) {\n    seen = arrayMap(array, baseUnary(iteratee));\n  }\n  while (++index < length) {\n    var fromIndex = 0,\n        value = values[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n      if (seen !== array) {\n        splice.call(seen, fromIndex, 1);\n      }\n      splice.call(array, fromIndex, 1);\n    }\n  }\n  return array;\n}\n\nexport default basePullAll;\n",
      "start": 1714699768736,
      "end": 1714699768748,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import arrayMap from './_arrayMap.js';\nimport baseIndexOf from './_baseIndexOf.js';\nimport baseIndexOfWith from './_baseIndexOfWith.js';\nimport baseUnary from './_baseUnary.js';\nimport copyArray from './_copyArray.js';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * The base implementation of `_.pullAllBy` without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns `array`.\n */\nfunction basePullAll(array, values, iteratee, comparator) {\n  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n      index = -1,\n      length = values.length,\n      seen = array;\n\n  if (array === values) {\n    values = copyArray(values);\n  }\n  if (iteratee) {\n    seen = arrayMap(array, baseUnary(iteratee));\n  }\n  while (++index < length) {\n    var fromIndex = 0,\n        value = values[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n      if (seen !== array) {\n        splice.call(seen, fromIndex, 1);\n      }\n      splice.call(array, fromIndex, 1);\n    }\n  }\n  return array;\n}\n\nexport default basePullAll;\n",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768748,
      "end": 1714699768748,
      "order": "normal"
    }
  ]
}

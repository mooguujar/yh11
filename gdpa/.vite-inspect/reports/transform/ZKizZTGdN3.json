{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/matchesProperty.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import baseClone from './_baseClone.js';\nimport baseMatchesProperty from './_baseMatchesProperty.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1;\n\n/**\n * Creates a function that performs a partial deep comparison between the\n * value at `path` of a given object to `srcValue`, returning `true` if the\n * object value is equivalent, else `false`.\n *\n * **Note:** Partial comparisons will match empty array and empty object\n * `srcValue` values against any array or object value, respectively. See\n * `_.isEqual` for a list of supported value comparisons.\n *\n * **Note:** Multiple values can be checked by combining several matchers\n * using `_.overSome`\n *\n * @static\n * @memberOf _\n * @since 3.2.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n * @example\n *\n * var objects = [\n *   { 'a': 1, 'b': 2, 'c': 3 },\n *   { 'a': 4, 'b': 5, 'c': 6 }\n * ];\n *\n * _.find(objects, _.matchesProperty('a', 4));\n * // => { 'a': 4, 'b': 5, 'c': 6 }\n *\n * // Checking for several possible values\n * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\n * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n */\nfunction matchesProperty(path, srcValue) {\n  return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n}\n\nexport default matchesProperty;\n",
      "start": 1714699768448,
      "end": 1714699768457,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import baseClone from './_baseClone.js';\nimport baseMatchesProperty from './_baseMatchesProperty.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1;\n\n/**\n * Creates a function that performs a partial deep comparison between the\n * value at `path` of a given object to `srcValue`, returning `true` if the\n * object value is equivalent, else `false`.\n *\n * **Note:** Partial comparisons will match empty array and empty object\n * `srcValue` values against any array or object value, respectively. See\n * `_.isEqual` for a list of supported value comparisons.\n *\n * **Note:** Multiple values can be checked by combining several matchers\n * using `_.overSome`\n *\n * @static\n * @memberOf _\n * @since 3.2.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n * @example\n *\n * var objects = [\n *   { 'a': 1, 'b': 2, 'c': 3 },\n *   { 'a': 4, 'b': 5, 'c': 6 }\n * ];\n *\n * _.find(objects, _.matchesProperty('a', 4));\n * // => { 'a': 4, 'b': 5, 'c': 6 }\n *\n * // Checking for several possible values\n * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\n * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n */\nfunction matchesProperty(path, srcValue) {\n  return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n}\n\nexport default matchesProperty;\n",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768457,
      "end": 1714699768457,
      "order": "normal"
    }
  ]
}

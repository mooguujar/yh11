{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/@vant+touch-emulator@1.4.0/node_modules/@vant/touch-emulator/dist/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/* eslint-disable */\n/**\n * Emulate touch event\n * Source：https://github.com/hammerjs/touchemulator\n */\n\n(function () {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  var eventTarget;\n  var supportTouch = 'ontouchstart' in window;\n\n  // polyfills\n  if (!document.createTouch) {\n    document.createTouch = function (\n      view,\n      target,\n      identifier,\n      pageX,\n      pageY,\n      screenX,\n      screenY\n    ) {\n      // auto set\n      return new Touch(\n        target,\n        identifier,\n        {\n          pageX: pageX,\n          pageY: pageY,\n          screenX: screenX,\n          screenY: screenY,\n          clientX: pageX - window.pageXOffset,\n          clientY: pageY - window.pageYOffset,\n        },\n        0,\n        0\n      );\n    };\n  }\n\n  if (!document.createTouchList) {\n    document.createTouchList = function () {\n      var touchList = TouchList();\n      for (var i = 0; i < arguments.length; i++) {\n        touchList[i] = arguments[i];\n      }\n      touchList.length = arguments.length;\n      return touchList;\n    };\n  }\n\n  if (!Element.prototype.matches) {\n    Element.prototype.matches =\n      Element.prototype.msMatchesSelector ||\n      Element.prototype.webkitMatchesSelector;\n  }\n\n  if (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n      var el = this;\n\n      do {\n        if (el.matches(s)) return el;\n        el = el.parentElement || el.parentNode;\n      } while (el !== null && el.nodeType === 1);\n\n      return null;\n    };\n  }\n\n  /**\n   * create an touch point\n   * @constructor\n   * @param target\n   * @param identifier\n   * @param pos\n   * @param deltaX\n   * @param deltaY\n   * @returns {Object} touchPoint\n   */\n\n  var Touch = function Touch(target, identifier, pos, deltaX, deltaY) {\n    deltaX = deltaX || 0;\n    deltaY = deltaY || 0;\n\n    this.identifier = identifier;\n    this.target = target;\n    this.clientX = pos.clientX + deltaX;\n    this.clientY = pos.clientY + deltaY;\n    this.screenX = pos.screenX + deltaX;\n    this.screenY = pos.screenY + deltaY;\n    this.pageX = pos.pageX + deltaX;\n    this.pageY = pos.pageY + deltaY;\n  };\n\n  /**\n   * create empty touchlist with the methods\n   * @constructor\n   * @returns touchList\n   */\n  function TouchList() {\n    var touchList = [];\n\n    touchList['item'] = function (index) {\n      return this[index] || null;\n    };\n\n    // specified by Mozilla\n    touchList['identifiedTouch'] = function (id) {\n      return this[id + 1] || null;\n    };\n\n    return touchList;\n  }\n\n  /**\n   * only trigger touches when the left mousebutton has been pressed\n   * @param touchType\n   * @returns {Function}\n   */\n\n  var initiated = false;\n  function onMouse(touchType) {\n    return function (ev) {\n      // prevent mouse events\n\n      if (ev.type === 'mousedown') {\n        initiated = true;\n      }\n\n      if (ev.type === 'mouseup') {\n        initiated = false;\n      }\n\n      if (ev.type === 'mousemove' && !initiated) {\n        return;\n      }\n\n      // The EventTarget on which the touch point started when it was first placed on the surface,\n      // even if the touch point has since moved outside the interactive area of that element.\n      // also, when the target doesnt exist anymore, we update it\n      if (\n        ev.type === 'mousedown' ||\n        !eventTarget ||\n        (eventTarget && !eventTarget.dispatchEvent)\n      ) {\n        eventTarget = ev.target;\n      }\n\n      if (eventTarget.closest('[data-no-touch-simulate]') == null) {\n        triggerTouch(touchType, ev);\n      }\n\n      // reset\n      if (ev.type === 'mouseup') {\n        eventTarget = null;\n      }\n    };\n  }\n\n  /**\n   * trigger a touch event\n   * @param eventName\n   * @param mouseEv\n   */\n  function triggerTouch(eventName, mouseEv) {\n    var touchEvent = document.createEvent('Event');\n    touchEvent.initEvent(eventName, true, true);\n\n    touchEvent.altKey = mouseEv.altKey;\n    touchEvent.ctrlKey = mouseEv.ctrlKey;\n    touchEvent.metaKey = mouseEv.metaKey;\n    touchEvent.shiftKey = mouseEv.shiftKey;\n\n    touchEvent.touches = getActiveTouches(mouseEv);\n    touchEvent.targetTouches = getActiveTouches(mouseEv);\n    touchEvent.changedTouches = createTouchList(mouseEv);\n\n    eventTarget.dispatchEvent(touchEvent);\n  }\n\n  /**\n   * create a touchList based on the mouse event\n   * @param mouseEv\n   * @returns {TouchList}\n   */\n  function createTouchList(mouseEv) {\n    var touchList = TouchList();\n    touchList.push(new Touch(eventTarget, 1, mouseEv, 0, 0));\n    return touchList;\n  }\n\n  /**\n   * receive all active touches\n   * @param mouseEv\n   * @returns {TouchList}\n   */\n  function getActiveTouches(mouseEv) {\n    // empty list\n    if (mouseEv.type === 'mouseup') {\n      return TouchList();\n    }\n    return createTouchList(mouseEv);\n  }\n\n  /**\n   * TouchEmulator initializer\n   */\n  function TouchEmulator() {\n    window.addEventListener('mousedown', onMouse('touchstart'), true);\n    window.addEventListener('mousemove', onMouse('touchmove'), true);\n    window.addEventListener('mouseup', onMouse('touchend'), true);\n  }\n\n  // start distance when entering the multitouch mode\n  TouchEmulator['multiTouchOffset'] = 75;\n\n  if (!supportTouch) {\n    new TouchEmulator();\n  }\n})();\n",
      "start": 1714699768088,
      "end": 1714699768111,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "/* eslint-disable */\n/**\n * Emulate touch event\n * Source：https://github.com/hammerjs/touchemulator\n */\n\n(function () {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  var eventTarget;\n  var supportTouch = 'ontouchstart' in window;\n\n  // polyfills\n  if (!document.createTouch) {\n    document.createTouch = function (\n      view,\n      target,\n      identifier,\n      pageX,\n      pageY,\n      screenX,\n      screenY\n    ) {\n      // auto set\n      return new Touch(\n        target,\n        identifier,\n        {\n          pageX: pageX,\n          pageY: pageY,\n          screenX: screenX,\n          screenY: screenY,\n          clientX: pageX - window.pageXOffset,\n          clientY: pageY - window.pageYOffset,\n        },\n        0,\n        0\n      );\n    };\n  }\n\n  if (!document.createTouchList) {\n    document.createTouchList = function () {\n      var touchList = TouchList();\n      for (var i = 0; i < arguments.length; i++) {\n        touchList[i] = arguments[i];\n      }\n      touchList.length = arguments.length;\n      return touchList;\n    };\n  }\n\n  if (!Element.prototype.matches) {\n    Element.prototype.matches =\n      Element.prototype.msMatchesSelector ||\n      Element.prototype.webkitMatchesSelector;\n  }\n\n  if (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n      var el = this;\n\n      do {\n        if (el.matches(s)) return el;\n        el = el.parentElement || el.parentNode;\n      } while (el !== null && el.nodeType === 1);\n\n      return null;\n    };\n  }\n\n  /**\n   * create an touch point\n   * @constructor\n   * @param target\n   * @param identifier\n   * @param pos\n   * @param deltaX\n   * @param deltaY\n   * @returns {Object} touchPoint\n   */\n\n  var Touch = function Touch(target, identifier, pos, deltaX, deltaY) {\n    deltaX = deltaX || 0;\n    deltaY = deltaY || 0;\n\n    this.identifier = identifier;\n    this.target = target;\n    this.clientX = pos.clientX + deltaX;\n    this.clientY = pos.clientY + deltaY;\n    this.screenX = pos.screenX + deltaX;\n    this.screenY = pos.screenY + deltaY;\n    this.pageX = pos.pageX + deltaX;\n    this.pageY = pos.pageY + deltaY;\n  };\n\n  /**\n   * create empty touchlist with the methods\n   * @constructor\n   * @returns touchList\n   */\n  function TouchList() {\n    var touchList = [];\n\n    touchList['item'] = function (index) {\n      return this[index] || null;\n    };\n\n    // specified by Mozilla\n    touchList['identifiedTouch'] = function (id) {\n      return this[id + 1] || null;\n    };\n\n    return touchList;\n  }\n\n  /**\n   * only trigger touches when the left mousebutton has been pressed\n   * @param touchType\n   * @returns {Function}\n   */\n\n  var initiated = false;\n  function onMouse(touchType) {\n    return function (ev) {\n      // prevent mouse events\n\n      if (ev.type === 'mousedown') {\n        initiated = true;\n      }\n\n      if (ev.type === 'mouseup') {\n        initiated = false;\n      }\n\n      if (ev.type === 'mousemove' && !initiated) {\n        return;\n      }\n\n      // The EventTarget on which the touch point started when it was first placed on the surface,\n      // even if the touch point has since moved outside the interactive area of that element.\n      // also, when the target doesnt exist anymore, we update it\n      if (\n        ev.type === 'mousedown' ||\n        !eventTarget ||\n        (eventTarget && !eventTarget.dispatchEvent)\n      ) {\n        eventTarget = ev.target;\n      }\n\n      if (eventTarget.closest('[data-no-touch-simulate]') == null) {\n        triggerTouch(touchType, ev);\n      }\n\n      // reset\n      if (ev.type === 'mouseup') {\n        eventTarget = null;\n      }\n    };\n  }\n\n  /**\n   * trigger a touch event\n   * @param eventName\n   * @param mouseEv\n   */\n  function triggerTouch(eventName, mouseEv) {\n    var touchEvent = document.createEvent('Event');\n    touchEvent.initEvent(eventName, true, true);\n\n    touchEvent.altKey = mouseEv.altKey;\n    touchEvent.ctrlKey = mouseEv.ctrlKey;\n    touchEvent.metaKey = mouseEv.metaKey;\n    touchEvent.shiftKey = mouseEv.shiftKey;\n\n    touchEvent.touches = getActiveTouches(mouseEv);\n    touchEvent.targetTouches = getActiveTouches(mouseEv);\n    touchEvent.changedTouches = createTouchList(mouseEv);\n\n    eventTarget.dispatchEvent(touchEvent);\n  }\n\n  /**\n   * create a touchList based on the mouse event\n   * @param mouseEv\n   * @returns {TouchList}\n   */\n  function createTouchList(mouseEv) {\n    var touchList = TouchList();\n    touchList.push(new Touch(eventTarget, 1, mouseEv, 0, 0));\n    return touchList;\n  }\n\n  /**\n   * receive all active touches\n   * @param mouseEv\n   * @returns {TouchList}\n   */\n  function getActiveTouches(mouseEv) {\n    // empty list\n    if (mouseEv.type === 'mouseup') {\n      return TouchList();\n    }\n    return createTouchList(mouseEv);\n  }\n\n  /**\n   * TouchEmulator initializer\n   */\n  function TouchEmulator() {\n    window.addEventListener('mousedown', onMouse('touchstart'), true);\n    window.addEventListener('mousemove', onMouse('touchmove'), true);\n    window.addEventListener('mouseup', onMouse('touchend'), true);\n  }\n\n  // start distance when entering the multitouch mode\n  TouchEmulator['multiTouchOffset'] = 75;\n\n  if (!supportTouch) {\n    new TouchEmulator();\n  }\n})();\n",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768111,
      "end": 1714699768111,
      "order": "normal"
    }
  ]
}

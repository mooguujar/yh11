{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vant@4.8.4_vue@3.4.19/node_modules/vant/es/barrage/Barrage.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nimport { createVNode as _createVNode } from \"vue\";\nimport { defineComponent, onMounted, ref, nextTick, watch } from \"vue\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { createNamespace, makeArrayProp, makeNumberProp, makeNumericProp, truthProp } from \"../utils/index.mjs\";\nconst barrageProps = {\n  top: makeNumericProp(10),\n  rows: makeNumericProp(4),\n  duration: makeNumericProp(4e3),\n  autoPlay: truthProp,\n  delay: makeNumberProp(300),\n  modelValue: makeArrayProp()\n};\nconst [name, bem] = createNamespace(\"barrage\");\nvar stdin_default = defineComponent({\n  name,\n  props: barrageProps,\n  emits: [\"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const barrageWrapper = ref();\n    const className = bem(\"item\");\n    const total = ref(0);\n    const barrageItems = [];\n    const createBarrageItem = (text, delay = props.delay) => {\n      const item = document.createElement(\"span\");\n      item.className = className;\n      item.innerText = String(text);\n      item.style.animationDuration = `${props.duration}ms`;\n      item.style.animationDelay = `${delay}ms`;\n      item.style.animationName = \"van-barrage\";\n      item.style.animationTimingFunction = \"linear\";\n      return item;\n    };\n    const isInitBarrage = ref(true);\n    const isPlay = ref(props.autoPlay);\n    const appendBarrageItem = ({\n      id,\n      text\n    }, i) => {\n      var _a;\n      const item = createBarrageItem(text, isInitBarrage.value ? i * props.delay : void 0);\n      if (!props.autoPlay && isPlay.value === false) {\n        item.style.animationPlayState = \"paused\";\n      }\n      (_a = barrageWrapper.value) == null ? void 0 : _a.append(item);\n      total.value++;\n      const top = (total.value - 1) % +props.rows * item.offsetHeight + +props.top;\n      item.style.top = `${top}px`;\n      item.dataset.id = String(id);\n      barrageItems.push(item);\n      item.addEventListener(\"animationend\", () => {\n        emit(\"update:modelValue\", [...props.modelValue].filter((v) => String(v.id) !== item.dataset.id));\n      });\n    };\n    const updateBarrages = (newValue, oldValue) => {\n      const map = new Map(oldValue.map((item) => [item.id, item]));\n      newValue.forEach((item, i) => {\n        if (map.has(item.id)) {\n          map.delete(item.id);\n        } else {\n          appendBarrageItem(item, i);\n        }\n      });\n      map.forEach((item) => {\n        const index = barrageItems.findIndex((span) => span.dataset.id === String(item.id));\n        if (index > -1) {\n          barrageItems[index].remove();\n          barrageItems.splice(index, 1);\n        }\n      });\n      isInitBarrage.value = false;\n    };\n    watch(() => props.modelValue.slice(), (newValue, oldValue) => updateBarrages(newValue != null ? newValue : [], oldValue != null ? oldValue : []), {\n      deep: true\n    });\n    const rootStyle = ref({});\n    onMounted(() => __async(this, null, function* () {\n      var _a;\n      rootStyle.value[\"--move-distance\"] = `-${(_a = barrageWrapper.value) == null ? void 0 : _a.offsetWidth}px`;\n      yield nextTick();\n      updateBarrages(props.modelValue, []);\n    }));\n    const play = () => {\n      isPlay.value = true;\n      barrageItems.forEach((item) => {\n        item.style.animationPlayState = \"running\";\n      });\n    };\n    const pause = () => {\n      isPlay.value = false;\n      barrageItems.forEach((item) => {\n        item.style.animationPlayState = \"paused\";\n      });\n    };\n    useExpose({\n      play,\n      pause\n    });\n    return () => {\n      var _a;\n      return _createVNode(\"div\", {\n        \"class\": bem(),\n        \"ref\": barrageWrapper,\n        \"style\": rootStyle.value\n      }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]);\n    };\n  }\n});\nexport {\n  barrageProps,\n  stdin_default as default\n};\n",
      "start": 1714699767148,
      "end": 1714699767189,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "var __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nimport { createVNode as _createVNode } from \"vue\";\nimport { defineComponent, onMounted, ref, nextTick, watch } from \"vue\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { createNamespace, makeArrayProp, makeNumberProp, makeNumericProp, truthProp } from \"../utils/index.mjs\";\nconst barrageProps = {\n  top: makeNumericProp(10),\n  rows: makeNumericProp(4),\n  duration: makeNumericProp(4e3),\n  autoPlay: truthProp,\n  delay: makeNumberProp(300),\n  modelValue: makeArrayProp()\n};\nconst [name, bem] = createNamespace(\"barrage\");\nvar stdin_default = defineComponent({\n  name,\n  props: barrageProps,\n  emits: [\"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const barrageWrapper = ref();\n    const className = bem(\"item\");\n    const total = ref(0);\n    const barrageItems = [];\n    const createBarrageItem = (text, delay = props.delay) => {\n      const item = document.createElement(\"span\");\n      item.className = className;\n      item.innerText = String(text);\n      item.style.animationDuration = `${props.duration}ms`;\n      item.style.animationDelay = `${delay}ms`;\n      item.style.animationName = \"van-barrage\";\n      item.style.animationTimingFunction = \"linear\";\n      return item;\n    };\n    const isInitBarrage = ref(true);\n    const isPlay = ref(props.autoPlay);\n    const appendBarrageItem = ({\n      id,\n      text\n    }, i) => {\n      var _a;\n      const item = createBarrageItem(text, isInitBarrage.value ? i * props.delay : void 0);\n      if (!props.autoPlay && isPlay.value === false) {\n        item.style.animationPlayState = \"paused\";\n      }\n      (_a = barrageWrapper.value) == null ? void 0 : _a.append(item);\n      total.value++;\n      const top = (total.value - 1) % +props.rows * item.offsetHeight + +props.top;\n      item.style.top = `${top}px`;\n      item.dataset.id = String(id);\n      barrageItems.push(item);\n      item.addEventListener(\"animationend\", () => {\n        emit(\"update:modelValue\", [...props.modelValue].filter((v) => String(v.id) !== item.dataset.id));\n      });\n    };\n    const updateBarrages = (newValue, oldValue) => {\n      const map = new Map(oldValue.map((item) => [item.id, item]));\n      newValue.forEach((item, i) => {\n        if (map.has(item.id)) {\n          map.delete(item.id);\n        } else {\n          appendBarrageItem(item, i);\n        }\n      });\n      map.forEach((item) => {\n        const index = barrageItems.findIndex((span) => span.dataset.id === String(item.id));\n        if (index > -1) {\n          barrageItems[index].remove();\n          barrageItems.splice(index, 1);\n        }\n      });\n      isInitBarrage.value = false;\n    };\n    watch(() => props.modelValue.slice(), (newValue, oldValue) => updateBarrages(newValue != null ? newValue : [], oldValue != null ? oldValue : []), {\n      deep: true\n    });\n    const rootStyle = ref({});\n    onMounted(() => __async(this, null, function* () {\n      var _a;\n      rootStyle.value[\"--move-distance\"] = `-${(_a = barrageWrapper.value) == null ? void 0 : _a.offsetWidth}px`;\n      yield nextTick();\n      updateBarrages(props.modelValue, []);\n    }));\n    const play = () => {\n      isPlay.value = true;\n      barrageItems.forEach((item) => {\n        item.style.animationPlayState = \"running\";\n      });\n    };\n    const pause = () => {\n      isPlay.value = false;\n      barrageItems.forEach((item) => {\n        item.style.animationPlayState = \"paused\";\n      });\n    };\n    useExpose({\n      play,\n      pause\n    });\n    return () => {\n      var _a;\n      return _createVNode(\"div\", {\n        \"class\": bem(),\n        \"ref\": barrageWrapper,\n        \"style\": rootStyle.value\n      }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]);\n    };\n  }\n});\nexport {\n  barrageProps,\n  stdin_default as default\n};\n",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767189,
      "end": 1714699767189,
      "order": "normal"
    }
  ]
}

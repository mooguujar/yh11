{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/grid/src/grid.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { defineComponent, h, ref, computed, provide, getCurrentInstance, resolveComponent, reactive, onUnmounted, watch, nextTick, onMounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { getLastZIndex, nextZIndex, isEnableConf } from '../../tools/utils';\nimport { getOffsetHeight, getPaddingTopBottomSize, getDomNode } from '../../tools/dom';\nimport { errLog } from '../../tools/log';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { VXETable } from '../../v-x-e-table';\nimport tableComponentProps from '../../table/src/props';\nimport tableComponentEmits from '../../table/src/emits';\nimport { useSize } from '../../hooks/size';\nimport { GlobalEvent, hasEventKey, EVENT_KEYS } from '../../tools/event';\nimport { getSlotVNs } from '../../tools/vn';\nvar tableComponentPropKeys = Object.keys(tableComponentProps);\nvar tableComponentMethodKeys = ['clearAll', 'syncData', 'updateData', 'loadData', 'reloadData', 'reloadRow', 'loadColumn', 'reloadColumn', 'getRowNode', 'getColumnNode', 'getRowIndex', 'getVTRowIndex', 'getVMRowIndex', 'getColumnIndex', 'getVTColumnIndex', 'getVMColumnIndex', 'createData', 'createRow', 'revertData', 'clearData', 'isInsertByRow', 'isUpdateByRow', 'getColumns', 'getColumnById', 'getColumnByField', 'getTableColumn', 'getData', 'getCheckboxRecords', 'getParentRow', 'getRowSeq', 'getRowById', 'getRowid', 'getTableData', 'setColumnFixed', 'clearColumnFixed', 'setColumnWidth', 'getColumnWidth', 'hideColumn', 'showColumn', 'resetColumn', 'refreshColumn', 'refreshScroll', 'recalculate', 'closeTooltip', 'isAllCheckboxChecked', 'isAllCheckboxIndeterminate', 'getCheckboxIndeterminateRecords', 'setCheckboxRow', 'isCheckedByCheckboxRow', 'isIndeterminateByCheckboxRow', 'toggleCheckboxRow', 'setAllCheckboxRow', 'getRadioReserveRecord', 'clearRadioReserve', 'getCheckboxReserveRecords', 'clearCheckboxReserve', 'toggleAllCheckboxRow', 'clearCheckboxRow', 'setCurrentRow', 'isCheckedByRadioRow', 'setRadioRow', 'clearCurrentRow', 'clearRadioRow', 'getCurrentRecord', 'getRadioRecord', 'getCurrentColumn', 'setCurrentColumn', 'clearCurrentColumn', 'setPendingRow', 'togglePendingRow', 'getPendingRecords', 'clearPendingRow', 'sort', 'clearSort', 'isSort', 'getSortColumns', 'closeFilter', 'isFilter', 'isActiveFilterByColumn', 'isRowExpandLoaded', 'clearRowExpandLoaded', 'reloadRowExpand', 'reloadRowExpand', 'toggleRowExpand', 'setAllRowExpand', 'setRowExpand', 'isExpandByRow', 'isRowExpandByRow', 'clearRowExpand', 'clearRowExpandReserve', 'getRowExpandRecords', 'getTreeExpandRecords', 'isTreeExpandLoaded', 'clearTreeExpandLoaded', 'reloadTreeExpand', 'reloadTreeChilds', 'toggleTreeExpand', 'setAllTreeExpand', 'setTreeExpand', 'isTreeExpandByRow', 'clearTreeExpand', 'clearTreeExpandReserve', 'getScroll', 'scrollTo', 'scrollToRow', 'scrollToColumn', 'clearScroll', 'updateFooter', 'updateStatus', 'setMergeCells', 'removeInsertRow', 'removeMergeCells', 'getMergeCells', 'clearMergeCells', 'setMergeFooterItems', 'removeMergeFooterItems', 'getMergeFooterItems', 'clearMergeFooterItems', 'openTooltip', 'focus', 'blur', 'connect'];\nvar gridComponentEmits = __spreadArray(__spreadArray([], tableComponentEmits, true), [\n    'page-change',\n    'form-submit',\n    'form-submit-invalid',\n    'form-reset',\n    'form-collapse',\n    'form-toggle-collapse',\n    'proxy-query',\n    'proxy-delete',\n    'proxy-save',\n    'toolbar-button-click',\n    'toolbar-tool-click',\n    'zoom'\n], false);\nexport default defineComponent({\n    name: 'VxeGrid',\n    props: __assign(__assign({}, tableComponentProps), { layouts: Array, columns: Array, pagerConfig: Object, proxyConfig: Object, toolbarConfig: Object, formConfig: Object, zoomConfig: Object, size: { type: String, default: function () { return GlobalConfig.grid.size || GlobalConfig.size; } } }),\n    emits: gridComponentEmits,\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var xID = XEUtils.uniqueId();\n        var instance = getCurrentInstance();\n        var computeSize = useSize(props);\n        var reactData = reactive({\n            tableLoading: false,\n            proxyInited: false,\n            isZMax: false,\n            tableData: [],\n            filterData: [],\n            formData: {},\n            sortData: [],\n            tZindex: 0,\n            tablePage: {\n                total: 0,\n                pageSize: GlobalConfig.pager.pageSize || 10,\n                currentPage: 1\n            }\n        });\n        var refElem = ref();\n        var refTable = ref();\n        var refForm = ref();\n        var refToolbar = ref();\n        var refPager = ref();\n        var refFormWrapper = ref();\n        var refToolbarWrapper = ref();\n        var refTopWrapper = ref();\n        var refBottomWrapper = ref();\n        var refPagerWrapper = ref();\n        var extendTableMethods = function (methodKeys) {\n            var funcs = {};\n            methodKeys.forEach(function (name) {\n                funcs[name] = function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    var $xetable = refTable.value;\n                    if ($xetable && $xetable[name]) {\n                        return $xetable[name].apply($xetable, args);\n                    }\n                };\n            });\n            return funcs;\n        };\n        var gridExtendTableMethods = extendTableMethods(tableComponentMethodKeys);\n        tableComponentMethodKeys.forEach(function (name) {\n            gridExtendTableMethods[name] = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var $xetable = refTable.value;\n                if ($xetable && $xetable[name]) {\n                    return $xetable && $xetable[name].apply($xetable, args);\n                }\n            };\n        });\n        var computeProxyOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.grid.proxyConfig, props.proxyConfig);\n        });\n        var computeIsMsg = computed(function () {\n            var proxyOpts = computeProxyOpts.value;\n            return proxyOpts.message !== false;\n        });\n        var computePagerOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.grid.pagerConfig, props.pagerConfig);\n        });\n        var computeFormOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.grid.formConfig, props.formConfig);\n        });\n        var computeToolbarOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.grid.toolbarConfig, props.toolbarConfig);\n        });\n        var computeZoomOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.grid.zoomConfig, props.zoomConfig);\n        });\n        var computeStyles = computed(function () {\n            return reactData.isZMax ? { zIndex: reactData.tZindex } : null;\n        });\n        var computeTableExtendProps = computed(function () {\n            var rest = {};\n            var gridProps = props;\n            tableComponentPropKeys.forEach(function (key) {\n                rest[key] = gridProps[key];\n            });\n            return rest;\n        });\n        var refMaps = {\n            refElem: refElem,\n            refTable: refTable,\n            refForm: refForm,\n            refToolbar: refToolbar,\n            refPager: refPager\n        };\n        var computeMaps = {\n            computeProxyOpts: computeProxyOpts,\n            computePagerOpts: computePagerOpts,\n            computeFormOpts: computeFormOpts,\n            computeToolbarOpts: computeToolbarOpts,\n            computeZoomOpts: computeZoomOpts\n        };\n        var $xegrid = {\n            xID: xID,\n            props: props,\n            context: context,\n            instance: instance,\n            reactData: reactData,\n            getRefMaps: function () { return refMaps; },\n            getComputeMaps: function () { return computeMaps; }\n        };\n        var gridMethods = {};\n        var computeTableProps = computed(function () {\n            var seqConfig = props.seqConfig, pagerConfig = props.pagerConfig, loading = props.loading, editConfig = props.editConfig, proxyConfig = props.proxyConfig;\n            var isZMax = reactData.isZMax, tableLoading = reactData.tableLoading, tablePage = reactData.tablePage, tableData = reactData.tableData;\n            var tableExtendProps = computeTableExtendProps.value;\n            var proxyOpts = computeProxyOpts.value;\n            var pagerOpts = computePagerOpts.value;\n            var tableProps = Object.assign({}, tableExtendProps);\n            if (isZMax) {\n                if (tableExtendProps.maxHeight) {\n                    tableProps.maxHeight = 'auto';\n                }\n                else {\n                    tableProps.height = 'auto';\n                }\n            }\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                tableProps.loading = loading || tableLoading;\n                tableProps.data = tableData;\n                if (pagerConfig && proxyOpts.seq && isEnableConf(pagerOpts)) {\n                    tableProps.seqConfig = Object.assign({}, seqConfig, { startIndex: (tablePage.currentPage - 1) * tablePage.pageSize });\n                }\n            }\n            if (editConfig) {\n                tableProps.editConfig = Object.assign({}, editConfig);\n            }\n            return tableProps;\n        });\n        var initToolbar = function () {\n            var toolbarOpts = computeToolbarOpts.value;\n            if (props.toolbarConfig && isEnableConf(toolbarOpts)) {\n                nextTick(function () {\n                    var $xetable = refTable.value;\n                    var $xetoolbar = refToolbar.value;\n                    if ($xetable && $xetoolbar) {\n                        $xetable.connect($xetoolbar);\n                    }\n                });\n            }\n        };\n        var initPages = function () {\n            var tablePage = reactData.tablePage;\n            var pagerConfig = props.pagerConfig;\n            var pagerOpts = computePagerOpts.value;\n            var currentPage = pagerOpts.currentPage, pageSize = pagerOpts.pageSize;\n            if (pagerConfig && isEnableConf(pagerOpts)) {\n                if (currentPage) {\n                    tablePage.currentPage = currentPage;\n                }\n                if (pageSize) {\n                    tablePage.pageSize = pageSize;\n                }\n            }\n        };\n        var triggerPendingEvent = function (code) {\n            var isMsg = computeIsMsg.value;\n            var $xetable = refTable.value;\n            var selectRecords = $xetable.getCheckboxRecords();\n            if (selectRecords.length) {\n                $xetable.togglePendingRow(selectRecords);\n                gridExtendTableMethods.clearCheckboxRow();\n            }\n            else {\n                if (isMsg) {\n                    // 检测弹窗模块\n                    if (process.env.NODE_ENV === 'development') {\n                        if (!VXETable.modal) {\n                            errLog('vxe.error.reqModule', ['Modal']);\n                        }\n                    }\n                    VXETable.modal.message({ id: code, content: GlobalConfig.i18n('vxe.grid.selectOneRecord'), status: 'warning' });\n                }\n            }\n        };\n        var getRespMsg = function (rest, defaultMsg) {\n            var proxyOpts = computeProxyOpts.value;\n            var _a = proxyOpts.props, proxyProps = _a === void 0 ? {} : _a;\n            var msg;\n            if (rest && proxyProps.message) {\n                msg = XEUtils.get(rest, proxyProps.message);\n            }\n            return msg || GlobalConfig.i18n(defaultMsg);\n        };\n        var handleDeleteRow = function (code, alertKey, callback) {\n            var isMsg = computeIsMsg.value;\n            var selectRecords = gridExtendTableMethods.getCheckboxRecords();\n            if (isMsg) {\n                if (selectRecords.length) {\n                    return VXETable.modal.confirm({ id: \"cfm_\".concat(code), content: GlobalConfig.i18n(alertKey), escClosable: true }).then(function (type) {\n                        if (type === 'confirm') {\n                            return callback();\n                        }\n                    });\n                }\n                else {\n                    // 检测弹窗模块\n                    if (process.env.NODE_ENV === 'development') {\n                        if (!VXETable.modal) {\n                            errLog('vxe.error.reqModule', ['Modal']);\n                        }\n                    }\n                    VXETable.modal.message({ id: \"msg_\".concat(code), content: GlobalConfig.i18n('vxe.grid.selectOneRecord'), status: 'warning' });\n                }\n            }\n            else {\n                if (selectRecords.length) {\n                    callback();\n                }\n            }\n            return Promise.resolve();\n        };\n        var pageChangeEvent = function (params) {\n            var proxyConfig = props.proxyConfig;\n            var tablePage = reactData.tablePage;\n            var currentPage = params.currentPage, pageSize = params.pageSize;\n            var proxyOpts = computeProxyOpts.value;\n            tablePage.currentPage = currentPage;\n            tablePage.pageSize = pageSize;\n            gridMethods.dispatchEvent('page-change', params);\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                gridMethods.commitProxy('query').then(function (rest) {\n                    gridMethods.dispatchEvent('proxy-query', rest, params.$event);\n                });\n            }\n        };\n        var sortChangeEvent = function (params) {\n            var $xetable = refTable.value;\n            var proxyConfig = props.proxyConfig;\n            var computeSortOpts = $xetable.getComputeMaps().computeSortOpts;\n            var proxyOpts = computeProxyOpts.value;\n            var sortOpts = computeSortOpts.value;\n            // 如果是服务端排序\n            if (sortOpts.remote) {\n                reactData.sortData = params.sortList;\n                if (proxyConfig && isEnableConf(proxyOpts)) {\n                    reactData.tablePage.currentPage = 1;\n                    gridMethods.commitProxy('query').then(function (rest) {\n                        gridMethods.dispatchEvent('proxy-query', rest, params.$event);\n                    });\n                }\n            }\n            gridMethods.dispatchEvent('sort-change', params);\n        };\n        var filterChangeEvent = function (params) {\n            var $xetable = refTable.value;\n            var proxyConfig = props.proxyConfig;\n            var computeFilterOpts = $xetable.getComputeMaps().computeFilterOpts;\n            var proxyOpts = computeProxyOpts.value;\n            var filterOpts = computeFilterOpts.value;\n            // 如果是服务端过滤\n            if (filterOpts.remote) {\n                reactData.filterData = params.filterList;\n                if (proxyConfig && isEnableConf(proxyOpts)) {\n                    reactData.tablePage.currentPage = 1;\n                    gridMethods.commitProxy('query').then(function (rest) {\n                        gridMethods.dispatchEvent('proxy-query', rest, params.$event);\n                    });\n                }\n            }\n            gridMethods.dispatchEvent('filter-change', params);\n        };\n        var submitFormEvent = function (params) {\n            var proxyConfig = props.proxyConfig;\n            var proxyOpts = computeProxyOpts.value;\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                gridMethods.commitProxy('reload').then(function (rest) {\n                    gridMethods.dispatchEvent('proxy-query', __assign(__assign({}, rest), { isReload: true }), params.$event);\n                });\n            }\n            gridMethods.dispatchEvent('form-submit', params);\n        };\n        var resetFormEvent = function (params) {\n            var proxyConfig = props.proxyConfig;\n            var proxyOpts = computeProxyOpts.value;\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                gridMethods.commitProxy('reload').then(function (rest) {\n                    gridMethods.dispatchEvent('proxy-query', __assign(__assign({}, rest), { isReload: true }), params.$event);\n                });\n            }\n            gridMethods.dispatchEvent('form-reset', params);\n        };\n        var submitInvalidEvent = function (params) {\n            gridMethods.dispatchEvent('form-submit-invalid', params);\n        };\n        var collapseEvent = function (params) {\n            nextTick(function () { return gridExtendTableMethods.recalculate(true); });\n            gridMethods.dispatchEvent('form-toggle-collapse', params);\n            gridMethods.dispatchEvent('form-collapse', params);\n        };\n        var handleZoom = function (isMax) {\n            var isZMax = reactData.isZMax;\n            if (isMax ? !isZMax : isZMax) {\n                reactData.isZMax = !isZMax;\n                if (reactData.tZindex < getLastZIndex()) {\n                    reactData.tZindex = nextZIndex();\n                }\n            }\n            return nextTick().then(function () { return gridExtendTableMethods.recalculate(true); }).then(function () { return reactData.isZMax; });\n        };\n        var getFuncSlot = function (optSlots, slotKey) {\n            var funcSlot = optSlots[slotKey];\n            if (funcSlot) {\n                if (XEUtils.isString(funcSlot)) {\n                    if (slots[funcSlot]) {\n                        return slots[funcSlot];\n                    }\n                    else {\n                        if (process.env.NODE_ENV === 'development') {\n                            errLog('vxe.error.notSlot', [funcSlot]);\n                        }\n                    }\n                }\n                else {\n                    return funcSlot;\n                }\n            }\n            return null;\n        };\n        /**\n         * 渲染表单\n         */\n        var renderForms = function () {\n            var formConfig = props.formConfig, proxyConfig = props.proxyConfig;\n            var formData = reactData.formData;\n            var proxyOpts = computeProxyOpts.value;\n            var formOpts = computeFormOpts.value;\n            var restVNs = [];\n            if ((formConfig && isEnableConf(formOpts)) || slots.form) {\n                var slotVNs = [];\n                if (slots.form) {\n                    slotVNs = slots.form({ $grid: $xegrid });\n                }\n                else {\n                    if (formOpts.items) {\n                        var formSlots_1 = {};\n                        if (!formOpts.inited) {\n                            formOpts.inited = true;\n                            var beforeItem_1 = proxyOpts.beforeItem;\n                            if (proxyOpts && beforeItem_1) {\n                                formOpts.items.forEach(function (item) {\n                                    beforeItem_1({ $grid: $xegrid, item: item });\n                                });\n                            }\n                        }\n                        // 处理插槽\n                        formOpts.items.forEach(function (item) {\n                            XEUtils.each(item.slots, function (func) {\n                                if (!XEUtils.isFunction(func)) {\n                                    if (slots[func]) {\n                                        formSlots_1[func] = slots[func];\n                                    }\n                                }\n                            });\n                        });\n                        slotVNs.push(h(resolveComponent('vxe-form'), __assign(__assign({ ref: refForm }, Object.assign({}, formOpts, {\n                            data: proxyConfig && isEnableConf(proxyOpts) && proxyOpts.form ? formData : formOpts.data\n                        })), { onSubmit: submitFormEvent, onReset: resetFormEvent, onSubmitInvalid: submitInvalidEvent, onCollapse: collapseEvent }), formSlots_1));\n                    }\n                }\n                restVNs.push(h('div', {\n                    ref: refFormWrapper,\n                    key: 'form',\n                    class: 'vxe-grid--form-wrapper'\n                }, slotVNs));\n            }\n            return restVNs;\n        };\n        /**\n         * 渲染工具栏\n         */\n        var renderToolbars = function () {\n            var toolbarConfig = props.toolbarConfig;\n            var toolbarOpts = computeToolbarOpts.value;\n            var restVNs = [];\n            if ((toolbarConfig && isEnableConf(toolbarOpts)) || slots.toolbar) {\n                var slotVNs = [];\n                if (slots.toolbar) {\n                    slotVNs = slots.toolbar({ $grid: $xegrid });\n                }\n                else {\n                    var toolbarOptSlots = toolbarOpts.slots;\n                    var buttonsSlot = void 0;\n                    var toolsSlot = void 0;\n                    var toolbarSlots = {};\n                    if (toolbarOptSlots) {\n                        buttonsSlot = getFuncSlot(toolbarOptSlots, 'buttons');\n                        toolsSlot = getFuncSlot(toolbarOptSlots, 'tools');\n                        if (buttonsSlot) {\n                            toolbarSlots.buttons = buttonsSlot;\n                        }\n                        if (toolsSlot) {\n                            toolbarSlots.tools = toolsSlot;\n                        }\n                    }\n                    slotVNs.push(h(resolveComponent('vxe-toolbar'), __assign({ ref: refToolbar }, toolbarOpts), toolbarSlots));\n                }\n                restVNs.push(h('div', {\n                    ref: refToolbarWrapper,\n                    key: 'toolbar',\n                    class: 'vxe-grid--toolbar-wrapper'\n                }, slotVNs));\n            }\n            return restVNs;\n        };\n        /**\n         * 渲染表格顶部区域\n         */\n        var renderTops = function () {\n            if (slots.top) {\n                return [\n                    h('div', {\n                        ref: refTopWrapper,\n                        key: 'top',\n                        class: 'vxe-grid--top-wrapper'\n                    }, slots.top({ $grid: $xegrid }))\n                ];\n            }\n            return [];\n        };\n        var defaultLayouts = ['Form', 'Toolbar', 'Top', 'Table', 'Bottom', 'Pager'];\n        var renderLayout = function () {\n            var layouts = props.layouts;\n            var vns = [];\n            var currLayouts = (layouts && layouts.length ? layouts : (GlobalConfig.grid.layouts || defaultLayouts));\n            currLayouts.forEach(function (name) {\n                switch (name) {\n                    case 'Form':\n                        vns.push(renderForms());\n                        break;\n                    case 'Toolbar':\n                        vns.push(renderToolbars());\n                        break;\n                    case 'Top':\n                        vns.push(renderTops());\n                        break;\n                    case 'Table':\n                        vns.push(renderTables());\n                        break;\n                    case 'Bottom':\n                        vns.push(renderBottoms());\n                        break;\n                    case 'Pager':\n                        vns.push(renderPagers());\n                        break;\n                    default:\n                        if (process.env.NODE_ENV === 'development') {\n                            errLog('vxe.error.notProp', [\"layouts -> \".concat(name)]);\n                        }\n                        break;\n                }\n            });\n            return vns;\n        };\n        var tableCompEvents = {};\n        tableComponentEmits.forEach(function (name) {\n            var type = XEUtils.camelCase(\"on-\".concat(name));\n            tableCompEvents[type] = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                return emit.apply(void 0, __spreadArray([name], args, false));\n            };\n        });\n        /**\n         * 渲染表格\n         */\n        var renderTables = function () {\n            var proxyConfig = props.proxyConfig;\n            var tableProps = computeTableProps.value;\n            var proxyOpts = computeProxyOpts.value;\n            var tableOns = Object.assign({}, tableCompEvents);\n            var emptySlot = slots.empty;\n            var loadingSlot = slots.loading;\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                if (proxyOpts.sort) {\n                    tableOns.onSortChange = sortChangeEvent;\n                }\n                if (proxyOpts.filter) {\n                    tableOns.onFilterChange = filterChangeEvent;\n                }\n            }\n            var slotObj = {};\n            if (emptySlot) {\n                slotObj.empty = function () { return emptySlot({}); };\n            }\n            if (loadingSlot) {\n                slotObj.loading = function () { return loadingSlot({}); };\n            }\n            return [\n                h(resolveComponent('vxe-table'), __assign(__assign({ ref: refTable, key: 'table' }, tableProps), tableOns), slotObj)\n            ];\n        };\n        /**\n         * 渲染表格底部区域\n         */\n        var renderBottoms = function () {\n            if (slots.bottom) {\n                return [\n                    h('div', {\n                        ref: refBottomWrapper,\n                        key: 'bottom',\n                        class: 'vxe-grid--bottom-wrapper'\n                    }, slots.bottom({ $grid: $xegrid }))\n                ];\n            }\n            return [];\n        };\n        /**\n         * 渲染分页\n         */\n        var renderPagers = function () {\n            var proxyConfig = props.proxyConfig, pagerConfig = props.pagerConfig;\n            var proxyOpts = computeProxyOpts.value;\n            var pagerOpts = computePagerOpts.value;\n            var restVNs = [];\n            if ((pagerConfig && isEnableConf(pagerOpts)) || slots.pager) {\n                var slotVNs = [];\n                if (slots.pager) {\n                    slotVNs = slots.pager({ $grid: $xegrid });\n                }\n                else {\n                    var pagerOptSlots = pagerOpts.slots;\n                    var pagerSlots = {};\n                    var leftSlot = void 0;\n                    var rightSlot = void 0;\n                    if (pagerOptSlots) {\n                        leftSlot = getFuncSlot(pagerOptSlots, 'left');\n                        rightSlot = getFuncSlot(pagerOptSlots, 'right');\n                        if (leftSlot) {\n                            pagerSlots.left = leftSlot;\n                        }\n                        if (rightSlot) {\n                            pagerSlots.right = rightSlot;\n                        }\n                    }\n                    slotVNs.push(h(resolveComponent('vxe-pager'), __assign(__assign(__assign({ ref: refPager }, pagerOpts), (proxyConfig && isEnableConf(proxyOpts) ? reactData.tablePage : {})), { onPageChange: pageChangeEvent }), pagerSlots));\n                }\n                restVNs.push(h('div', {\n                    ref: refPagerWrapper,\n                    key: 'pager',\n                    class: 'vxe-grid--pager-wrapper'\n                }, slotVNs));\n            }\n            return restVNs;\n        };\n        var initProxy = function () {\n            var proxyConfig = props.proxyConfig, formConfig = props.formConfig;\n            var proxyInited = reactData.proxyInited;\n            var proxyOpts = computeProxyOpts.value;\n            var formOpts = computeFormOpts.value;\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                if (formConfig && isEnableConf(formOpts) && proxyOpts.form && formOpts.items) {\n                    var formData_1 = {};\n                    formOpts.items.forEach(function (item) {\n                        var field = item.field, itemRender = item.itemRender;\n                        if (field) {\n                            var itemValue = null;\n                            if (itemRender) {\n                                var defaultValue = itemRender.defaultValue;\n                                if (XEUtils.isFunction(defaultValue)) {\n                                    itemValue = defaultValue({ item: item });\n                                }\n                                else if (!XEUtils.isUndefined(defaultValue)) {\n                                    itemValue = defaultValue;\n                                }\n                            }\n                            formData_1[field] = itemValue;\n                        }\n                    });\n                    reactData.formData = formData_1;\n                }\n                if (!proxyInited) {\n                    reactData.proxyInited = true;\n                    if (proxyOpts.autoLoad !== false) {\n                        nextTick().then(function () { return gridMethods.commitProxy('_init'); }).then(function (rest) {\n                            gridMethods.dispatchEvent('proxy-query', __assign(__assign({}, rest), { isInited: true }), new Event('init'));\n                        });\n                    }\n                }\n            }\n        };\n        gridMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $grid: $xegrid, $event: evnt }, params));\n            },\n            /**\n             * 提交指令，支持 code 或 button\n             * @param {String/Object} code 字符串或对象\n             */\n            commitProxy: function (proxyTarget) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                var toolbarConfig = props.toolbarConfig, pagerConfig = props.pagerConfig, editRules = props.editRules;\n                var tablePage = reactData.tablePage, formData = reactData.formData;\n                var isMsg = computeIsMsg.value;\n                var proxyOpts = computeProxyOpts.value;\n                var pagerOpts = computePagerOpts.value;\n                var toolbarOpts = computeToolbarOpts.value;\n                var beforeQuery = proxyOpts.beforeQuery, afterQuery = proxyOpts.afterQuery, beforeDelete = proxyOpts.beforeDelete, afterDelete = proxyOpts.afterDelete, beforeSave = proxyOpts.beforeSave, afterSave = proxyOpts.afterSave, _a = proxyOpts.ajax, ajax = _a === void 0 ? {} : _a, _b = proxyOpts.props, proxyProps = _b === void 0 ? {} : _b;\n                var $xetable = refTable.value;\n                var button = null;\n                var code = null;\n                if (XEUtils.isString(proxyTarget)) {\n                    var buttons = toolbarOpts.buttons;\n                    var matchObj = toolbarConfig && isEnableConf(toolbarOpts) && buttons ? XEUtils.findTree(buttons, function (item) { return item.code === proxyTarget; }, { children: 'dropdowns' }) : null;\n                    button = matchObj ? matchObj.item : null;\n                    code = proxyTarget;\n                }\n                else {\n                    button = proxyTarget;\n                    code = button.code;\n                }\n                var btnParams = button ? button.params : null;\n                switch (code) {\n                    case 'insert':\n                        return $xetable.insert({});\n                    case 'insert_edit':\n                        return $xetable.insert({}).then(function (_a) {\n                            var row = _a.row;\n                            return $xetable.setEditRow(row);\n                        });\n                    // 已废弃\n                    case 'insert_actived':\n                        return $xetable.insert({}).then(function (_a) {\n                            var row = _a.row;\n                            return $xetable.setEditRow(row);\n                        });\n                    // 已废弃\n                    case 'mark_cancel':\n                        triggerPendingEvent(code);\n                        break;\n                    case 'remove':\n                        return handleDeleteRow(code, 'vxe.grid.removeSelectRecord', function () { return $xetable.removeCheckboxRow(); });\n                    case 'import':\n                        $xetable.importData(btnParams);\n                        break;\n                    case 'open_import':\n                        $xetable.openImport(btnParams);\n                        break;\n                    case 'export':\n                        $xetable.exportData(btnParams);\n                        break;\n                    case 'open_export':\n                        $xetable.openExport(btnParams);\n                        break;\n                    case 'reset_custom':\n                        return $xetable.resetColumn(true);\n                    case '_init':\n                    case 'reload':\n                    case 'query': {\n                        var ajaxMethods = ajax.query;\n                        if (ajaxMethods) {\n                            var isInited = code === '_init';\n                            var isReload = code === 'reload';\n                            var sortList = [];\n                            var filterList = [];\n                            var pageParams = {};\n                            if (pagerConfig) {\n                                if (isInited || isReload) {\n                                    tablePage.currentPage = 1;\n                                }\n                                if (isEnableConf(pagerOpts)) {\n                                    pageParams = __assign({}, tablePage);\n                                }\n                            }\n                            if (isInited) {\n                                var computeSortOpts = $xetable.getComputeMaps().computeSortOpts;\n                                var sortOpts = computeSortOpts.value;\n                                var defaultSort = sortOpts.defaultSort;\n                                // 如果使用默认排序\n                                if (defaultSort) {\n                                    if (!XEUtils.isArray(defaultSort)) {\n                                        defaultSort = [defaultSort];\n                                    }\n                                    sortList = defaultSort.map(function (item) {\n                                        return {\n                                            field: item.field,\n                                            property: item.field,\n                                            order: item.order\n                                        };\n                                    });\n                                }\n                                filterList = $xetable.getCheckedFilters();\n                            }\n                            else {\n                                if (isReload) {\n                                    $xetable.clearAll();\n                                }\n                                else {\n                                    sortList = $xetable.getSortColumns();\n                                    filterList = $xetable.getCheckedFilters();\n                                }\n                            }\n                            var commitParams = {\n                                code: code,\n                                button: button,\n                                isInited: isInited,\n                                isReload: isReload,\n                                $grid: $xegrid,\n                                page: pageParams,\n                                sort: sortList.length ? sortList[0] : {},\n                                sorts: sortList,\n                                filters: filterList,\n                                form: formData,\n                                options: ajaxMethods\n                            };\n                            reactData.sortData = sortList;\n                            reactData.filterData = filterList;\n                            reactData.tableLoading = true;\n                            var applyArgs_1 = [commitParams].concat(args);\n                            return Promise.resolve((beforeQuery || ajaxMethods).apply(void 0, applyArgs_1))\n                                .then(function (rest) {\n                                reactData.tableLoading = false;\n                                if (rest) {\n                                    if (pagerConfig && isEnableConf(pagerOpts)) {\n                                        var total = XEUtils.get(rest, proxyProps.total || 'page.total') || 0;\n                                        tablePage.total = XEUtils.toNumber(total);\n                                        reactData.tableData = XEUtils.get(rest, proxyProps.result || 'result') || [];\n                                        // 检验当前页码，不能超出当前最大页数\n                                        var pageCount = Math.max(Math.ceil(total / tablePage.pageSize), 1);\n                                        if (tablePage.currentPage > pageCount) {\n                                            tablePage.currentPage = pageCount;\n                                        }\n                                    }\n                                    else {\n                                        reactData.tableData = (proxyProps.list ? XEUtils.get(rest, proxyProps.list) : rest) || [];\n                                    }\n                                }\n                                else {\n                                    reactData.tableData = [];\n                                }\n                                if (afterQuery) {\n                                    afterQuery.apply(void 0, applyArgs_1);\n                                }\n                                return { status: true };\n                            }).catch(function () {\n                                reactData.tableLoading = false;\n                                return { status: false };\n                            });\n                        }\n                        else {\n                            if (process.env.NODE_ENV === 'development') {\n                                errLog('vxe.error.notFunc', ['proxy-config.ajax.query']);\n                            }\n                        }\n                        break;\n                    }\n                    case 'delete': {\n                        var ajaxMethods_1 = ajax.delete;\n                        if (ajaxMethods_1) {\n                            var selectRecords_1 = gridExtendTableMethods.getCheckboxRecords();\n                            var removeRecords_1 = selectRecords_1.filter(function (row) { return !$xetable.isInsertByRow(row); });\n                            var body = { removeRecords: removeRecords_1 };\n                            var commitParams = { $grid: $xegrid, code: code, button: button, body: body, form: formData, options: ajaxMethods_1 };\n                            var applyArgs_2 = [commitParams].concat(args);\n                            if (selectRecords_1.length) {\n                                return handleDeleteRow(code, 'vxe.grid.deleteSelectRecord', function () {\n                                    if (!removeRecords_1.length) {\n                                        return $xetable.remove(selectRecords_1);\n                                    }\n                                    reactData.tableLoading = true;\n                                    return Promise.resolve((beforeDelete || ajaxMethods_1).apply(void 0, applyArgs_2))\n                                        .then(function (rest) {\n                                        reactData.tableLoading = false;\n                                        $xetable.setPendingRow(removeRecords_1, false);\n                                        if (isMsg) {\n                                            // 检测弹窗模块\n                                            if (process.env.NODE_ENV === 'development') {\n                                                if (!VXETable.modal) {\n                                                    errLog('vxe.error.reqModule', ['Modal']);\n                                                }\n                                            }\n                                            VXETable.modal.message({ content: getRespMsg(rest, 'vxe.grid.delSuccess'), status: 'success' });\n                                        }\n                                        if (afterDelete) {\n                                            afterDelete.apply(void 0, applyArgs_2);\n                                        }\n                                        else {\n                                            gridMethods.commitProxy('query');\n                                        }\n                                        return { status: true };\n                                    })\n                                        .catch(function (rest) {\n                                        reactData.tableLoading = false;\n                                        if (isMsg) {\n                                            if (process.env.NODE_ENV === 'development') {\n                                                if (!VXETable.modal.message) {\n                                                    errLog('vxe.error.reqModule', ['Modal']);\n                                                }\n                                            }\n                                            VXETable.modal.message({ id: code, content: getRespMsg(rest, 'vxe.grid.operError'), status: 'error' });\n                                        }\n                                        return { status: false };\n                                    });\n                                });\n                            }\n                            else {\n                                if (isMsg) {\n                                    // 检测弹窗模块\n                                    if (process.env.NODE_ENV === 'development') {\n                                        if (!VXETable.modal) {\n                                            errLog('vxe.error.reqModule', ['Modal']);\n                                        }\n                                    }\n                                    VXETable.modal.message({ id: code, content: GlobalConfig.i18n('vxe.grid.selectOneRecord'), status: 'warning' });\n                                }\n                            }\n                        }\n                        else {\n                            if (process.env.NODE_ENV === 'development') {\n                                errLog('vxe.error.notFunc', ['proxy-config.ajax.delete']);\n                            }\n                        }\n                        break;\n                    }\n                    case 'save': {\n                        var ajaxMethods_2 = ajax.save;\n                        if (ajaxMethods_2) {\n                            var body_1 = $xetable.getRecordset();\n                            var insertRecords_1 = body_1.insertRecords, removeRecords_2 = body_1.removeRecords, updateRecords_1 = body_1.updateRecords, pendingRecords_1 = body_1.pendingRecords;\n                            var commitParams = { $grid: $xegrid, code: code, button: button, body: body_1, form: formData, options: ajaxMethods_2 };\n                            var applyArgs_3 = [commitParams].concat(args);\n                            // 排除掉新增且标记为删除的数据\n                            if (insertRecords_1.length) {\n                                body_1.pendingRecords = pendingRecords_1.filter(function (row) { return $xetable.findRowIndexOf(insertRecords_1, row) === -1; });\n                            }\n                            // 排除已标记为删除的数据\n                            if (pendingRecords_1.length) {\n                                body_1.insertRecords = insertRecords_1.filter(function (row) { return $xetable.findRowIndexOf(pendingRecords_1, row) === -1; });\n                            }\n                            var restPromise = Promise.resolve();\n                            if (editRules) {\n                                // 只校验新增和修改的数据\n                                restPromise = $xetable.validate(body_1.insertRecords.concat(updateRecords_1));\n                            }\n                            return restPromise.then(function (errMap) {\n                                if (errMap) {\n                                    // 如果校验不通过\n                                    return;\n                                }\n                                if (body_1.insertRecords.length || removeRecords_2.length || updateRecords_1.length || body_1.pendingRecords.length) {\n                                    reactData.tableLoading = true;\n                                    return Promise.resolve((beforeSave || ajaxMethods_2).apply(void 0, applyArgs_3))\n                                        .then(function (rest) {\n                                        reactData.tableLoading = false;\n                                        $xetable.clearPendingRow();\n                                        if (isMsg) {\n                                            // 检测弹窗模块\n                                            if (process.env.NODE_ENV === 'development') {\n                                                if (!VXETable.modal) {\n                                                    errLog('vxe.error.reqModule', ['Modal']);\n                                                }\n                                            }\n                                            VXETable.modal.message({ content: getRespMsg(rest, 'vxe.grid.saveSuccess'), status: 'success' });\n                                        }\n                                        if (afterSave) {\n                                            afterSave.apply(void 0, applyArgs_3);\n                                        }\n                                        else {\n                                            gridMethods.commitProxy('query');\n                                        }\n                                        return { status: true };\n                                    })\n                                        .catch(function (rest) {\n                                        reactData.tableLoading = false;\n                                        if (isMsg) {\n                                            // 检测弹窗模块\n                                            if (process.env.NODE_ENV === 'development') {\n                                                if (!VXETable.modal) {\n                                                    errLog('vxe.error.reqModule', ['Modal']);\n                                                }\n                                            }\n                                            VXETable.modal.message({ id: code, content: getRespMsg(rest, 'vxe.grid.operError'), status: 'error' });\n                                        }\n                                        return { status: false };\n                                    });\n                                }\n                                else {\n                                    if (isMsg) {\n                                        // 检测弹窗模块\n                                        if (process.env.NODE_ENV === 'development') {\n                                            if (!VXETable.modal) {\n                                                errLog('vxe.error.reqModule', ['Modal']);\n                                            }\n                                        }\n                                        VXETable.modal.message({ id: code, content: GlobalConfig.i18n('vxe.grid.dataUnchanged'), status: 'info' });\n                                    }\n                                }\n                            });\n                        }\n                        else {\n                            if (process.env.NODE_ENV === 'development') {\n                                errLog('vxe.error.notFunc', ['proxy-config.ajax.save']);\n                            }\n                        }\n                        break;\n                    }\n                    default: {\n                        var gCommandOpts = VXETable.commands.get(code);\n                        if (gCommandOpts) {\n                            if (gCommandOpts.commandMethod) {\n                                gCommandOpts.commandMethod.apply(gCommandOpts, __spreadArray([{ code: code, button: button, $grid: $xegrid, $table: $xetable }], args, false));\n                            }\n                            else {\n                                if (process.env.NODE_ENV === 'development') {\n                                    errLog('vxe.error.notCommands', [code]);\n                                }\n                            }\n                        }\n                    }\n                }\n                return nextTick();\n            },\n            zoom: function () {\n                if (reactData.isZMax) {\n                    return gridMethods.revert();\n                }\n                return gridMethods.maximize();\n            },\n            isMaximized: function () {\n                return reactData.isZMax;\n            },\n            maximize: function () {\n                return handleZoom(true);\n            },\n            revert: function () {\n                return handleZoom();\n            },\n            getFormItems: function (itemIndex) {\n                var formOpts = computeFormOpts.value;\n                var formConfig = props.formConfig;\n                var items = formOpts.items;\n                var itemList = [];\n                XEUtils.eachTree(formConfig && isEnableConf(formOpts) && items ? items : [], function (item) {\n                    itemList.push(item);\n                }, { children: 'children' });\n                return XEUtils.isUndefined(itemIndex) ? itemList : itemList[itemIndex];\n            },\n            getProxyInfo: function () {\n                var $xetable = refTable.value;\n                if (props.proxyConfig) {\n                    var sortData = reactData.sortData;\n                    return {\n                        data: reactData.tableData,\n                        filter: reactData.filterData,\n                        form: reactData.formData,\n                        sort: sortData.length ? sortData[0] : {},\n                        sorts: sortData,\n                        pager: reactData.tablePage,\n                        pendingRecords: $xetable ? $xetable.getPendingRecords() : []\n                    };\n                }\n                return null;\n            }\n            // setProxyInfo (options) {\n            //   if (props.proxyConfig && options) {\n            //     const { pager, form } = options\n            //     const proxyOpts = computeProxyOpts.value\n            //     if (pager) {\n            //       if (pager.currentPage) {\n            //         reactData.tablePage.currentPage = Number(pager.currentPage)\n            //       }\n            //       if (pager.pageSize) {\n            //         reactData.tablePage.pageSize = Number(pager.pageSize)\n            //       }\n            //     }\n            //     if (proxyOpts.form && form) {\n            //       Object.assign(reactData.formData, form)\n            //     }\n            //   }\n            //   return nextTick()\n            // }\n        };\n        // 检查插槽\n        if (process.env.NODE_ENV === 'development') {\n            gridMethods.loadColumn = function (columns) {\n                var $xetable = refTable.value;\n                XEUtils.eachTree(columns, function (column) {\n                    if (column.slots) {\n                        XEUtils.each(column.slots, function (func) {\n                            if (!XEUtils.isFunction(func)) {\n                                if (!slots[func]) {\n                                    errLog('vxe.error.notSlot', [func]);\n                                }\n                            }\n                        });\n                    }\n                });\n                return $xetable.loadColumn(columns);\n            };\n            gridMethods.reloadColumn = function (columns) {\n                gridExtendTableMethods.clearAll();\n                return gridMethods.loadColumn(columns);\n            };\n        }\n        var gridPrivateMethods = {\n            extendTableMethods: extendTableMethods,\n            callSlot: function (slotFunc, params) {\n                if (slotFunc) {\n                    if (XEUtils.isString(slotFunc)) {\n                        slotFunc = slots[slotFunc] || null;\n                    }\n                    if (XEUtils.isFunction(slotFunc)) {\n                        return getSlotVNs(slotFunc(params));\n                    }\n                }\n                return [];\n            },\n            /**\n             * 获取需要排除的高度\n             */\n            getExcludeHeight: function () {\n                var height = props.height;\n                var isZMax = reactData.isZMax;\n                var el = refElem.value;\n                var formWrapper = refFormWrapper.value;\n                var toolbarWrapper = refToolbarWrapper.value;\n                var topWrapper = refTopWrapper.value;\n                var bottomWrapper = refBottomWrapper.value;\n                var pagerWrapper = refPagerWrapper.value;\n                var parentPaddingSize = isZMax || height !== 'auto' ? 0 : getPaddingTopBottomSize(el.parentNode);\n                return parentPaddingSize + getPaddingTopBottomSize(el) + getOffsetHeight(formWrapper) + getOffsetHeight(toolbarWrapper) + getOffsetHeight(topWrapper) + getOffsetHeight(bottomWrapper) + getOffsetHeight(pagerWrapper);\n            },\n            getParentHeight: function () {\n                var el = refElem.value;\n                if (el) {\n                    return (reactData.isZMax ? getDomNode().visibleHeight : XEUtils.toNumber(getComputedStyle(el.parentNode).height)) - gridPrivateMethods.getExcludeHeight();\n                }\n                return 0;\n            },\n            triggerToolbarCommitEvent: function (params, evnt) {\n                var code = params.code;\n                return gridMethods.commitProxy(params, evnt).then(function (rest) {\n                    if (code && rest && rest.status && ['query', 'reload', 'delete', 'save'].includes(code)) {\n                        gridMethods.dispatchEvent(code === 'delete' || code === 'save' ? \"proxy-\".concat(code) : 'proxy-query', __assign(__assign({}, rest), { isReload: code === 'reload' }), evnt);\n                    }\n                });\n            },\n            triggerToolbarBtnEvent: function (button, evnt) {\n                gridPrivateMethods.triggerToolbarCommitEvent(button, evnt);\n                gridMethods.dispatchEvent('toolbar-button-click', { code: button.code, button: button }, evnt);\n            },\n            triggerToolbarTolEvent: function (tool, evnt) {\n                gridPrivateMethods.triggerToolbarCommitEvent(tool, evnt);\n                gridMethods.dispatchEvent('toolbar-tool-click', { code: tool.code, tool: tool, $event: evnt });\n            },\n            triggerZoomEvent: function (evnt) {\n                gridMethods.zoom();\n                gridMethods.dispatchEvent('zoom', { type: reactData.isZMax ? 'max' : 'revert' }, evnt);\n            }\n        };\n        Object.assign($xegrid, gridExtendTableMethods, gridMethods, gridPrivateMethods);\n        var columnFlag = ref(0);\n        watch(function () { return props.columns ? props.columns.length : -1; }, function () {\n            columnFlag.value++;\n        });\n        watch(function () { return props.columns; }, function () {\n            columnFlag.value++;\n        });\n        watch(columnFlag, function () {\n            nextTick(function () { return $xegrid.loadColumn(props.columns || []); });\n        });\n        watch(function () { return props.toolbarConfig; }, function () {\n            initToolbar();\n        });\n        watch(function () { return props.pagerConfig; }, function () {\n            initPages();\n        });\n        watch(function () { return props.proxyConfig; }, function () {\n            initProxy();\n        });\n        var handleGlobalKeydownEvent = function (evnt) {\n            var zoomOpts = computeZoomOpts.value;\n            var isEsc = hasEventKey(evnt, EVENT_KEYS.ESCAPE);\n            if (isEsc && reactData.isZMax && zoomOpts.escRestore !== false) {\n                gridPrivateMethods.triggerZoomEvent(evnt);\n            }\n        };\n        VXETable.hooks.forEach(function (options) {\n            var setupGrid = options.setupGrid;\n            if (setupGrid) {\n                var hookRest = setupGrid($xegrid);\n                if (hookRest && XEUtils.isObject(hookRest)) {\n                    Object.assign($xegrid, hookRest);\n                }\n            }\n        });\n        initPages();\n        onMounted(function () {\n            nextTick(function () {\n                var data = props.data, columns = props.columns, proxyConfig = props.proxyConfig;\n                var proxyOpts = computeProxyOpts.value;\n                var formOpts = computeFormOpts.value;\n                if (isEnableConf(proxyConfig) && (data || (proxyOpts.form && formOpts.data))) {\n                    errLog('vxe.error.errConflicts', ['grid.data', 'grid.proxy-config']);\n                }\n                if (columns && columns.length) {\n                    $xegrid.loadColumn(columns);\n                }\n                initToolbar();\n            });\n            GlobalEvent.on($xegrid, 'keydown', handleGlobalKeydownEvent);\n        });\n        onUnmounted(function () {\n            GlobalEvent.off($xegrid, 'keydown');\n        });\n        nextTick(function () {\n            initProxy();\n        });\n        var renderVN = function () {\n            var _a;\n            var vSize = computeSize.value;\n            var styles = computeStyles.value;\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-grid', (_a = {},\n                        _a[\"size--\".concat(vSize)] = vSize,\n                        _a['is--animat'] = !!props.animat,\n                        _a['is--round'] = props.round,\n                        _a['is--maximize'] = reactData.isZMax,\n                        _a['is--loading'] = props.loading || reactData.tableLoading,\n                        _a)],\n                style: styles\n            }, renderLayout());\n        };\n        $xegrid.renderVN = renderVN;\n        provide('$xegrid', $xegrid);\n        return $xegrid;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767739,
      "end": 1714699767777,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { defineComponent, h, ref, computed, provide, getCurrentInstance, resolveComponent, reactive, onUnmounted, watch, nextTick, onMounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { getLastZIndex, nextZIndex, isEnableConf } from '../../tools/utils';\nimport { getOffsetHeight, getPaddingTopBottomSize, getDomNode } from '../../tools/dom';\nimport { errLog } from '../../tools/log';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { VXETable } from '../../v-x-e-table';\nimport tableComponentProps from '../../table/src/props';\nimport tableComponentEmits from '../../table/src/emits';\nimport { useSize } from '../../hooks/size';\nimport { GlobalEvent, hasEventKey, EVENT_KEYS } from '../../tools/event';\nimport { getSlotVNs } from '../../tools/vn';\nvar tableComponentPropKeys = Object.keys(tableComponentProps);\nvar tableComponentMethodKeys = ['clearAll', 'syncData', 'updateData', 'loadData', 'reloadData', 'reloadRow', 'loadColumn', 'reloadColumn', 'getRowNode', 'getColumnNode', 'getRowIndex', 'getVTRowIndex', 'getVMRowIndex', 'getColumnIndex', 'getVTColumnIndex', 'getVMColumnIndex', 'createData', 'createRow', 'revertData', 'clearData', 'isInsertByRow', 'isUpdateByRow', 'getColumns', 'getColumnById', 'getColumnByField', 'getTableColumn', 'getData', 'getCheckboxRecords', 'getParentRow', 'getRowSeq', 'getRowById', 'getRowid', 'getTableData', 'setColumnFixed', 'clearColumnFixed', 'setColumnWidth', 'getColumnWidth', 'hideColumn', 'showColumn', 'resetColumn', 'refreshColumn', 'refreshScroll', 'recalculate', 'closeTooltip', 'isAllCheckboxChecked', 'isAllCheckboxIndeterminate', 'getCheckboxIndeterminateRecords', 'setCheckboxRow', 'isCheckedByCheckboxRow', 'isIndeterminateByCheckboxRow', 'toggleCheckboxRow', 'setAllCheckboxRow', 'getRadioReserveRecord', 'clearRadioReserve', 'getCheckboxReserveRecords', 'clearCheckboxReserve', 'toggleAllCheckboxRow', 'clearCheckboxRow', 'setCurrentRow', 'isCheckedByRadioRow', 'setRadioRow', 'clearCurrentRow', 'clearRadioRow', 'getCurrentRecord', 'getRadioRecord', 'getCurrentColumn', 'setCurrentColumn', 'clearCurrentColumn', 'setPendingRow', 'togglePendingRow', 'getPendingRecords', 'clearPendingRow', 'sort', 'clearSort', 'isSort', 'getSortColumns', 'closeFilter', 'isFilter', 'isActiveFilterByColumn', 'isRowExpandLoaded', 'clearRowExpandLoaded', 'reloadRowExpand', 'reloadRowExpand', 'toggleRowExpand', 'setAllRowExpand', 'setRowExpand', 'isExpandByRow', 'isRowExpandByRow', 'clearRowExpand', 'clearRowExpandReserve', 'getRowExpandRecords', 'getTreeExpandRecords', 'isTreeExpandLoaded', 'clearTreeExpandLoaded', 'reloadTreeExpand', 'reloadTreeChilds', 'toggleTreeExpand', 'setAllTreeExpand', 'setTreeExpand', 'isTreeExpandByRow', 'clearTreeExpand', 'clearTreeExpandReserve', 'getScroll', 'scrollTo', 'scrollToRow', 'scrollToColumn', 'clearScroll', 'updateFooter', 'updateStatus', 'setMergeCells', 'removeInsertRow', 'removeMergeCells', 'getMergeCells', 'clearMergeCells', 'setMergeFooterItems', 'removeMergeFooterItems', 'getMergeFooterItems', 'clearMergeFooterItems', 'openTooltip', 'focus', 'blur', 'connect'];\nvar gridComponentEmits = __spreadArray(__spreadArray([], tableComponentEmits, true), [\n    'page-change',\n    'form-submit',\n    'form-submit-invalid',\n    'form-reset',\n    'form-collapse',\n    'form-toggle-collapse',\n    'proxy-query',\n    'proxy-delete',\n    'proxy-save',\n    'toolbar-button-click',\n    'toolbar-tool-click',\n    'zoom'\n], false);\nexport default defineComponent({\n    name: 'VxeGrid',\n    props: __assign(__assign({}, tableComponentProps), { layouts: Array, columns: Array, pagerConfig: Object, proxyConfig: Object, toolbarConfig: Object, formConfig: Object, zoomConfig: Object, size: { type: String, default: function () { return GlobalConfig.grid.size || GlobalConfig.size; } } }),\n    emits: gridComponentEmits,\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var xID = XEUtils.uniqueId();\n        var instance = getCurrentInstance();\n        var computeSize = useSize(props);\n        var reactData = reactive({\n            tableLoading: false,\n            proxyInited: false,\n            isZMax: false,\n            tableData: [],\n            filterData: [],\n            formData: {},\n            sortData: [],\n            tZindex: 0,\n            tablePage: {\n                total: 0,\n                pageSize: GlobalConfig.pager.pageSize || 10,\n                currentPage: 1\n            }\n        });\n        var refElem = ref();\n        var refTable = ref();\n        var refForm = ref();\n        var refToolbar = ref();\n        var refPager = ref();\n        var refFormWrapper = ref();\n        var refToolbarWrapper = ref();\n        var refTopWrapper = ref();\n        var refBottomWrapper = ref();\n        var refPagerWrapper = ref();\n        var extendTableMethods = function (methodKeys) {\n            var funcs = {};\n            methodKeys.forEach(function (name) {\n                funcs[name] = function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    var $xetable = refTable.value;\n                    if ($xetable && $xetable[name]) {\n                        return $xetable[name].apply($xetable, args);\n                    }\n                };\n            });\n            return funcs;\n        };\n        var gridExtendTableMethods = extendTableMethods(tableComponentMethodKeys);\n        tableComponentMethodKeys.forEach(function (name) {\n            gridExtendTableMethods[name] = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var $xetable = refTable.value;\n                if ($xetable && $xetable[name]) {\n                    return $xetable && $xetable[name].apply($xetable, args);\n                }\n            };\n        });\n        var computeProxyOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.grid.proxyConfig, props.proxyConfig);\n        });\n        var computeIsMsg = computed(function () {\n            var proxyOpts = computeProxyOpts.value;\n            return proxyOpts.message !== false;\n        });\n        var computePagerOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.grid.pagerConfig, props.pagerConfig);\n        });\n        var computeFormOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.grid.formConfig, props.formConfig);\n        });\n        var computeToolbarOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.grid.toolbarConfig, props.toolbarConfig);\n        });\n        var computeZoomOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.grid.zoomConfig, props.zoomConfig);\n        });\n        var computeStyles = computed(function () {\n            return reactData.isZMax ? { zIndex: reactData.tZindex } : null;\n        });\n        var computeTableExtendProps = computed(function () {\n            var rest = {};\n            var gridProps = props;\n            tableComponentPropKeys.forEach(function (key) {\n                rest[key] = gridProps[key];\n            });\n            return rest;\n        });\n        var refMaps = {\n            refElem: refElem,\n            refTable: refTable,\n            refForm: refForm,\n            refToolbar: refToolbar,\n            refPager: refPager\n        };\n        var computeMaps = {\n            computeProxyOpts: computeProxyOpts,\n            computePagerOpts: computePagerOpts,\n            computeFormOpts: computeFormOpts,\n            computeToolbarOpts: computeToolbarOpts,\n            computeZoomOpts: computeZoomOpts\n        };\n        var $xegrid = {\n            xID: xID,\n            props: props,\n            context: context,\n            instance: instance,\n            reactData: reactData,\n            getRefMaps: function () { return refMaps; },\n            getComputeMaps: function () { return computeMaps; }\n        };\n        var gridMethods = {};\n        var computeTableProps = computed(function () {\n            var seqConfig = props.seqConfig, pagerConfig = props.pagerConfig, loading = props.loading, editConfig = props.editConfig, proxyConfig = props.proxyConfig;\n            var isZMax = reactData.isZMax, tableLoading = reactData.tableLoading, tablePage = reactData.tablePage, tableData = reactData.tableData;\n            var tableExtendProps = computeTableExtendProps.value;\n            var proxyOpts = computeProxyOpts.value;\n            var pagerOpts = computePagerOpts.value;\n            var tableProps = Object.assign({}, tableExtendProps);\n            if (isZMax) {\n                if (tableExtendProps.maxHeight) {\n                    tableProps.maxHeight = 'auto';\n                }\n                else {\n                    tableProps.height = 'auto';\n                }\n            }\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                tableProps.loading = loading || tableLoading;\n                tableProps.data = tableData;\n                if (pagerConfig && proxyOpts.seq && isEnableConf(pagerOpts)) {\n                    tableProps.seqConfig = Object.assign({}, seqConfig, { startIndex: (tablePage.currentPage - 1) * tablePage.pageSize });\n                }\n            }\n            if (editConfig) {\n                tableProps.editConfig = Object.assign({}, editConfig);\n            }\n            return tableProps;\n        });\n        var initToolbar = function () {\n            var toolbarOpts = computeToolbarOpts.value;\n            if (props.toolbarConfig && isEnableConf(toolbarOpts)) {\n                nextTick(function () {\n                    var $xetable = refTable.value;\n                    var $xetoolbar = refToolbar.value;\n                    if ($xetable && $xetoolbar) {\n                        $xetable.connect($xetoolbar);\n                    }\n                });\n            }\n        };\n        var initPages = function () {\n            var tablePage = reactData.tablePage;\n            var pagerConfig = props.pagerConfig;\n            var pagerOpts = computePagerOpts.value;\n            var currentPage = pagerOpts.currentPage, pageSize = pagerOpts.pageSize;\n            if (pagerConfig && isEnableConf(pagerOpts)) {\n                if (currentPage) {\n                    tablePage.currentPage = currentPage;\n                }\n                if (pageSize) {\n                    tablePage.pageSize = pageSize;\n                }\n            }\n        };\n        var triggerPendingEvent = function (code) {\n            var isMsg = computeIsMsg.value;\n            var $xetable = refTable.value;\n            var selectRecords = $xetable.getCheckboxRecords();\n            if (selectRecords.length) {\n                $xetable.togglePendingRow(selectRecords);\n                gridExtendTableMethods.clearCheckboxRow();\n            }\n            else {\n                if (isMsg) {\n                    // 检测弹窗模块\n                    if (process.env.NODE_ENV === 'development') {\n                        if (!VXETable.modal) {\n                            errLog('vxe.error.reqModule', ['Modal']);\n                        }\n                    }\n                    VXETable.modal.message({ id: code, content: GlobalConfig.i18n('vxe.grid.selectOneRecord'), status: 'warning' });\n                }\n            }\n        };\n        var getRespMsg = function (rest, defaultMsg) {\n            var proxyOpts = computeProxyOpts.value;\n            var _a = proxyOpts.props, proxyProps = _a === void 0 ? {} : _a;\n            var msg;\n            if (rest && proxyProps.message) {\n                msg = XEUtils.get(rest, proxyProps.message);\n            }\n            return msg || GlobalConfig.i18n(defaultMsg);\n        };\n        var handleDeleteRow = function (code, alertKey, callback) {\n            var isMsg = computeIsMsg.value;\n            var selectRecords = gridExtendTableMethods.getCheckboxRecords();\n            if (isMsg) {\n                if (selectRecords.length) {\n                    return VXETable.modal.confirm({ id: \"cfm_\".concat(code), content: GlobalConfig.i18n(alertKey), escClosable: true }).then(function (type) {\n                        if (type === 'confirm') {\n                            return callback();\n                        }\n                    });\n                }\n                else {\n                    // 检测弹窗模块\n                    if (process.env.NODE_ENV === 'development') {\n                        if (!VXETable.modal) {\n                            errLog('vxe.error.reqModule', ['Modal']);\n                        }\n                    }\n                    VXETable.modal.message({ id: \"msg_\".concat(code), content: GlobalConfig.i18n('vxe.grid.selectOneRecord'), status: 'warning' });\n                }\n            }\n            else {\n                if (selectRecords.length) {\n                    callback();\n                }\n            }\n            return Promise.resolve();\n        };\n        var pageChangeEvent = function (params) {\n            var proxyConfig = props.proxyConfig;\n            var tablePage = reactData.tablePage;\n            var currentPage = params.currentPage, pageSize = params.pageSize;\n            var proxyOpts = computeProxyOpts.value;\n            tablePage.currentPage = currentPage;\n            tablePage.pageSize = pageSize;\n            gridMethods.dispatchEvent('page-change', params);\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                gridMethods.commitProxy('query').then(function (rest) {\n                    gridMethods.dispatchEvent('proxy-query', rest, params.$event);\n                });\n            }\n        };\n        var sortChangeEvent = function (params) {\n            var $xetable = refTable.value;\n            var proxyConfig = props.proxyConfig;\n            var computeSortOpts = $xetable.getComputeMaps().computeSortOpts;\n            var proxyOpts = computeProxyOpts.value;\n            var sortOpts = computeSortOpts.value;\n            // 如果是服务端排序\n            if (sortOpts.remote) {\n                reactData.sortData = params.sortList;\n                if (proxyConfig && isEnableConf(proxyOpts)) {\n                    reactData.tablePage.currentPage = 1;\n                    gridMethods.commitProxy('query').then(function (rest) {\n                        gridMethods.dispatchEvent('proxy-query', rest, params.$event);\n                    });\n                }\n            }\n            gridMethods.dispatchEvent('sort-change', params);\n        };\n        var filterChangeEvent = function (params) {\n            var $xetable = refTable.value;\n            var proxyConfig = props.proxyConfig;\n            var computeFilterOpts = $xetable.getComputeMaps().computeFilterOpts;\n            var proxyOpts = computeProxyOpts.value;\n            var filterOpts = computeFilterOpts.value;\n            // 如果是服务端过滤\n            if (filterOpts.remote) {\n                reactData.filterData = params.filterList;\n                if (proxyConfig && isEnableConf(proxyOpts)) {\n                    reactData.tablePage.currentPage = 1;\n                    gridMethods.commitProxy('query').then(function (rest) {\n                        gridMethods.dispatchEvent('proxy-query', rest, params.$event);\n                    });\n                }\n            }\n            gridMethods.dispatchEvent('filter-change', params);\n        };\n        var submitFormEvent = function (params) {\n            var proxyConfig = props.proxyConfig;\n            var proxyOpts = computeProxyOpts.value;\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                gridMethods.commitProxy('reload').then(function (rest) {\n                    gridMethods.dispatchEvent('proxy-query', __assign(__assign({}, rest), { isReload: true }), params.$event);\n                });\n            }\n            gridMethods.dispatchEvent('form-submit', params);\n        };\n        var resetFormEvent = function (params) {\n            var proxyConfig = props.proxyConfig;\n            var proxyOpts = computeProxyOpts.value;\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                gridMethods.commitProxy('reload').then(function (rest) {\n                    gridMethods.dispatchEvent('proxy-query', __assign(__assign({}, rest), { isReload: true }), params.$event);\n                });\n            }\n            gridMethods.dispatchEvent('form-reset', params);\n        };\n        var submitInvalidEvent = function (params) {\n            gridMethods.dispatchEvent('form-submit-invalid', params);\n        };\n        var collapseEvent = function (params) {\n            nextTick(function () { return gridExtendTableMethods.recalculate(true); });\n            gridMethods.dispatchEvent('form-toggle-collapse', params);\n            gridMethods.dispatchEvent('form-collapse', params);\n        };\n        var handleZoom = function (isMax) {\n            var isZMax = reactData.isZMax;\n            if (isMax ? !isZMax : isZMax) {\n                reactData.isZMax = !isZMax;\n                if (reactData.tZindex < getLastZIndex()) {\n                    reactData.tZindex = nextZIndex();\n                }\n            }\n            return nextTick().then(function () { return gridExtendTableMethods.recalculate(true); }).then(function () { return reactData.isZMax; });\n        };\n        var getFuncSlot = function (optSlots, slotKey) {\n            var funcSlot = optSlots[slotKey];\n            if (funcSlot) {\n                if (XEUtils.isString(funcSlot)) {\n                    if (slots[funcSlot]) {\n                        return slots[funcSlot];\n                    }\n                    else {\n                        if (process.env.NODE_ENV === 'development') {\n                            errLog('vxe.error.notSlot', [funcSlot]);\n                        }\n                    }\n                }\n                else {\n                    return funcSlot;\n                }\n            }\n            return null;\n        };\n        /**\n         * 渲染表单\n         */\n        var renderForms = function () {\n            var formConfig = props.formConfig, proxyConfig = props.proxyConfig;\n            var formData = reactData.formData;\n            var proxyOpts = computeProxyOpts.value;\n            var formOpts = computeFormOpts.value;\n            var restVNs = [];\n            if ((formConfig && isEnableConf(formOpts)) || slots.form) {\n                var slotVNs = [];\n                if (slots.form) {\n                    slotVNs = slots.form({ $grid: $xegrid });\n                }\n                else {\n                    if (formOpts.items) {\n                        var formSlots_1 = {};\n                        if (!formOpts.inited) {\n                            formOpts.inited = true;\n                            var beforeItem_1 = proxyOpts.beforeItem;\n                            if (proxyOpts && beforeItem_1) {\n                                formOpts.items.forEach(function (item) {\n                                    beforeItem_1({ $grid: $xegrid, item: item });\n                                });\n                            }\n                        }\n                        // 处理插槽\n                        formOpts.items.forEach(function (item) {\n                            XEUtils.each(item.slots, function (func) {\n                                if (!XEUtils.isFunction(func)) {\n                                    if (slots[func]) {\n                                        formSlots_1[func] = slots[func];\n                                    }\n                                }\n                            });\n                        });\n                        slotVNs.push(h(resolveComponent('vxe-form'), __assign(__assign({ ref: refForm }, Object.assign({}, formOpts, {\n                            data: proxyConfig && isEnableConf(proxyOpts) && proxyOpts.form ? formData : formOpts.data\n                        })), { onSubmit: submitFormEvent, onReset: resetFormEvent, onSubmitInvalid: submitInvalidEvent, onCollapse: collapseEvent }), formSlots_1));\n                    }\n                }\n                restVNs.push(h('div', {\n                    ref: refFormWrapper,\n                    key: 'form',\n                    class: 'vxe-grid--form-wrapper'\n                }, slotVNs));\n            }\n            return restVNs;\n        };\n        /**\n         * 渲染工具栏\n         */\n        var renderToolbars = function () {\n            var toolbarConfig = props.toolbarConfig;\n            var toolbarOpts = computeToolbarOpts.value;\n            var restVNs = [];\n            if ((toolbarConfig && isEnableConf(toolbarOpts)) || slots.toolbar) {\n                var slotVNs = [];\n                if (slots.toolbar) {\n                    slotVNs = slots.toolbar({ $grid: $xegrid });\n                }\n                else {\n                    var toolbarOptSlots = toolbarOpts.slots;\n                    var buttonsSlot = void 0;\n                    var toolsSlot = void 0;\n                    var toolbarSlots = {};\n                    if (toolbarOptSlots) {\n                        buttonsSlot = getFuncSlot(toolbarOptSlots, 'buttons');\n                        toolsSlot = getFuncSlot(toolbarOptSlots, 'tools');\n                        if (buttonsSlot) {\n                            toolbarSlots.buttons = buttonsSlot;\n                        }\n                        if (toolsSlot) {\n                            toolbarSlots.tools = toolsSlot;\n                        }\n                    }\n                    slotVNs.push(h(resolveComponent('vxe-toolbar'), __assign({ ref: refToolbar }, toolbarOpts), toolbarSlots));\n                }\n                restVNs.push(h('div', {\n                    ref: refToolbarWrapper,\n                    key: 'toolbar',\n                    class: 'vxe-grid--toolbar-wrapper'\n                }, slotVNs));\n            }\n            return restVNs;\n        };\n        /**\n         * 渲染表格顶部区域\n         */\n        var renderTops = function () {\n            if (slots.top) {\n                return [\n                    h('div', {\n                        ref: refTopWrapper,\n                        key: 'top',\n                        class: 'vxe-grid--top-wrapper'\n                    }, slots.top({ $grid: $xegrid }))\n                ];\n            }\n            return [];\n        };\n        var defaultLayouts = ['Form', 'Toolbar', 'Top', 'Table', 'Bottom', 'Pager'];\n        var renderLayout = function () {\n            var layouts = props.layouts;\n            var vns = [];\n            var currLayouts = (layouts && layouts.length ? layouts : (GlobalConfig.grid.layouts || defaultLayouts));\n            currLayouts.forEach(function (name) {\n                switch (name) {\n                    case 'Form':\n                        vns.push(renderForms());\n                        break;\n                    case 'Toolbar':\n                        vns.push(renderToolbars());\n                        break;\n                    case 'Top':\n                        vns.push(renderTops());\n                        break;\n                    case 'Table':\n                        vns.push(renderTables());\n                        break;\n                    case 'Bottom':\n                        vns.push(renderBottoms());\n                        break;\n                    case 'Pager':\n                        vns.push(renderPagers());\n                        break;\n                    default:\n                        if (process.env.NODE_ENV === 'development') {\n                            errLog('vxe.error.notProp', [\"layouts -> \".concat(name)]);\n                        }\n                        break;\n                }\n            });\n            return vns;\n        };\n        var tableCompEvents = {};\n        tableComponentEmits.forEach(function (name) {\n            var type = XEUtils.camelCase(\"on-\".concat(name));\n            tableCompEvents[type] = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                return emit.apply(void 0, __spreadArray([name], args, false));\n            };\n        });\n        /**\n         * 渲染表格\n         */\n        var renderTables = function () {\n            var proxyConfig = props.proxyConfig;\n            var tableProps = computeTableProps.value;\n            var proxyOpts = computeProxyOpts.value;\n            var tableOns = Object.assign({}, tableCompEvents);\n            var emptySlot = slots.empty;\n            var loadingSlot = slots.loading;\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                if (proxyOpts.sort) {\n                    tableOns.onSortChange = sortChangeEvent;\n                }\n                if (proxyOpts.filter) {\n                    tableOns.onFilterChange = filterChangeEvent;\n                }\n            }\n            var slotObj = {};\n            if (emptySlot) {\n                slotObj.empty = function () { return emptySlot({}); };\n            }\n            if (loadingSlot) {\n                slotObj.loading = function () { return loadingSlot({}); };\n            }\n            return [\n                h(resolveComponent('vxe-table'), __assign(__assign({ ref: refTable, key: 'table' }, tableProps), tableOns), slotObj)\n            ];\n        };\n        /**\n         * 渲染表格底部区域\n         */\n        var renderBottoms = function () {\n            if (slots.bottom) {\n                return [\n                    h('div', {\n                        ref: refBottomWrapper,\n                        key: 'bottom',\n                        class: 'vxe-grid--bottom-wrapper'\n                    }, slots.bottom({ $grid: $xegrid }))\n                ];\n            }\n            return [];\n        };\n        /**\n         * 渲染分页\n         */\n        var renderPagers = function () {\n            var proxyConfig = props.proxyConfig, pagerConfig = props.pagerConfig;\n            var proxyOpts = computeProxyOpts.value;\n            var pagerOpts = computePagerOpts.value;\n            var restVNs = [];\n            if ((pagerConfig && isEnableConf(pagerOpts)) || slots.pager) {\n                var slotVNs = [];\n                if (slots.pager) {\n                    slotVNs = slots.pager({ $grid: $xegrid });\n                }\n                else {\n                    var pagerOptSlots = pagerOpts.slots;\n                    var pagerSlots = {};\n                    var leftSlot = void 0;\n                    var rightSlot = void 0;\n                    if (pagerOptSlots) {\n                        leftSlot = getFuncSlot(pagerOptSlots, 'left');\n                        rightSlot = getFuncSlot(pagerOptSlots, 'right');\n                        if (leftSlot) {\n                            pagerSlots.left = leftSlot;\n                        }\n                        if (rightSlot) {\n                            pagerSlots.right = rightSlot;\n                        }\n                    }\n                    slotVNs.push(h(resolveComponent('vxe-pager'), __assign(__assign(__assign({ ref: refPager }, pagerOpts), (proxyConfig && isEnableConf(proxyOpts) ? reactData.tablePage : {})), { onPageChange: pageChangeEvent }), pagerSlots));\n                }\n                restVNs.push(h('div', {\n                    ref: refPagerWrapper,\n                    key: 'pager',\n                    class: 'vxe-grid--pager-wrapper'\n                }, slotVNs));\n            }\n            return restVNs;\n        };\n        var initProxy = function () {\n            var proxyConfig = props.proxyConfig, formConfig = props.formConfig;\n            var proxyInited = reactData.proxyInited;\n            var proxyOpts = computeProxyOpts.value;\n            var formOpts = computeFormOpts.value;\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                if (formConfig && isEnableConf(formOpts) && proxyOpts.form && formOpts.items) {\n                    var formData_1 = {};\n                    formOpts.items.forEach(function (item) {\n                        var field = item.field, itemRender = item.itemRender;\n                        if (field) {\n                            var itemValue = null;\n                            if (itemRender) {\n                                var defaultValue = itemRender.defaultValue;\n                                if (XEUtils.isFunction(defaultValue)) {\n                                    itemValue = defaultValue({ item: item });\n                                }\n                                else if (!XEUtils.isUndefined(defaultValue)) {\n                                    itemValue = defaultValue;\n                                }\n                            }\n                            formData_1[field] = itemValue;\n                        }\n                    });\n                    reactData.formData = formData_1;\n                }\n                if (!proxyInited) {\n                    reactData.proxyInited = true;\n                    if (proxyOpts.autoLoad !== false) {\n                        nextTick().then(function () { return gridMethods.commitProxy('_init'); }).then(function (rest) {\n                            gridMethods.dispatchEvent('proxy-query', __assign(__assign({}, rest), { isInited: true }), new Event('init'));\n                        });\n                    }\n                }\n            }\n        };\n        gridMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $grid: $xegrid, $event: evnt }, params));\n            },\n            /**\n             * 提交指令，支持 code 或 button\n             * @param {String/Object} code 字符串或对象\n             */\n            commitProxy: function (proxyTarget) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                var toolbarConfig = props.toolbarConfig, pagerConfig = props.pagerConfig, editRules = props.editRules;\n                var tablePage = reactData.tablePage, formData = reactData.formData;\n                var isMsg = computeIsMsg.value;\n                var proxyOpts = computeProxyOpts.value;\n                var pagerOpts = computePagerOpts.value;\n                var toolbarOpts = computeToolbarOpts.value;\n                var beforeQuery = proxyOpts.beforeQuery, afterQuery = proxyOpts.afterQuery, beforeDelete = proxyOpts.beforeDelete, afterDelete = proxyOpts.afterDelete, beforeSave = proxyOpts.beforeSave, afterSave = proxyOpts.afterSave, _a = proxyOpts.ajax, ajax = _a === void 0 ? {} : _a, _b = proxyOpts.props, proxyProps = _b === void 0 ? {} : _b;\n                var $xetable = refTable.value;\n                var button = null;\n                var code = null;\n                if (XEUtils.isString(proxyTarget)) {\n                    var buttons = toolbarOpts.buttons;\n                    var matchObj = toolbarConfig && isEnableConf(toolbarOpts) && buttons ? XEUtils.findTree(buttons, function (item) { return item.code === proxyTarget; }, { children: 'dropdowns' }) : null;\n                    button = matchObj ? matchObj.item : null;\n                    code = proxyTarget;\n                }\n                else {\n                    button = proxyTarget;\n                    code = button.code;\n                }\n                var btnParams = button ? button.params : null;\n                switch (code) {\n                    case 'insert':\n                        return $xetable.insert({});\n                    case 'insert_edit':\n                        return $xetable.insert({}).then(function (_a) {\n                            var row = _a.row;\n                            return $xetable.setEditRow(row);\n                        });\n                    // 已废弃\n                    case 'insert_actived':\n                        return $xetable.insert({}).then(function (_a) {\n                            var row = _a.row;\n                            return $xetable.setEditRow(row);\n                        });\n                    // 已废弃\n                    case 'mark_cancel':\n                        triggerPendingEvent(code);\n                        break;\n                    case 'remove':\n                        return handleDeleteRow(code, 'vxe.grid.removeSelectRecord', function () { return $xetable.removeCheckboxRow(); });\n                    case 'import':\n                        $xetable.importData(btnParams);\n                        break;\n                    case 'open_import':\n                        $xetable.openImport(btnParams);\n                        break;\n                    case 'export':\n                        $xetable.exportData(btnParams);\n                        break;\n                    case 'open_export':\n                        $xetable.openExport(btnParams);\n                        break;\n                    case 'reset_custom':\n                        return $xetable.resetColumn(true);\n                    case '_init':\n                    case 'reload':\n                    case 'query': {\n                        var ajaxMethods = ajax.query;\n                        if (ajaxMethods) {\n                            var isInited = code === '_init';\n                            var isReload = code === 'reload';\n                            var sortList = [];\n                            var filterList = [];\n                            var pageParams = {};\n                            if (pagerConfig) {\n                                if (isInited || isReload) {\n                                    tablePage.currentPage = 1;\n                                }\n                                if (isEnableConf(pagerOpts)) {\n                                    pageParams = __assign({}, tablePage);\n                                }\n                            }\n                            if (isInited) {\n                                var computeSortOpts = $xetable.getComputeMaps().computeSortOpts;\n                                var sortOpts = computeSortOpts.value;\n                                var defaultSort = sortOpts.defaultSort;\n                                // 如果使用默认排序\n                                if (defaultSort) {\n                                    if (!XEUtils.isArray(defaultSort)) {\n                                        defaultSort = [defaultSort];\n                                    }\n                                    sortList = defaultSort.map(function (item) {\n                                        return {\n                                            field: item.field,\n                                            property: item.field,\n                                            order: item.order\n                                        };\n                                    });\n                                }\n                                filterList = $xetable.getCheckedFilters();\n                            }\n                            else {\n                                if (isReload) {\n                                    $xetable.clearAll();\n                                }\n                                else {\n                                    sortList = $xetable.getSortColumns();\n                                    filterList = $xetable.getCheckedFilters();\n                                }\n                            }\n                            var commitParams = {\n                                code: code,\n                                button: button,\n                                isInited: isInited,\n                                isReload: isReload,\n                                $grid: $xegrid,\n                                page: pageParams,\n                                sort: sortList.length ? sortList[0] : {},\n                                sorts: sortList,\n                                filters: filterList,\n                                form: formData,\n                                options: ajaxMethods\n                            };\n                            reactData.sortData = sortList;\n                            reactData.filterData = filterList;\n                            reactData.tableLoading = true;\n                            var applyArgs_1 = [commitParams].concat(args);\n                            return Promise.resolve((beforeQuery || ajaxMethods).apply(void 0, applyArgs_1))\n                                .then(function (rest) {\n                                reactData.tableLoading = false;\n                                if (rest) {\n                                    if (pagerConfig && isEnableConf(pagerOpts)) {\n                                        var total = XEUtils.get(rest, proxyProps.total || 'page.total') || 0;\n                                        tablePage.total = XEUtils.toNumber(total);\n                                        reactData.tableData = XEUtils.get(rest, proxyProps.result || 'result') || [];\n                                        // 检验当前页码，不能超出当前最大页数\n                                        var pageCount = Math.max(Math.ceil(total / tablePage.pageSize), 1);\n                                        if (tablePage.currentPage > pageCount) {\n                                            tablePage.currentPage = pageCount;\n                                        }\n                                    }\n                                    else {\n                                        reactData.tableData = (proxyProps.list ? XEUtils.get(rest, proxyProps.list) : rest) || [];\n                                    }\n                                }\n                                else {\n                                    reactData.tableData = [];\n                                }\n                                if (afterQuery) {\n                                    afterQuery.apply(void 0, applyArgs_1);\n                                }\n                                return { status: true };\n                            }).catch(function () {\n                                reactData.tableLoading = false;\n                                return { status: false };\n                            });\n                        }\n                        else {\n                            if (process.env.NODE_ENV === 'development') {\n                                errLog('vxe.error.notFunc', ['proxy-config.ajax.query']);\n                            }\n                        }\n                        break;\n                    }\n                    case 'delete': {\n                        var ajaxMethods_1 = ajax.delete;\n                        if (ajaxMethods_1) {\n                            var selectRecords_1 = gridExtendTableMethods.getCheckboxRecords();\n                            var removeRecords_1 = selectRecords_1.filter(function (row) { return !$xetable.isInsertByRow(row); });\n                            var body = { removeRecords: removeRecords_1 };\n                            var commitParams = { $grid: $xegrid, code: code, button: button, body: body, form: formData, options: ajaxMethods_1 };\n                            var applyArgs_2 = [commitParams].concat(args);\n                            if (selectRecords_1.length) {\n                                return handleDeleteRow(code, 'vxe.grid.deleteSelectRecord', function () {\n                                    if (!removeRecords_1.length) {\n                                        return $xetable.remove(selectRecords_1);\n                                    }\n                                    reactData.tableLoading = true;\n                                    return Promise.resolve((beforeDelete || ajaxMethods_1).apply(void 0, applyArgs_2))\n                                        .then(function (rest) {\n                                        reactData.tableLoading = false;\n                                        $xetable.setPendingRow(removeRecords_1, false);\n                                        if (isMsg) {\n                                            // 检测弹窗模块\n                                            if (process.env.NODE_ENV === 'development') {\n                                                if (!VXETable.modal) {\n                                                    errLog('vxe.error.reqModule', ['Modal']);\n                                                }\n                                            }\n                                            VXETable.modal.message({ content: getRespMsg(rest, 'vxe.grid.delSuccess'), status: 'success' });\n                                        }\n                                        if (afterDelete) {\n                                            afterDelete.apply(void 0, applyArgs_2);\n                                        }\n                                        else {\n                                            gridMethods.commitProxy('query');\n                                        }\n                                        return { status: true };\n                                    })\n                                        .catch(function (rest) {\n                                        reactData.tableLoading = false;\n                                        if (isMsg) {\n                                            if (process.env.NODE_ENV === 'development') {\n                                                if (!VXETable.modal.message) {\n                                                    errLog('vxe.error.reqModule', ['Modal']);\n                                                }\n                                            }\n                                            VXETable.modal.message({ id: code, content: getRespMsg(rest, 'vxe.grid.operError'), status: 'error' });\n                                        }\n                                        return { status: false };\n                                    });\n                                });\n                            }\n                            else {\n                                if (isMsg) {\n                                    // 检测弹窗模块\n                                    if (process.env.NODE_ENV === 'development') {\n                                        if (!VXETable.modal) {\n                                            errLog('vxe.error.reqModule', ['Modal']);\n                                        }\n                                    }\n                                    VXETable.modal.message({ id: code, content: GlobalConfig.i18n('vxe.grid.selectOneRecord'), status: 'warning' });\n                                }\n                            }\n                        }\n                        else {\n                            if (process.env.NODE_ENV === 'development') {\n                                errLog('vxe.error.notFunc', ['proxy-config.ajax.delete']);\n                            }\n                        }\n                        break;\n                    }\n                    case 'save': {\n                        var ajaxMethods_2 = ajax.save;\n                        if (ajaxMethods_2) {\n                            var body_1 = $xetable.getRecordset();\n                            var insertRecords_1 = body_1.insertRecords, removeRecords_2 = body_1.removeRecords, updateRecords_1 = body_1.updateRecords, pendingRecords_1 = body_1.pendingRecords;\n                            var commitParams = { $grid: $xegrid, code: code, button: button, body: body_1, form: formData, options: ajaxMethods_2 };\n                            var applyArgs_3 = [commitParams].concat(args);\n                            // 排除掉新增且标记为删除的数据\n                            if (insertRecords_1.length) {\n                                body_1.pendingRecords = pendingRecords_1.filter(function (row) { return $xetable.findRowIndexOf(insertRecords_1, row) === -1; });\n                            }\n                            // 排除已标记为删除的数据\n                            if (pendingRecords_1.length) {\n                                body_1.insertRecords = insertRecords_1.filter(function (row) { return $xetable.findRowIndexOf(pendingRecords_1, row) === -1; });\n                            }\n                            var restPromise = Promise.resolve();\n                            if (editRules) {\n                                // 只校验新增和修改的数据\n                                restPromise = $xetable.validate(body_1.insertRecords.concat(updateRecords_1));\n                            }\n                            return restPromise.then(function (errMap) {\n                                if (errMap) {\n                                    // 如果校验不通过\n                                    return;\n                                }\n                                if (body_1.insertRecords.length || removeRecords_2.length || updateRecords_1.length || body_1.pendingRecords.length) {\n                                    reactData.tableLoading = true;\n                                    return Promise.resolve((beforeSave || ajaxMethods_2).apply(void 0, applyArgs_3))\n                                        .then(function (rest) {\n                                        reactData.tableLoading = false;\n                                        $xetable.clearPendingRow();\n                                        if (isMsg) {\n                                            // 检测弹窗模块\n                                            if (process.env.NODE_ENV === 'development') {\n                                                if (!VXETable.modal) {\n                                                    errLog('vxe.error.reqModule', ['Modal']);\n                                                }\n                                            }\n                                            VXETable.modal.message({ content: getRespMsg(rest, 'vxe.grid.saveSuccess'), status: 'success' });\n                                        }\n                                        if (afterSave) {\n                                            afterSave.apply(void 0, applyArgs_3);\n                                        }\n                                        else {\n                                            gridMethods.commitProxy('query');\n                                        }\n                                        return { status: true };\n                                    })\n                                        .catch(function (rest) {\n                                        reactData.tableLoading = false;\n                                        if (isMsg) {\n                                            // 检测弹窗模块\n                                            if (process.env.NODE_ENV === 'development') {\n                                                if (!VXETable.modal) {\n                                                    errLog('vxe.error.reqModule', ['Modal']);\n                                                }\n                                            }\n                                            VXETable.modal.message({ id: code, content: getRespMsg(rest, 'vxe.grid.operError'), status: 'error' });\n                                        }\n                                        return { status: false };\n                                    });\n                                }\n                                else {\n                                    if (isMsg) {\n                                        // 检测弹窗模块\n                                        if (process.env.NODE_ENV === 'development') {\n                                            if (!VXETable.modal) {\n                                                errLog('vxe.error.reqModule', ['Modal']);\n                                            }\n                                        }\n                                        VXETable.modal.message({ id: code, content: GlobalConfig.i18n('vxe.grid.dataUnchanged'), status: 'info' });\n                                    }\n                                }\n                            });\n                        }\n                        else {\n                            if (process.env.NODE_ENV === 'development') {\n                                errLog('vxe.error.notFunc', ['proxy-config.ajax.save']);\n                            }\n                        }\n                        break;\n                    }\n                    default: {\n                        var gCommandOpts = VXETable.commands.get(code);\n                        if (gCommandOpts) {\n                            if (gCommandOpts.commandMethod) {\n                                gCommandOpts.commandMethod.apply(gCommandOpts, __spreadArray([{ code: code, button: button, $grid: $xegrid, $table: $xetable }], args, false));\n                            }\n                            else {\n                                if (process.env.NODE_ENV === 'development') {\n                                    errLog('vxe.error.notCommands', [code]);\n                                }\n                            }\n                        }\n                    }\n                }\n                return nextTick();\n            },\n            zoom: function () {\n                if (reactData.isZMax) {\n                    return gridMethods.revert();\n                }\n                return gridMethods.maximize();\n            },\n            isMaximized: function () {\n                return reactData.isZMax;\n            },\n            maximize: function () {\n                return handleZoom(true);\n            },\n            revert: function () {\n                return handleZoom();\n            },\n            getFormItems: function (itemIndex) {\n                var formOpts = computeFormOpts.value;\n                var formConfig = props.formConfig;\n                var items = formOpts.items;\n                var itemList = [];\n                XEUtils.eachTree(formConfig && isEnableConf(formOpts) && items ? items : [], function (item) {\n                    itemList.push(item);\n                }, { children: 'children' });\n                return XEUtils.isUndefined(itemIndex) ? itemList : itemList[itemIndex];\n            },\n            getProxyInfo: function () {\n                var $xetable = refTable.value;\n                if (props.proxyConfig) {\n                    var sortData = reactData.sortData;\n                    return {\n                        data: reactData.tableData,\n                        filter: reactData.filterData,\n                        form: reactData.formData,\n                        sort: sortData.length ? sortData[0] : {},\n                        sorts: sortData,\n                        pager: reactData.tablePage,\n                        pendingRecords: $xetable ? $xetable.getPendingRecords() : []\n                    };\n                }\n                return null;\n            }\n            // setProxyInfo (options) {\n            //   if (props.proxyConfig && options) {\n            //     const { pager, form } = options\n            //     const proxyOpts = computeProxyOpts.value\n            //     if (pager) {\n            //       if (pager.currentPage) {\n            //         reactData.tablePage.currentPage = Number(pager.currentPage)\n            //       }\n            //       if (pager.pageSize) {\n            //         reactData.tablePage.pageSize = Number(pager.pageSize)\n            //       }\n            //     }\n            //     if (proxyOpts.form && form) {\n            //       Object.assign(reactData.formData, form)\n            //     }\n            //   }\n            //   return nextTick()\n            // }\n        };\n        // 检查插槽\n        if (process.env.NODE_ENV === 'development') {\n            gridMethods.loadColumn = function (columns) {\n                var $xetable = refTable.value;\n                XEUtils.eachTree(columns, function (column) {\n                    if (column.slots) {\n                        XEUtils.each(column.slots, function (func) {\n                            if (!XEUtils.isFunction(func)) {\n                                if (!slots[func]) {\n                                    errLog('vxe.error.notSlot', [func]);\n                                }\n                            }\n                        });\n                    }\n                });\n                return $xetable.loadColumn(columns);\n            };\n            gridMethods.reloadColumn = function (columns) {\n                gridExtendTableMethods.clearAll();\n                return gridMethods.loadColumn(columns);\n            };\n        }\n        var gridPrivateMethods = {\n            extendTableMethods: extendTableMethods,\n            callSlot: function (slotFunc, params) {\n                if (slotFunc) {\n                    if (XEUtils.isString(slotFunc)) {\n                        slotFunc = slots[slotFunc] || null;\n                    }\n                    if (XEUtils.isFunction(slotFunc)) {\n                        return getSlotVNs(slotFunc(params));\n                    }\n                }\n                return [];\n            },\n            /**\n             * 获取需要排除的高度\n             */\n            getExcludeHeight: function () {\n                var height = props.height;\n                var isZMax = reactData.isZMax;\n                var el = refElem.value;\n                var formWrapper = refFormWrapper.value;\n                var toolbarWrapper = refToolbarWrapper.value;\n                var topWrapper = refTopWrapper.value;\n                var bottomWrapper = refBottomWrapper.value;\n                var pagerWrapper = refPagerWrapper.value;\n                var parentPaddingSize = isZMax || height !== 'auto' ? 0 : getPaddingTopBottomSize(el.parentNode);\n                return parentPaddingSize + getPaddingTopBottomSize(el) + getOffsetHeight(formWrapper) + getOffsetHeight(toolbarWrapper) + getOffsetHeight(topWrapper) + getOffsetHeight(bottomWrapper) + getOffsetHeight(pagerWrapper);\n            },\n            getParentHeight: function () {\n                var el = refElem.value;\n                if (el) {\n                    return (reactData.isZMax ? getDomNode().visibleHeight : XEUtils.toNumber(getComputedStyle(el.parentNode).height)) - gridPrivateMethods.getExcludeHeight();\n                }\n                return 0;\n            },\n            triggerToolbarCommitEvent: function (params, evnt) {\n                var code = params.code;\n                return gridMethods.commitProxy(params, evnt).then(function (rest) {\n                    if (code && rest && rest.status && ['query', 'reload', 'delete', 'save'].includes(code)) {\n                        gridMethods.dispatchEvent(code === 'delete' || code === 'save' ? \"proxy-\".concat(code) : 'proxy-query', __assign(__assign({}, rest), { isReload: code === 'reload' }), evnt);\n                    }\n                });\n            },\n            triggerToolbarBtnEvent: function (button, evnt) {\n                gridPrivateMethods.triggerToolbarCommitEvent(button, evnt);\n                gridMethods.dispatchEvent('toolbar-button-click', { code: button.code, button: button }, evnt);\n            },\n            triggerToolbarTolEvent: function (tool, evnt) {\n                gridPrivateMethods.triggerToolbarCommitEvent(tool, evnt);\n                gridMethods.dispatchEvent('toolbar-tool-click', { code: tool.code, tool: tool, $event: evnt });\n            },\n            triggerZoomEvent: function (evnt) {\n                gridMethods.zoom();\n                gridMethods.dispatchEvent('zoom', { type: reactData.isZMax ? 'max' : 'revert' }, evnt);\n            }\n        };\n        Object.assign($xegrid, gridExtendTableMethods, gridMethods, gridPrivateMethods);\n        var columnFlag = ref(0);\n        watch(function () { return props.columns ? props.columns.length : -1; }, function () {\n            columnFlag.value++;\n        });\n        watch(function () { return props.columns; }, function () {\n            columnFlag.value++;\n        });\n        watch(columnFlag, function () {\n            nextTick(function () { return $xegrid.loadColumn(props.columns || []); });\n        });\n        watch(function () { return props.toolbarConfig; }, function () {\n            initToolbar();\n        });\n        watch(function () { return props.pagerConfig; }, function () {\n            initPages();\n        });\n        watch(function () { return props.proxyConfig; }, function () {\n            initProxy();\n        });\n        var handleGlobalKeydownEvent = function (evnt) {\n            var zoomOpts = computeZoomOpts.value;\n            var isEsc = hasEventKey(evnt, EVENT_KEYS.ESCAPE);\n            if (isEsc && reactData.isZMax && zoomOpts.escRestore !== false) {\n                gridPrivateMethods.triggerZoomEvent(evnt);\n            }\n        };\n        VXETable.hooks.forEach(function (options) {\n            var setupGrid = options.setupGrid;\n            if (setupGrid) {\n                var hookRest = setupGrid($xegrid);\n                if (hookRest && XEUtils.isObject(hookRest)) {\n                    Object.assign($xegrid, hookRest);\n                }\n            }\n        });\n        initPages();\n        onMounted(function () {\n            nextTick(function () {\n                var data = props.data, columns = props.columns, proxyConfig = props.proxyConfig;\n                var proxyOpts = computeProxyOpts.value;\n                var formOpts = computeFormOpts.value;\n                if (isEnableConf(proxyConfig) && (data || (proxyOpts.form && formOpts.data))) {\n                    errLog('vxe.error.errConflicts', ['grid.data', 'grid.proxy-config']);\n                }\n                if (columns && columns.length) {\n                    $xegrid.loadColumn(columns);\n                }\n                initToolbar();\n            });\n            GlobalEvent.on($xegrid, 'keydown', handleGlobalKeydownEvent);\n        });\n        onUnmounted(function () {\n            GlobalEvent.off($xegrid, 'keydown');\n        });\n        nextTick(function () {\n            initProxy();\n        });\n        var renderVN = function () {\n            var _a;\n            var vSize = computeSize.value;\n            var styles = computeStyles.value;\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-grid', (_a = {},\n                        _a[\"size--\".concat(vSize)] = vSize,\n                        _a['is--animat'] = !!props.animat,\n                        _a['is--round'] = props.round,\n                        _a['is--maximize'] = reactData.isZMax,\n                        _a['is--loading'] = props.loading || reactData.tableLoading,\n                        _a)],\n                style: styles\n            }, renderLayout());\n        };\n        $xegrid.renderVN = renderVN;\n        provide('$xegrid', $xegrid);\n        return $xegrid;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767777,
      "end": 1714699767777,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "var __assign = function() {\n  __assign = Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s)\n        if (Object.prototype.hasOwnProperty.call(s, p))\n          t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArray = function(to, from, pack) {\n  if (pack || arguments.length === 2)\n    for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n        if (!ar)\n          ar = Array.prototype.slice.call(from, 0, i);\n        ar[i] = from[i];\n      }\n    }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { defineComponent, h, ref, computed, provide, getCurrentInstance, resolveComponent, reactive, onUnmounted, watch, nextTick, onMounted } from \"vue\";\nimport XEUtils from \"xe-utils\";\nimport { getLastZIndex, nextZIndex, isEnableConf } from \"../../tools/utils\";\nimport { getOffsetHeight, getPaddingTopBottomSize, getDomNode } from \"../../tools/dom\";\nimport { errLog } from \"../../tools/log\";\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport { VXETable } from \"../../v-x-e-table\";\nimport tableComponentProps from \"../../table/src/props\";\nimport tableComponentEmits from \"../../table/src/emits\";\nimport { useSize } from \"../../hooks/size\";\nimport { GlobalEvent, hasEventKey, EVENT_KEYS } from \"../../tools/event\";\nimport { getSlotVNs } from \"../../tools/vn\";\nvar tableComponentPropKeys = Object.keys(tableComponentProps);\nvar tableComponentMethodKeys = [\"clearAll\", \"syncData\", \"updateData\", \"loadData\", \"reloadData\", \"reloadRow\", \"loadColumn\", \"reloadColumn\", \"getRowNode\", \"getColumnNode\", \"getRowIndex\", \"getVTRowIndex\", \"getVMRowIndex\", \"getColumnIndex\", \"getVTColumnIndex\", \"getVMColumnIndex\", \"createData\", \"createRow\", \"revertData\", \"clearData\", \"isInsertByRow\", \"isUpdateByRow\", \"getColumns\", \"getColumnById\", \"getColumnByField\", \"getTableColumn\", \"getData\", \"getCheckboxRecords\", \"getParentRow\", \"getRowSeq\", \"getRowById\", \"getRowid\", \"getTableData\", \"setColumnFixed\", \"clearColumnFixed\", \"setColumnWidth\", \"getColumnWidth\", \"hideColumn\", \"showColumn\", \"resetColumn\", \"refreshColumn\", \"refreshScroll\", \"recalculate\", \"closeTooltip\", \"isAllCheckboxChecked\", \"isAllCheckboxIndeterminate\", \"getCheckboxIndeterminateRecords\", \"setCheckboxRow\", \"isCheckedByCheckboxRow\", \"isIndeterminateByCheckboxRow\", \"toggleCheckboxRow\", \"setAllCheckboxRow\", \"getRadioReserveRecord\", \"clearRadioReserve\", \"getCheckboxReserveRecords\", \"clearCheckboxReserve\", \"toggleAllCheckboxRow\", \"clearCheckboxRow\", \"setCurrentRow\", \"isCheckedByRadioRow\", \"setRadioRow\", \"clearCurrentRow\", \"clearRadioRow\", \"getCurrentRecord\", \"getRadioRecord\", \"getCurrentColumn\", \"setCurrentColumn\", \"clearCurrentColumn\", \"setPendingRow\", \"togglePendingRow\", \"getPendingRecords\", \"clearPendingRow\", \"sort\", \"clearSort\", \"isSort\", \"getSortColumns\", \"closeFilter\", \"isFilter\", \"isActiveFilterByColumn\", \"isRowExpandLoaded\", \"clearRowExpandLoaded\", \"reloadRowExpand\", \"reloadRowExpand\", \"toggleRowExpand\", \"setAllRowExpand\", \"setRowExpand\", \"isExpandByRow\", \"isRowExpandByRow\", \"clearRowExpand\", \"clearRowExpandReserve\", \"getRowExpandRecords\", \"getTreeExpandRecords\", \"isTreeExpandLoaded\", \"clearTreeExpandLoaded\", \"reloadTreeExpand\", \"reloadTreeChilds\", \"toggleTreeExpand\", \"setAllTreeExpand\", \"setTreeExpand\", \"isTreeExpandByRow\", \"clearTreeExpand\", \"clearTreeExpandReserve\", \"getScroll\", \"scrollTo\", \"scrollToRow\", \"scrollToColumn\", \"clearScroll\", \"updateFooter\", \"updateStatus\", \"setMergeCells\", \"removeInsertRow\", \"removeMergeCells\", \"getMergeCells\", \"clearMergeCells\", \"setMergeFooterItems\", \"removeMergeFooterItems\", \"getMergeFooterItems\", \"clearMergeFooterItems\", \"openTooltip\", \"focus\", \"blur\", \"connect\"];\nvar gridComponentEmits = __spreadArray(__spreadArray([], tableComponentEmits, true), [\n  \"page-change\",\n  \"form-submit\",\n  \"form-submit-invalid\",\n  \"form-reset\",\n  \"form-collapse\",\n  \"form-toggle-collapse\",\n  \"proxy-query\",\n  \"proxy-delete\",\n  \"proxy-save\",\n  \"toolbar-button-click\",\n  \"toolbar-tool-click\",\n  \"zoom\"\n], false);\nexport default defineComponent({\n  name: \"VxeGrid\",\n  props: __assign(__assign({}, tableComponentProps), { layouts: Array, columns: Array, pagerConfig: Object, proxyConfig: Object, toolbarConfig: Object, formConfig: Object, zoomConfig: Object, size: { type: String, default: function() {\n    return GlobalConfig.grid.size || GlobalConfig.size;\n  } } }),\n  emits: gridComponentEmits,\n  setup: function(props, context) {\n    var slots = context.slots, emit = context.emit;\n    var xID = XEUtils.uniqueId();\n    var instance = getCurrentInstance();\n    var computeSize = useSize(props);\n    var reactData = reactive({\n      tableLoading: false,\n      proxyInited: false,\n      isZMax: false,\n      tableData: [],\n      filterData: [],\n      formData: {},\n      sortData: [],\n      tZindex: 0,\n      tablePage: {\n        total: 0,\n        pageSize: GlobalConfig.pager.pageSize || 10,\n        currentPage: 1\n      }\n    });\n    var refElem = ref();\n    var refTable = ref();\n    var refForm = ref();\n    var refToolbar = ref();\n    var refPager = ref();\n    var refFormWrapper = ref();\n    var refToolbarWrapper = ref();\n    var refTopWrapper = ref();\n    var refBottomWrapper = ref();\n    var refPagerWrapper = ref();\n    var extendTableMethods = function(methodKeys) {\n      var funcs = {};\n      methodKeys.forEach(function(name) {\n        funcs[name] = function() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          var $xetable = refTable.value;\n          if ($xetable && $xetable[name]) {\n            return $xetable[name].apply($xetable, args);\n          }\n        };\n      });\n      return funcs;\n    };\n    var gridExtendTableMethods = extendTableMethods(tableComponentMethodKeys);\n    tableComponentMethodKeys.forEach(function(name) {\n      gridExtendTableMethods[name] = function() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var $xetable = refTable.value;\n        if ($xetable && $xetable[name]) {\n          return $xetable && $xetable[name].apply($xetable, args);\n        }\n      };\n    });\n    var computeProxyOpts = computed(function() {\n      return Object.assign({}, GlobalConfig.grid.proxyConfig, props.proxyConfig);\n    });\n    var computeIsMsg = computed(function() {\n      var proxyOpts = computeProxyOpts.value;\n      return proxyOpts.message !== false;\n    });\n    var computePagerOpts = computed(function() {\n      return Object.assign({}, GlobalConfig.grid.pagerConfig, props.pagerConfig);\n    });\n    var computeFormOpts = computed(function() {\n      return Object.assign({}, GlobalConfig.grid.formConfig, props.formConfig);\n    });\n    var computeToolbarOpts = computed(function() {\n      return Object.assign({}, GlobalConfig.grid.toolbarConfig, props.toolbarConfig);\n    });\n    var computeZoomOpts = computed(function() {\n      return Object.assign({}, GlobalConfig.grid.zoomConfig, props.zoomConfig);\n    });\n    var computeStyles = computed(function() {\n      return reactData.isZMax ? { zIndex: reactData.tZindex } : null;\n    });\n    var computeTableExtendProps = computed(function() {\n      var rest = {};\n      var gridProps = props;\n      tableComponentPropKeys.forEach(function(key) {\n        rest[key] = gridProps[key];\n      });\n      return rest;\n    });\n    var refMaps = {\n      refElem,\n      refTable,\n      refForm,\n      refToolbar,\n      refPager\n    };\n    var computeMaps = {\n      computeProxyOpts,\n      computePagerOpts,\n      computeFormOpts,\n      computeToolbarOpts,\n      computeZoomOpts\n    };\n    var $xegrid = {\n      xID,\n      props,\n      context,\n      instance,\n      reactData,\n      getRefMaps: function() {\n        return refMaps;\n      },\n      getComputeMaps: function() {\n        return computeMaps;\n      }\n    };\n    var gridMethods = {};\n    var computeTableProps = computed(function() {\n      var seqConfig = props.seqConfig, pagerConfig = props.pagerConfig, loading = props.loading, editConfig = props.editConfig, proxyConfig = props.proxyConfig;\n      var isZMax = reactData.isZMax, tableLoading = reactData.tableLoading, tablePage = reactData.tablePage, tableData = reactData.tableData;\n      var tableExtendProps = computeTableExtendProps.value;\n      var proxyOpts = computeProxyOpts.value;\n      var pagerOpts = computePagerOpts.value;\n      var tableProps = Object.assign({}, tableExtendProps);\n      if (isZMax) {\n        if (tableExtendProps.maxHeight) {\n          tableProps.maxHeight = \"auto\";\n        } else {\n          tableProps.height = \"auto\";\n        }\n      }\n      if (proxyConfig && isEnableConf(proxyOpts)) {\n        tableProps.loading = loading || tableLoading;\n        tableProps.data = tableData;\n        if (pagerConfig && proxyOpts.seq && isEnableConf(pagerOpts)) {\n          tableProps.seqConfig = Object.assign({}, seqConfig, { startIndex: (tablePage.currentPage - 1) * tablePage.pageSize });\n        }\n      }\n      if (editConfig) {\n        tableProps.editConfig = Object.assign({}, editConfig);\n      }\n      return tableProps;\n    });\n    var initToolbar = function() {\n      var toolbarOpts = computeToolbarOpts.value;\n      if (props.toolbarConfig && isEnableConf(toolbarOpts)) {\n        nextTick(function() {\n          var $xetable = refTable.value;\n          var $xetoolbar = refToolbar.value;\n          if ($xetable && $xetoolbar) {\n            $xetable.connect($xetoolbar);\n          }\n        });\n      }\n    };\n    var initPages = function() {\n      var tablePage = reactData.tablePage;\n      var pagerConfig = props.pagerConfig;\n      var pagerOpts = computePagerOpts.value;\n      var currentPage = pagerOpts.currentPage, pageSize = pagerOpts.pageSize;\n      if (pagerConfig && isEnableConf(pagerOpts)) {\n        if (currentPage) {\n          tablePage.currentPage = currentPage;\n        }\n        if (pageSize) {\n          tablePage.pageSize = pageSize;\n        }\n      }\n    };\n    var triggerPendingEvent = function(code) {\n      var isMsg = computeIsMsg.value;\n      var $xetable = refTable.value;\n      var selectRecords = $xetable.getCheckboxRecords();\n      if (selectRecords.length) {\n        $xetable.togglePendingRow(selectRecords);\n        gridExtendTableMethods.clearCheckboxRow();\n      } else {\n        if (isMsg) {\n          if (false) {\n            if (!VXETable.modal) {\n              errLog(\"vxe.error.reqModule\", [\"Modal\"]);\n            }\n          }\n          VXETable.modal.message({ id: code, content: GlobalConfig.i18n(\"vxe.grid.selectOneRecord\"), status: \"warning\" });\n        }\n      }\n    };\n    var getRespMsg = function(rest, defaultMsg) {\n      var proxyOpts = computeProxyOpts.value;\n      var _a = proxyOpts.props, proxyProps = _a === void 0 ? {} : _a;\n      var msg;\n      if (rest && proxyProps.message) {\n        msg = XEUtils.get(rest, proxyProps.message);\n      }\n      return msg || GlobalConfig.i18n(defaultMsg);\n    };\n    var handleDeleteRow = function(code, alertKey, callback) {\n      var isMsg = computeIsMsg.value;\n      var selectRecords = gridExtendTableMethods.getCheckboxRecords();\n      if (isMsg) {\n        if (selectRecords.length) {\n          return VXETable.modal.confirm({ id: \"cfm_\".concat(code), content: GlobalConfig.i18n(alertKey), escClosable: true }).then(function(type) {\n            if (type === \"confirm\") {\n              return callback();\n            }\n          });\n        } else {\n          if (false) {\n            if (!VXETable.modal) {\n              errLog(\"vxe.error.reqModule\", [\"Modal\"]);\n            }\n          }\n          VXETable.modal.message({ id: \"msg_\".concat(code), content: GlobalConfig.i18n(\"vxe.grid.selectOneRecord\"), status: \"warning\" });\n        }\n      } else {\n        if (selectRecords.length) {\n          callback();\n        }\n      }\n      return Promise.resolve();\n    };\n    var pageChangeEvent = function(params) {\n      var proxyConfig = props.proxyConfig;\n      var tablePage = reactData.tablePage;\n      var currentPage = params.currentPage, pageSize = params.pageSize;\n      var proxyOpts = computeProxyOpts.value;\n      tablePage.currentPage = currentPage;\n      tablePage.pageSize = pageSize;\n      gridMethods.dispatchEvent(\"page-change\", params);\n      if (proxyConfig && isEnableConf(proxyOpts)) {\n        gridMethods.commitProxy(\"query\").then(function(rest) {\n          gridMethods.dispatchEvent(\"proxy-query\", rest, params.$event);\n        });\n      }\n    };\n    var sortChangeEvent = function(params) {\n      var $xetable = refTable.value;\n      var proxyConfig = props.proxyConfig;\n      var computeSortOpts = $xetable.getComputeMaps().computeSortOpts;\n      var proxyOpts = computeProxyOpts.value;\n      var sortOpts = computeSortOpts.value;\n      if (sortOpts.remote) {\n        reactData.sortData = params.sortList;\n        if (proxyConfig && isEnableConf(proxyOpts)) {\n          reactData.tablePage.currentPage = 1;\n          gridMethods.commitProxy(\"query\").then(function(rest) {\n            gridMethods.dispatchEvent(\"proxy-query\", rest, params.$event);\n          });\n        }\n      }\n      gridMethods.dispatchEvent(\"sort-change\", params);\n    };\n    var filterChangeEvent = function(params) {\n      var $xetable = refTable.value;\n      var proxyConfig = props.proxyConfig;\n      var computeFilterOpts = $xetable.getComputeMaps().computeFilterOpts;\n      var proxyOpts = computeProxyOpts.value;\n      var filterOpts = computeFilterOpts.value;\n      if (filterOpts.remote) {\n        reactData.filterData = params.filterList;\n        if (proxyConfig && isEnableConf(proxyOpts)) {\n          reactData.tablePage.currentPage = 1;\n          gridMethods.commitProxy(\"query\").then(function(rest) {\n            gridMethods.dispatchEvent(\"proxy-query\", rest, params.$event);\n          });\n        }\n      }\n      gridMethods.dispatchEvent(\"filter-change\", params);\n    };\n    var submitFormEvent = function(params) {\n      var proxyConfig = props.proxyConfig;\n      var proxyOpts = computeProxyOpts.value;\n      if (proxyConfig && isEnableConf(proxyOpts)) {\n        gridMethods.commitProxy(\"reload\").then(function(rest) {\n          gridMethods.dispatchEvent(\"proxy-query\", __assign(__assign({}, rest), { isReload: true }), params.$event);\n        });\n      }\n      gridMethods.dispatchEvent(\"form-submit\", params);\n    };\n    var resetFormEvent = function(params) {\n      var proxyConfig = props.proxyConfig;\n      var proxyOpts = computeProxyOpts.value;\n      if (proxyConfig && isEnableConf(proxyOpts)) {\n        gridMethods.commitProxy(\"reload\").then(function(rest) {\n          gridMethods.dispatchEvent(\"proxy-query\", __assign(__assign({}, rest), { isReload: true }), params.$event);\n        });\n      }\n      gridMethods.dispatchEvent(\"form-reset\", params);\n    };\n    var submitInvalidEvent = function(params) {\n      gridMethods.dispatchEvent(\"form-submit-invalid\", params);\n    };\n    var collapseEvent = function(params) {\n      nextTick(function() {\n        return gridExtendTableMethods.recalculate(true);\n      });\n      gridMethods.dispatchEvent(\"form-toggle-collapse\", params);\n      gridMethods.dispatchEvent(\"form-collapse\", params);\n    };\n    var handleZoom = function(isMax) {\n      var isZMax = reactData.isZMax;\n      if (isMax ? !isZMax : isZMax) {\n        reactData.isZMax = !isZMax;\n        if (reactData.tZindex < getLastZIndex()) {\n          reactData.tZindex = nextZIndex();\n        }\n      }\n      return nextTick().then(function() {\n        return gridExtendTableMethods.recalculate(true);\n      }).then(function() {\n        return reactData.isZMax;\n      });\n    };\n    var getFuncSlot = function(optSlots, slotKey) {\n      var funcSlot = optSlots[slotKey];\n      if (funcSlot) {\n        if (XEUtils.isString(funcSlot)) {\n          if (slots[funcSlot]) {\n            return slots[funcSlot];\n          } else {\n            if (false) {\n              errLog(\"vxe.error.notSlot\", [funcSlot]);\n            }\n          }\n        } else {\n          return funcSlot;\n        }\n      }\n      return null;\n    };\n    var renderForms = function() {\n      var formConfig = props.formConfig, proxyConfig = props.proxyConfig;\n      var formData = reactData.formData;\n      var proxyOpts = computeProxyOpts.value;\n      var formOpts = computeFormOpts.value;\n      var restVNs = [];\n      if (formConfig && isEnableConf(formOpts) || slots.form) {\n        var slotVNs = [];\n        if (slots.form) {\n          slotVNs = slots.form({ $grid: $xegrid });\n        } else {\n          if (formOpts.items) {\n            var formSlots_1 = {};\n            if (!formOpts.inited) {\n              formOpts.inited = true;\n              var beforeItem_1 = proxyOpts.beforeItem;\n              if (proxyOpts && beforeItem_1) {\n                formOpts.items.forEach(function(item) {\n                  beforeItem_1({ $grid: $xegrid, item });\n                });\n              }\n            }\n            formOpts.items.forEach(function(item) {\n              XEUtils.each(item.slots, function(func) {\n                if (!XEUtils.isFunction(func)) {\n                  if (slots[func]) {\n                    formSlots_1[func] = slots[func];\n                  }\n                }\n              });\n            });\n            slotVNs.push(h(resolveComponent(\"vxe-form\"), __assign(__assign({ ref: refForm }, Object.assign({}, formOpts, {\n              data: proxyConfig && isEnableConf(proxyOpts) && proxyOpts.form ? formData : formOpts.data\n            })), { onSubmit: submitFormEvent, onReset: resetFormEvent, onSubmitInvalid: submitInvalidEvent, onCollapse: collapseEvent }), formSlots_1));\n          }\n        }\n        restVNs.push(h(\"div\", {\n          ref: refFormWrapper,\n          key: \"form\",\n          class: \"vxe-grid--form-wrapper\"\n        }, slotVNs));\n      }\n      return restVNs;\n    };\n    var renderToolbars = function() {\n      var toolbarConfig = props.toolbarConfig;\n      var toolbarOpts = computeToolbarOpts.value;\n      var restVNs = [];\n      if (toolbarConfig && isEnableConf(toolbarOpts) || slots.toolbar) {\n        var slotVNs = [];\n        if (slots.toolbar) {\n          slotVNs = slots.toolbar({ $grid: $xegrid });\n        } else {\n          var toolbarOptSlots = toolbarOpts.slots;\n          var buttonsSlot = void 0;\n          var toolsSlot = void 0;\n          var toolbarSlots = {};\n          if (toolbarOptSlots) {\n            buttonsSlot = getFuncSlot(toolbarOptSlots, \"buttons\");\n            toolsSlot = getFuncSlot(toolbarOptSlots, \"tools\");\n            if (buttonsSlot) {\n              toolbarSlots.buttons = buttonsSlot;\n            }\n            if (toolsSlot) {\n              toolbarSlots.tools = toolsSlot;\n            }\n          }\n          slotVNs.push(h(resolveComponent(\"vxe-toolbar\"), __assign({ ref: refToolbar }, toolbarOpts), toolbarSlots));\n        }\n        restVNs.push(h(\"div\", {\n          ref: refToolbarWrapper,\n          key: \"toolbar\",\n          class: \"vxe-grid--toolbar-wrapper\"\n        }, slotVNs));\n      }\n      return restVNs;\n    };\n    var renderTops = function() {\n      if (slots.top) {\n        return [\n          h(\"div\", {\n            ref: refTopWrapper,\n            key: \"top\",\n            class: \"vxe-grid--top-wrapper\"\n          }, slots.top({ $grid: $xegrid }))\n        ];\n      }\n      return [];\n    };\n    var defaultLayouts = [\"Form\", \"Toolbar\", \"Top\", \"Table\", \"Bottom\", \"Pager\"];\n    var renderLayout = function() {\n      var layouts = props.layouts;\n      var vns = [];\n      var currLayouts = layouts && layouts.length ? layouts : GlobalConfig.grid.layouts || defaultLayouts;\n      currLayouts.forEach(function(name) {\n        switch (name) {\n          case \"Form\":\n            vns.push(renderForms());\n            break;\n          case \"Toolbar\":\n            vns.push(renderToolbars());\n            break;\n          case \"Top\":\n            vns.push(renderTops());\n            break;\n          case \"Table\":\n            vns.push(renderTables());\n            break;\n          case \"Bottom\":\n            vns.push(renderBottoms());\n            break;\n          case \"Pager\":\n            vns.push(renderPagers());\n            break;\n          default:\n            if (false) {\n              errLog(\"vxe.error.notProp\", [\"layouts -> \".concat(name)]);\n            }\n            break;\n        }\n      });\n      return vns;\n    };\n    var tableCompEvents = {};\n    tableComponentEmits.forEach(function(name) {\n      var type = XEUtils.camelCase(\"on-\".concat(name));\n      tableCompEvents[type] = function() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        return emit.apply(void 0, __spreadArray([name], args, false));\n      };\n    });\n    var renderTables = function() {\n      var proxyConfig = props.proxyConfig;\n      var tableProps = computeTableProps.value;\n      var proxyOpts = computeProxyOpts.value;\n      var tableOns = Object.assign({}, tableCompEvents);\n      var emptySlot = slots.empty;\n      var loadingSlot = slots.loading;\n      if (proxyConfig && isEnableConf(proxyOpts)) {\n        if (proxyOpts.sort) {\n          tableOns.onSortChange = sortChangeEvent;\n        }\n        if (proxyOpts.filter) {\n          tableOns.onFilterChange = filterChangeEvent;\n        }\n      }\n      var slotObj = {};\n      if (emptySlot) {\n        slotObj.empty = function() {\n          return emptySlot({});\n        };\n      }\n      if (loadingSlot) {\n        slotObj.loading = function() {\n          return loadingSlot({});\n        };\n      }\n      return [\n        h(resolveComponent(\"vxe-table\"), __assign(__assign({ ref: refTable, key: \"table\" }, tableProps), tableOns), slotObj)\n      ];\n    };\n    var renderBottoms = function() {\n      if (slots.bottom) {\n        return [\n          h(\"div\", {\n            ref: refBottomWrapper,\n            key: \"bottom\",\n            class: \"vxe-grid--bottom-wrapper\"\n          }, slots.bottom({ $grid: $xegrid }))\n        ];\n      }\n      return [];\n    };\n    var renderPagers = function() {\n      var proxyConfig = props.proxyConfig, pagerConfig = props.pagerConfig;\n      var proxyOpts = computeProxyOpts.value;\n      var pagerOpts = computePagerOpts.value;\n      var restVNs = [];\n      if (pagerConfig && isEnableConf(pagerOpts) || slots.pager) {\n        var slotVNs = [];\n        if (slots.pager) {\n          slotVNs = slots.pager({ $grid: $xegrid });\n        } else {\n          var pagerOptSlots = pagerOpts.slots;\n          var pagerSlots = {};\n          var leftSlot = void 0;\n          var rightSlot = void 0;\n          if (pagerOptSlots) {\n            leftSlot = getFuncSlot(pagerOptSlots, \"left\");\n            rightSlot = getFuncSlot(pagerOptSlots, \"right\");\n            if (leftSlot) {\n              pagerSlots.left = leftSlot;\n            }\n            if (rightSlot) {\n              pagerSlots.right = rightSlot;\n            }\n          }\n          slotVNs.push(h(resolveComponent(\"vxe-pager\"), __assign(__assign(__assign({ ref: refPager }, pagerOpts), proxyConfig && isEnableConf(proxyOpts) ? reactData.tablePage : {}), { onPageChange: pageChangeEvent }), pagerSlots));\n        }\n        restVNs.push(h(\"div\", {\n          ref: refPagerWrapper,\n          key: \"pager\",\n          class: \"vxe-grid--pager-wrapper\"\n        }, slotVNs));\n      }\n      return restVNs;\n    };\n    var initProxy = function() {\n      var proxyConfig = props.proxyConfig, formConfig = props.formConfig;\n      var proxyInited = reactData.proxyInited;\n      var proxyOpts = computeProxyOpts.value;\n      var formOpts = computeFormOpts.value;\n      if (proxyConfig && isEnableConf(proxyOpts)) {\n        if (formConfig && isEnableConf(formOpts) && proxyOpts.form && formOpts.items) {\n          var formData_1 = {};\n          formOpts.items.forEach(function(item) {\n            var field = item.field, itemRender = item.itemRender;\n            if (field) {\n              var itemValue = null;\n              if (itemRender) {\n                var defaultValue = itemRender.defaultValue;\n                if (XEUtils.isFunction(defaultValue)) {\n                  itemValue = defaultValue({ item });\n                } else if (!XEUtils.isUndefined(defaultValue)) {\n                  itemValue = defaultValue;\n                }\n              }\n              formData_1[field] = itemValue;\n            }\n          });\n          reactData.formData = formData_1;\n        }\n        if (!proxyInited) {\n          reactData.proxyInited = true;\n          if (proxyOpts.autoLoad !== false) {\n            nextTick().then(function() {\n              return gridMethods.commitProxy(\"_init\");\n            }).then(function(rest) {\n              gridMethods.dispatchEvent(\"proxy-query\", __assign(__assign({}, rest), { isInited: true }), new Event(\"init\"));\n            });\n          }\n        }\n      }\n    };\n    gridMethods = {\n      dispatchEvent: function(type, params, evnt) {\n        emit(type, Object.assign({ $grid: $xegrid, $event: evnt }, params));\n      },\n      /**\n       * 提交指令，支持 code 或 button\n       * @param {String/Object} code 字符串或对象\n       */\n      commitProxy: function(proxyTarget) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n          args[_i - 1] = arguments[_i];\n        }\n        var toolbarConfig = props.toolbarConfig, pagerConfig = props.pagerConfig, editRules = props.editRules;\n        var tablePage = reactData.tablePage, formData = reactData.formData;\n        var isMsg = computeIsMsg.value;\n        var proxyOpts = computeProxyOpts.value;\n        var pagerOpts = computePagerOpts.value;\n        var toolbarOpts = computeToolbarOpts.value;\n        var beforeQuery = proxyOpts.beforeQuery, afterQuery = proxyOpts.afterQuery, beforeDelete = proxyOpts.beforeDelete, afterDelete = proxyOpts.afterDelete, beforeSave = proxyOpts.beforeSave, afterSave = proxyOpts.afterSave, _a = proxyOpts.ajax, ajax = _a === void 0 ? {} : _a, _b = proxyOpts.props, proxyProps = _b === void 0 ? {} : _b;\n        var $xetable = refTable.value;\n        var button = null;\n        var code = null;\n        if (XEUtils.isString(proxyTarget)) {\n          var buttons = toolbarOpts.buttons;\n          var matchObj = toolbarConfig && isEnableConf(toolbarOpts) && buttons ? XEUtils.findTree(buttons, function(item) {\n            return item.code === proxyTarget;\n          }, { children: \"dropdowns\" }) : null;\n          button = matchObj ? matchObj.item : null;\n          code = proxyTarget;\n        } else {\n          button = proxyTarget;\n          code = button.code;\n        }\n        var btnParams = button ? button.params : null;\n        switch (code) {\n          case \"insert\":\n            return $xetable.insert({});\n          case \"insert_edit\":\n            return $xetable.insert({}).then(function(_a2) {\n              var row = _a2.row;\n              return $xetable.setEditRow(row);\n            });\n          case \"insert_actived\":\n            return $xetable.insert({}).then(function(_a2) {\n              var row = _a2.row;\n              return $xetable.setEditRow(row);\n            });\n          case \"mark_cancel\":\n            triggerPendingEvent(code);\n            break;\n          case \"remove\":\n            return handleDeleteRow(code, \"vxe.grid.removeSelectRecord\", function() {\n              return $xetable.removeCheckboxRow();\n            });\n          case \"import\":\n            $xetable.importData(btnParams);\n            break;\n          case \"open_import\":\n            $xetable.openImport(btnParams);\n            break;\n          case \"export\":\n            $xetable.exportData(btnParams);\n            break;\n          case \"open_export\":\n            $xetable.openExport(btnParams);\n            break;\n          case \"reset_custom\":\n            return $xetable.resetColumn(true);\n          case \"_init\":\n          case \"reload\":\n          case \"query\": {\n            var ajaxMethods = ajax.query;\n            if (ajaxMethods) {\n              var isInited = code === \"_init\";\n              var isReload = code === \"reload\";\n              var sortList = [];\n              var filterList = [];\n              var pageParams = {};\n              if (pagerConfig) {\n                if (isInited || isReload) {\n                  tablePage.currentPage = 1;\n                }\n                if (isEnableConf(pagerOpts)) {\n                  pageParams = __assign({}, tablePage);\n                }\n              }\n              if (isInited) {\n                var computeSortOpts = $xetable.getComputeMaps().computeSortOpts;\n                var sortOpts = computeSortOpts.value;\n                var defaultSort = sortOpts.defaultSort;\n                if (defaultSort) {\n                  if (!XEUtils.isArray(defaultSort)) {\n                    defaultSort = [defaultSort];\n                  }\n                  sortList = defaultSort.map(function(item) {\n                    return {\n                      field: item.field,\n                      property: item.field,\n                      order: item.order\n                    };\n                  });\n                }\n                filterList = $xetable.getCheckedFilters();\n              } else {\n                if (isReload) {\n                  $xetable.clearAll();\n                } else {\n                  sortList = $xetable.getSortColumns();\n                  filterList = $xetable.getCheckedFilters();\n                }\n              }\n              var commitParams = {\n                code,\n                button,\n                isInited,\n                isReload,\n                $grid: $xegrid,\n                page: pageParams,\n                sort: sortList.length ? sortList[0] : {},\n                sorts: sortList,\n                filters: filterList,\n                form: formData,\n                options: ajaxMethods\n              };\n              reactData.sortData = sortList;\n              reactData.filterData = filterList;\n              reactData.tableLoading = true;\n              var applyArgs_1 = [commitParams].concat(args);\n              return Promise.resolve((beforeQuery || ajaxMethods).apply(void 0, applyArgs_1)).then(function(rest) {\n                reactData.tableLoading = false;\n                if (rest) {\n                  if (pagerConfig && isEnableConf(pagerOpts)) {\n                    var total = XEUtils.get(rest, proxyProps.total || \"page.total\") || 0;\n                    tablePage.total = XEUtils.toNumber(total);\n                    reactData.tableData = XEUtils.get(rest, proxyProps.result || \"result\") || [];\n                    var pageCount = Math.max(Math.ceil(total / tablePage.pageSize), 1);\n                    if (tablePage.currentPage > pageCount) {\n                      tablePage.currentPage = pageCount;\n                    }\n                  } else {\n                    reactData.tableData = (proxyProps.list ? XEUtils.get(rest, proxyProps.list) : rest) || [];\n                  }\n                } else {\n                  reactData.tableData = [];\n                }\n                if (afterQuery) {\n                  afterQuery.apply(void 0, applyArgs_1);\n                }\n                return { status: true };\n              }).catch(function() {\n                reactData.tableLoading = false;\n                return { status: false };\n              });\n            } else {\n              if (false) {\n                errLog(\"vxe.error.notFunc\", [\"proxy-config.ajax.query\"]);\n              }\n            }\n            break;\n          }\n          case \"delete\": {\n            var ajaxMethods_1 = ajax.delete;\n            if (ajaxMethods_1) {\n              var selectRecords_1 = gridExtendTableMethods.getCheckboxRecords();\n              var removeRecords_1 = selectRecords_1.filter(function(row) {\n                return !$xetable.isInsertByRow(row);\n              });\n              var body = { removeRecords: removeRecords_1 };\n              var commitParams = { $grid: $xegrid, code, button, body, form: formData, options: ajaxMethods_1 };\n              var applyArgs_2 = [commitParams].concat(args);\n              if (selectRecords_1.length) {\n                return handleDeleteRow(code, \"vxe.grid.deleteSelectRecord\", function() {\n                  if (!removeRecords_1.length) {\n                    return $xetable.remove(selectRecords_1);\n                  }\n                  reactData.tableLoading = true;\n                  return Promise.resolve((beforeDelete || ajaxMethods_1).apply(void 0, applyArgs_2)).then(function(rest) {\n                    reactData.tableLoading = false;\n                    $xetable.setPendingRow(removeRecords_1, false);\n                    if (isMsg) {\n                      if (false) {\n                        if (!VXETable.modal) {\n                          errLog(\"vxe.error.reqModule\", [\"Modal\"]);\n                        }\n                      }\n                      VXETable.modal.message({ content: getRespMsg(rest, \"vxe.grid.delSuccess\"), status: \"success\" });\n                    }\n                    if (afterDelete) {\n                      afterDelete.apply(void 0, applyArgs_2);\n                    } else {\n                      gridMethods.commitProxy(\"query\");\n                    }\n                    return { status: true };\n                  }).catch(function(rest) {\n                    reactData.tableLoading = false;\n                    if (isMsg) {\n                      if (false) {\n                        if (!VXETable.modal.message) {\n                          errLog(\"vxe.error.reqModule\", [\"Modal\"]);\n                        }\n                      }\n                      VXETable.modal.message({ id: code, content: getRespMsg(rest, \"vxe.grid.operError\"), status: \"error\" });\n                    }\n                    return { status: false };\n                  });\n                });\n              } else {\n                if (isMsg) {\n                  if (false) {\n                    if (!VXETable.modal) {\n                      errLog(\"vxe.error.reqModule\", [\"Modal\"]);\n                    }\n                  }\n                  VXETable.modal.message({ id: code, content: GlobalConfig.i18n(\"vxe.grid.selectOneRecord\"), status: \"warning\" });\n                }\n              }\n            } else {\n              if (false) {\n                errLog(\"vxe.error.notFunc\", [\"proxy-config.ajax.delete\"]);\n              }\n            }\n            break;\n          }\n          case \"save\": {\n            var ajaxMethods_2 = ajax.save;\n            if (ajaxMethods_2) {\n              var body_1 = $xetable.getRecordset();\n              var insertRecords_1 = body_1.insertRecords, removeRecords_2 = body_1.removeRecords, updateRecords_1 = body_1.updateRecords, pendingRecords_1 = body_1.pendingRecords;\n              var commitParams = { $grid: $xegrid, code, button, body: body_1, form: formData, options: ajaxMethods_2 };\n              var applyArgs_3 = [commitParams].concat(args);\n              if (insertRecords_1.length) {\n                body_1.pendingRecords = pendingRecords_1.filter(function(row) {\n                  return $xetable.findRowIndexOf(insertRecords_1, row) === -1;\n                });\n              }\n              if (pendingRecords_1.length) {\n                body_1.insertRecords = insertRecords_1.filter(function(row) {\n                  return $xetable.findRowIndexOf(pendingRecords_1, row) === -1;\n                });\n              }\n              var restPromise = Promise.resolve();\n              if (editRules) {\n                restPromise = $xetable.validate(body_1.insertRecords.concat(updateRecords_1));\n              }\n              return restPromise.then(function(errMap) {\n                if (errMap) {\n                  return;\n                }\n                if (body_1.insertRecords.length || removeRecords_2.length || updateRecords_1.length || body_1.pendingRecords.length) {\n                  reactData.tableLoading = true;\n                  return Promise.resolve((beforeSave || ajaxMethods_2).apply(void 0, applyArgs_3)).then(function(rest) {\n                    reactData.tableLoading = false;\n                    $xetable.clearPendingRow();\n                    if (isMsg) {\n                      if (false) {\n                        if (!VXETable.modal) {\n                          errLog(\"vxe.error.reqModule\", [\"Modal\"]);\n                        }\n                      }\n                      VXETable.modal.message({ content: getRespMsg(rest, \"vxe.grid.saveSuccess\"), status: \"success\" });\n                    }\n                    if (afterSave) {\n                      afterSave.apply(void 0, applyArgs_3);\n                    } else {\n                      gridMethods.commitProxy(\"query\");\n                    }\n                    return { status: true };\n                  }).catch(function(rest) {\n                    reactData.tableLoading = false;\n                    if (isMsg) {\n                      if (false) {\n                        if (!VXETable.modal) {\n                          errLog(\"vxe.error.reqModule\", [\"Modal\"]);\n                        }\n                      }\n                      VXETable.modal.message({ id: code, content: getRespMsg(rest, \"vxe.grid.operError\"), status: \"error\" });\n                    }\n                    return { status: false };\n                  });\n                } else {\n                  if (isMsg) {\n                    if (false) {\n                      if (!VXETable.modal) {\n                        errLog(\"vxe.error.reqModule\", [\"Modal\"]);\n                      }\n                    }\n                    VXETable.modal.message({ id: code, content: GlobalConfig.i18n(\"vxe.grid.dataUnchanged\"), status: \"info\" });\n                  }\n                }\n              });\n            } else {\n              if (false) {\n                errLog(\"vxe.error.notFunc\", [\"proxy-config.ajax.save\"]);\n              }\n            }\n            break;\n          }\n          default: {\n            var gCommandOpts = VXETable.commands.get(code);\n            if (gCommandOpts) {\n              if (gCommandOpts.commandMethod) {\n                gCommandOpts.commandMethod.apply(gCommandOpts, __spreadArray([{ code, button, $grid: $xegrid, $table: $xetable }], args, false));\n              } else {\n                if (false) {\n                  errLog(\"vxe.error.notCommands\", [code]);\n                }\n              }\n            }\n          }\n        }\n        return nextTick();\n      },\n      zoom: function() {\n        if (reactData.isZMax) {\n          return gridMethods.revert();\n        }\n        return gridMethods.maximize();\n      },\n      isMaximized: function() {\n        return reactData.isZMax;\n      },\n      maximize: function() {\n        return handleZoom(true);\n      },\n      revert: function() {\n        return handleZoom();\n      },\n      getFormItems: function(itemIndex) {\n        var formOpts = computeFormOpts.value;\n        var formConfig = props.formConfig;\n        var items = formOpts.items;\n        var itemList = [];\n        XEUtils.eachTree(formConfig && isEnableConf(formOpts) && items ? items : [], function(item) {\n          itemList.push(item);\n        }, { children: \"children\" });\n        return XEUtils.isUndefined(itemIndex) ? itemList : itemList[itemIndex];\n      },\n      getProxyInfo: function() {\n        var $xetable = refTable.value;\n        if (props.proxyConfig) {\n          var sortData = reactData.sortData;\n          return {\n            data: reactData.tableData,\n            filter: reactData.filterData,\n            form: reactData.formData,\n            sort: sortData.length ? sortData[0] : {},\n            sorts: sortData,\n            pager: reactData.tablePage,\n            pendingRecords: $xetable ? $xetable.getPendingRecords() : []\n          };\n        }\n        return null;\n      }\n      // setProxyInfo (options) {\n      //   if (props.proxyConfig && options) {\n      //     const { pager, form } = options\n      //     const proxyOpts = computeProxyOpts.value\n      //     if (pager) {\n      //       if (pager.currentPage) {\n      //         reactData.tablePage.currentPage = Number(pager.currentPage)\n      //       }\n      //       if (pager.pageSize) {\n      //         reactData.tablePage.pageSize = Number(pager.pageSize)\n      //       }\n      //     }\n      //     if (proxyOpts.form && form) {\n      //       Object.assign(reactData.formData, form)\n      //     }\n      //   }\n      //   return nextTick()\n      // }\n    };\n    if (false) {\n      gridMethods.loadColumn = function(columns) {\n        var $xetable = refTable.value;\n        XEUtils.eachTree(columns, function(column) {\n          if (column.slots) {\n            XEUtils.each(column.slots, function(func) {\n              if (!XEUtils.isFunction(func)) {\n                if (!slots[func]) {\n                  errLog(\"vxe.error.notSlot\", [func]);\n                }\n              }\n            });\n          }\n        });\n        return $xetable.loadColumn(columns);\n      };\n      gridMethods.reloadColumn = function(columns) {\n        gridExtendTableMethods.clearAll();\n        return gridMethods.loadColumn(columns);\n      };\n    }\n    var gridPrivateMethods = {\n      extendTableMethods,\n      callSlot: function(slotFunc, params) {\n        if (slotFunc) {\n          if (XEUtils.isString(slotFunc)) {\n            slotFunc = slots[slotFunc] || null;\n          }\n          if (XEUtils.isFunction(slotFunc)) {\n            return getSlotVNs(slotFunc(params));\n          }\n        }\n        return [];\n      },\n      /**\n       * 获取需要排除的高度\n       */\n      getExcludeHeight: function() {\n        var height = props.height;\n        var isZMax = reactData.isZMax;\n        var el = refElem.value;\n        var formWrapper = refFormWrapper.value;\n        var toolbarWrapper = refToolbarWrapper.value;\n        var topWrapper = refTopWrapper.value;\n        var bottomWrapper = refBottomWrapper.value;\n        var pagerWrapper = refPagerWrapper.value;\n        var parentPaddingSize = isZMax || height !== \"auto\" ? 0 : getPaddingTopBottomSize(el.parentNode);\n        return parentPaddingSize + getPaddingTopBottomSize(el) + getOffsetHeight(formWrapper) + getOffsetHeight(toolbarWrapper) + getOffsetHeight(topWrapper) + getOffsetHeight(bottomWrapper) + getOffsetHeight(pagerWrapper);\n      },\n      getParentHeight: function() {\n        var el = refElem.value;\n        if (el) {\n          return (reactData.isZMax ? getDomNode().visibleHeight : XEUtils.toNumber(getComputedStyle(el.parentNode).height)) - gridPrivateMethods.getExcludeHeight();\n        }\n        return 0;\n      },\n      triggerToolbarCommitEvent: function(params, evnt) {\n        var code = params.code;\n        return gridMethods.commitProxy(params, evnt).then(function(rest) {\n          if (code && rest && rest.status && [\"query\", \"reload\", \"delete\", \"save\"].includes(code)) {\n            gridMethods.dispatchEvent(code === \"delete\" || code === \"save\" ? \"proxy-\".concat(code) : \"proxy-query\", __assign(__assign({}, rest), { isReload: code === \"reload\" }), evnt);\n          }\n        });\n      },\n      triggerToolbarBtnEvent: function(button, evnt) {\n        gridPrivateMethods.triggerToolbarCommitEvent(button, evnt);\n        gridMethods.dispatchEvent(\"toolbar-button-click\", { code: button.code, button }, evnt);\n      },\n      triggerToolbarTolEvent: function(tool, evnt) {\n        gridPrivateMethods.triggerToolbarCommitEvent(tool, evnt);\n        gridMethods.dispatchEvent(\"toolbar-tool-click\", { code: tool.code, tool, $event: evnt });\n      },\n      triggerZoomEvent: function(evnt) {\n        gridMethods.zoom();\n        gridMethods.dispatchEvent(\"zoom\", { type: reactData.isZMax ? \"max\" : \"revert\" }, evnt);\n      }\n    };\n    Object.assign($xegrid, gridExtendTableMethods, gridMethods, gridPrivateMethods);\n    var columnFlag = ref(0);\n    watch(function() {\n      return props.columns ? props.columns.length : -1;\n    }, function() {\n      columnFlag.value++;\n    });\n    watch(function() {\n      return props.columns;\n    }, function() {\n      columnFlag.value++;\n    });\n    watch(columnFlag, function() {\n      nextTick(function() {\n        return $xegrid.loadColumn(props.columns || []);\n      });\n    });\n    watch(function() {\n      return props.toolbarConfig;\n    }, function() {\n      initToolbar();\n    });\n    watch(function() {\n      return props.pagerConfig;\n    }, function() {\n      initPages();\n    });\n    watch(function() {\n      return props.proxyConfig;\n    }, function() {\n      initProxy();\n    });\n    var handleGlobalKeydownEvent = function(evnt) {\n      var zoomOpts = computeZoomOpts.value;\n      var isEsc = hasEventKey(evnt, EVENT_KEYS.ESCAPE);\n      if (isEsc && reactData.isZMax && zoomOpts.escRestore !== false) {\n        gridPrivateMethods.triggerZoomEvent(evnt);\n      }\n    };\n    VXETable.hooks.forEach(function(options) {\n      var setupGrid = options.setupGrid;\n      if (setupGrid) {\n        var hookRest = setupGrid($xegrid);\n        if (hookRest && XEUtils.isObject(hookRest)) {\n          Object.assign($xegrid, hookRest);\n        }\n      }\n    });\n    initPages();\n    onMounted(function() {\n      nextTick(function() {\n        var data = props.data, columns = props.columns, proxyConfig = props.proxyConfig;\n        var proxyOpts = computeProxyOpts.value;\n        var formOpts = computeFormOpts.value;\n        if (isEnableConf(proxyConfig) && (data || proxyOpts.form && formOpts.data)) {\n          errLog(\"vxe.error.errConflicts\", [\"grid.data\", \"grid.proxy-config\"]);\n        }\n        if (columns && columns.length) {\n          $xegrid.loadColumn(columns);\n        }\n        initToolbar();\n      });\n      GlobalEvent.on($xegrid, \"keydown\", handleGlobalKeydownEvent);\n    });\n    onUnmounted(function() {\n      GlobalEvent.off($xegrid, \"keydown\");\n    });\n    nextTick(function() {\n      initProxy();\n    });\n    var renderVN = function() {\n      var _a;\n      var vSize = computeSize.value;\n      var styles = computeStyles.value;\n      return h(\"div\", {\n        ref: refElem,\n        class: [\"vxe-grid\", (_a = {}, _a[\"size--\".concat(vSize)] = vSize, _a[\"is--animat\"] = !!props.animat, _a[\"is--round\"] = props.round, _a[\"is--maximize\"] = reactData.isZMax, _a[\"is--loading\"] = props.loading || reactData.tableLoading, _a)],\n        style: styles\n      }, renderLayout());\n    };\n    $xegrid.renderVN = renderVN;\n    provide(\"$xegrid\", $xegrid);\n    return $xegrid;\n  },\n  render: function() {\n    return this.renderVN();\n  }\n});\n",
      "start": 1714699767777,
      "end": 1714699768490,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1714699768490,
      "end": 1714699768490,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768490,
      "end": 1714699768490,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768490,
      "end": 1714699768490,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768490,
      "end": 1714699768490,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768490,
      "end": 1714699768492,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768492,
      "end": 1714699768492,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768492,
      "end": 1714699768492,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768492,
      "end": 1714699768492,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768492,
      "end": 1714699768492,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768492,
      "end": 1714699768492,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768492,
      "end": 1714699768492,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768492,
      "end": 1714699768492,
      "order": "normal"
    }
  ]
}

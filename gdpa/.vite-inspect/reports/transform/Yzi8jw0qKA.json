{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/filter/src/hook.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VXETable } from '../../v-x-e-table';\nimport { toFilters, handleFieldOrColumn } from '../../table/src/util';\nimport { getDomNode, triggerEvent } from '../../tools/dom';\nvar tableFilterMethodKeys = ['setFilter', 'clearFilter', 'getCheckedFilters'];\nvar tableFilterHook = {\n    setupTable: function ($xetable) {\n        var props = $xetable.props, reactData = $xetable.reactData, internalData = $xetable.internalData;\n        var _a = $xetable.getRefMaps(), refTableBody = _a.refTableBody, refTableFilter = _a.refTableFilter;\n        var _b = $xetable.getComputeMaps(), computeFilterOpts = _b.computeFilterOpts, computeMouseOpts = _b.computeMouseOpts;\n        var filterPrivateMethods = {\n            checkFilterOptions: function () {\n                var filterStore = reactData.filterStore;\n                filterStore.isAllSelected = filterStore.options.every(function (item) { return item._checked; });\n                filterStore.isIndeterminate = !filterStore.isAllSelected && filterStore.options.some(function (item) { return item._checked; });\n            },\n            /**\n             * 点击筛选事件\n             * 当筛选图标被点击时触发\n             * 更新选项是否全部状态\n             * 打开筛选面板\n             * @param {Event} evnt 事件\n             * @param {ColumnInfo} column 列配置\n             * @param {Object} params 参数\n             */\n            triggerFilterEvent: function (evnt, column, params) {\n                var initStore = reactData.initStore, filterStore = reactData.filterStore;\n                if (filterStore.column === column && filterStore.visible) {\n                    filterStore.visible = false;\n                }\n                else {\n                    var targetElem_1 = evnt.target, pageX_1 = evnt.pageX;\n                    var visibleWidth_1 = getDomNode().visibleWidth;\n                    var filters = column.filters, filterMultiple = column.filterMultiple, filterRender = column.filterRender;\n                    var compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n                    var filterRecoverMethod_1 = column.filterRecoverMethod || (compConf ? compConf.filterRecoverMethod : null);\n                    internalData._currFilterParams = params;\n                    Object.assign(filterStore, {\n                        multiple: filterMultiple,\n                        options: filters,\n                        column: column,\n                        style: null\n                    });\n                    // 复原状态\n                    filterStore.options.forEach(function (option) {\n                        var _checked = option._checked, checked = option.checked;\n                        option._checked = checked;\n                        if (!checked && _checked !== checked) {\n                            if (filterRecoverMethod_1) {\n                                filterRecoverMethod_1({ option: option, column: column, $table: $xetable });\n                            }\n                        }\n                    });\n                    this.checkFilterOptions();\n                    filterStore.visible = true;\n                    initStore.filter = true;\n                    nextTick(function () {\n                        var tableBody = refTableBody.value;\n                        var bodyElem = tableBody.$el;\n                        var tableFilter = refTableFilter.value;\n                        var filterWrapperElem = tableFilter ? tableFilter.$el : null;\n                        var filterWidth = 0;\n                        var filterHeight = 0;\n                        var filterHeadElem = null;\n                        var filterFootElem = null;\n                        if (filterWrapperElem) {\n                            filterWidth = filterWrapperElem.offsetWidth;\n                            filterHeight = filterWrapperElem.offsetHeight;\n                            filterHeadElem = filterWrapperElem.querySelector('.vxe-table--filter-header');\n                            filterFootElem = filterWrapperElem.querySelector('.vxe-table--filter-footer');\n                        }\n                        var centerWidth = filterWidth / 2;\n                        var minMargin = 10;\n                        var maxLeft = bodyElem.clientWidth - filterWidth - minMargin;\n                        var left, right;\n                        var style = {\n                            top: \"\".concat(targetElem_1.offsetTop + targetElem_1.offsetParent.offsetTop + targetElem_1.offsetHeight + 8, \"px\")\n                        };\n                        // 判断面板不能大于表格高度\n                        var maxHeight = null;\n                        if (filterHeight >= bodyElem.clientHeight) {\n                            maxHeight = Math.max(60, bodyElem.clientHeight - (filterFootElem ? filterFootElem.offsetHeight : 0) - (filterHeadElem ? filterHeadElem.offsetHeight : 0));\n                        }\n                        if (column.fixed === 'left') {\n                            left = targetElem_1.offsetLeft + targetElem_1.offsetParent.offsetLeft - centerWidth;\n                        }\n                        else if (column.fixed === 'right') {\n                            right = (targetElem_1.offsetParent.offsetWidth - targetElem_1.offsetLeft) + (targetElem_1.offsetParent.offsetParent.offsetWidth - targetElem_1.offsetParent.offsetLeft) - column.renderWidth - centerWidth;\n                        }\n                        else {\n                            left = targetElem_1.offsetLeft + targetElem_1.offsetParent.offsetLeft - centerWidth - bodyElem.scrollLeft;\n                        }\n                        if (left) {\n                            var overflowWidth = (pageX_1 + filterWidth - centerWidth + minMargin) - visibleWidth_1;\n                            if (overflowWidth > 0) {\n                                left -= overflowWidth;\n                            }\n                            style.left = \"\".concat(Math.min(maxLeft, Math.max(minMargin, left)), \"px\");\n                        }\n                        else if (right) {\n                            var overflowWidth = (pageX_1 + filterWidth - centerWidth + minMargin) - visibleWidth_1;\n                            if (overflowWidth > 0) {\n                                right += overflowWidth;\n                            }\n                            style.right = \"\".concat(Math.max(minMargin, right), \"px\");\n                        }\n                        filterStore.style = style;\n                        filterStore.maxHeight = maxHeight;\n                    });\n                }\n                $xetable.dispatchEvent('filter-visible', { column: column, field: column.field, property: column.field, filterList: $xetable.getCheckedFilters(), visible: filterStore.visible }, evnt);\n            },\n            handleClearFilter: function (column) {\n                if (column) {\n                    var filters = column.filters, filterRender = column.filterRender;\n                    if (filters) {\n                        var compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n                        var filterResetMethod_1 = column.filterResetMethod || (compConf ? compConf.filterResetMethod : null);\n                        filters.forEach(function (item) {\n                            item._checked = false;\n                            item.checked = false;\n                            if (!filterResetMethod_1) {\n                                item.data = XEUtils.clone(item.resetValue, true);\n                            }\n                        });\n                        if (filterResetMethod_1) {\n                            filterResetMethod_1({ options: filters, column: column, $table: $xetable });\n                        }\n                    }\n                }\n            },\n            /**\n             * 确认筛选\n             * 当筛选面板中的确定按钮被按下时触发\n             * @param {Event} evnt 事件\n             */\n            confirmFilterEvent: function (evnt) {\n                var mouseConfig = props.mouseConfig;\n                var filterStore = reactData.filterStore, oldScrollXLoad = reactData.scrollXLoad, oldScrollYLoad = reactData.scrollYLoad;\n                var filterOpts = computeFilterOpts.value;\n                var mouseOpts = computeMouseOpts.value;\n                var column = filterStore.column;\n                var field = column.field;\n                var values = [];\n                var datas = [];\n                column.filters.forEach(function (item) {\n                    if (item.checked) {\n                        values.push(item.value);\n                        datas.push(item.data);\n                    }\n                });\n                var filterList = $xetable.getCheckedFilters();\n                var params = { $table: $xetable, $event: evnt, column: column, field: field, property: field, values: values, datas: datas, filters: filterList, filterList: filterList };\n                // 如果是服务端筛选，则跳过本地筛选处理\n                if (!filterOpts.remote) {\n                    $xetable.handleTableData(true);\n                    $xetable.checkSelectionStatus();\n                }\n                if (mouseConfig && mouseOpts.area && $xetable.handleFilterEvent) {\n                    $xetable.handleFilterEvent(evnt, params);\n                }\n                $xetable.dispatchEvent('filter-change', params, evnt);\n                $xetable.closeFilter();\n                $xetable.updateFooter().then(function () {\n                    var scrollXLoad = reactData.scrollXLoad, scrollYLoad = reactData.scrollYLoad;\n                    if ((oldScrollXLoad || scrollXLoad) || (oldScrollYLoad || scrollYLoad)) {\n                        if (oldScrollXLoad || scrollXLoad) {\n                            $xetable.updateScrollXSpace();\n                        }\n                        if (oldScrollYLoad || scrollYLoad) {\n                            $xetable.updateScrollYSpace();\n                        }\n                        return $xetable.refreshScroll();\n                    }\n                }).then(function () {\n                    $xetable.updateCellAreas();\n                    return $xetable.recalculate(true);\n                }).then(function () {\n                    // 存在滚动行为未结束情况\n                    setTimeout(function () { return $xetable.recalculate(); }, 50);\n                });\n            }\n        };\n        var filterMethods = {\n            /**\n             * 手动弹出筛选面板\n             * @param column\n             */\n            openFilter: function (fieldOrColumn) {\n                var column = handleFieldOrColumn($xetable, fieldOrColumn);\n                if (column && column.filters) {\n                    var elemStore_1 = internalData.elemStore;\n                    var fixed_1 = column.fixed;\n                    return $xetable.scrollToColumn(column).then(function () {\n                        var headerWrapperRef = elemStore_1[\"\".concat(fixed_1 || 'main', \"-header-wrapper\")] || elemStore_1['main-header-wrapper'];\n                        var headerWrapperElem = headerWrapperRef ? headerWrapperRef.value : null;\n                        if (headerWrapperElem) {\n                            var filterBtnElem = headerWrapperElem.querySelector(\".vxe-header--column.\".concat(column.id, \" .vxe-filter--btn\"));\n                            triggerEvent(filterBtnElem, 'click');\n                        }\n                    });\n                }\n                return nextTick();\n            },\n            /**\n             * 修改筛选条件列表\n             * @param {ColumnInfo} fieldOrColumn 列或字段名\n             * @param {Array} options 选项\n             */\n            setFilter: function (fieldOrColumn, options) {\n                var column = handleFieldOrColumn($xetable, fieldOrColumn);\n                if (column && column.filters) {\n                    column.filters = toFilters(options || []);\n                }\n                return nextTick();\n            },\n            /**\n             * 清空指定列的筛选条件\n             * 如果为空则清空所有列的筛选条件\n             * @param {String} fieldOrColumn 列或字段名\n             */\n            clearFilter: function (fieldOrColumn) {\n                var filterStore = reactData.filterStore;\n                var tableFullColumn = internalData.tableFullColumn;\n                var filterOpts = computeFilterOpts.value;\n                var column;\n                if (fieldOrColumn) {\n                    column = handleFieldOrColumn($xetable, fieldOrColumn);\n                    if (column) {\n                        filterPrivateMethods.handleClearFilter(column);\n                    }\n                }\n                else {\n                    tableFullColumn.forEach(filterPrivateMethods.handleClearFilter);\n                }\n                if (!fieldOrColumn || column !== filterStore.column) {\n                    Object.assign(filterStore, {\n                        isAllSelected: false,\n                        isIndeterminate: false,\n                        style: null,\n                        options: [],\n                        column: null,\n                        multiple: false,\n                        visible: false\n                    });\n                }\n                if (!filterOpts.remote) {\n                    return $xetable.updateData();\n                }\n                return nextTick();\n            },\n            getCheckedFilters: function () {\n                var tableFullColumn = internalData.tableFullColumn;\n                var filterList = [];\n                tableFullColumn.forEach(function (column) {\n                    var field = column.field, filters = column.filters;\n                    var valueList = [];\n                    var dataList = [];\n                    if (filters && filters.length) {\n                        filters.forEach(function (item) {\n                            if (item.checked) {\n                                valueList.push(item.value);\n                                dataList.push(item.data);\n                            }\n                        });\n                        if (valueList.length) {\n                            filterList.push({ column: column, field: field, property: field, values: valueList, datas: dataList });\n                        }\n                    }\n                });\n                return filterList;\n            }\n        };\n        return __assign(__assign({}, filterMethods), filterPrivateMethods);\n    },\n    setupGrid: function ($xegrid) {\n        return $xegrid.extendTableMethods(tableFilterMethodKeys);\n    }\n};\nexport default tableFilterHook;\n",
      "start": 1714699767729,
      "end": 1714699767740,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767740,
      "end": 1714699767740,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767740,
      "end": 1714699767740,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767740,
      "end": 1714699767740,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767740,
      "end": 1714699767740,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767740,
      "end": 1714699767740,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767740,
      "end": 1714699767740,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VXETable } from '../../v-x-e-table';\nimport { toFilters, handleFieldOrColumn } from '../../table/src/util';\nimport { getDomNode, triggerEvent } from '../../tools/dom';\nvar tableFilterMethodKeys = ['setFilter', 'clearFilter', 'getCheckedFilters'];\nvar tableFilterHook = {\n    setupTable: function ($xetable) {\n        var props = $xetable.props, reactData = $xetable.reactData, internalData = $xetable.internalData;\n        var _a = $xetable.getRefMaps(), refTableBody = _a.refTableBody, refTableFilter = _a.refTableFilter;\n        var _b = $xetable.getComputeMaps(), computeFilterOpts = _b.computeFilterOpts, computeMouseOpts = _b.computeMouseOpts;\n        var filterPrivateMethods = {\n            checkFilterOptions: function () {\n                var filterStore = reactData.filterStore;\n                filterStore.isAllSelected = filterStore.options.every(function (item) { return item._checked; });\n                filterStore.isIndeterminate = !filterStore.isAllSelected && filterStore.options.some(function (item) { return item._checked; });\n            },\n            /**\n             * 点击筛选事件\n             * 当筛选图标被点击时触发\n             * 更新选项是否全部状态\n             * 打开筛选面板\n             * @param {Event} evnt 事件\n             * @param {ColumnInfo} column 列配置\n             * @param {Object} params 参数\n             */\n            triggerFilterEvent: function (evnt, column, params) {\n                var initStore = reactData.initStore, filterStore = reactData.filterStore;\n                if (filterStore.column === column && filterStore.visible) {\n                    filterStore.visible = false;\n                }\n                else {\n                    var targetElem_1 = evnt.target, pageX_1 = evnt.pageX;\n                    var visibleWidth_1 = getDomNode().visibleWidth;\n                    var filters = column.filters, filterMultiple = column.filterMultiple, filterRender = column.filterRender;\n                    var compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n                    var filterRecoverMethod_1 = column.filterRecoverMethod || (compConf ? compConf.filterRecoverMethod : null);\n                    internalData._currFilterParams = params;\n                    Object.assign(filterStore, {\n                        multiple: filterMultiple,\n                        options: filters,\n                        column: column,\n                        style: null\n                    });\n                    // 复原状态\n                    filterStore.options.forEach(function (option) {\n                        var _checked = option._checked, checked = option.checked;\n                        option._checked = checked;\n                        if (!checked && _checked !== checked) {\n                            if (filterRecoverMethod_1) {\n                                filterRecoverMethod_1({ option: option, column: column, $table: $xetable });\n                            }\n                        }\n                    });\n                    this.checkFilterOptions();\n                    filterStore.visible = true;\n                    initStore.filter = true;\n                    nextTick(function () {\n                        var tableBody = refTableBody.value;\n                        var bodyElem = tableBody.$el;\n                        var tableFilter = refTableFilter.value;\n                        var filterWrapperElem = tableFilter ? tableFilter.$el : null;\n                        var filterWidth = 0;\n                        var filterHeight = 0;\n                        var filterHeadElem = null;\n                        var filterFootElem = null;\n                        if (filterWrapperElem) {\n                            filterWidth = filterWrapperElem.offsetWidth;\n                            filterHeight = filterWrapperElem.offsetHeight;\n                            filterHeadElem = filterWrapperElem.querySelector('.vxe-table--filter-header');\n                            filterFootElem = filterWrapperElem.querySelector('.vxe-table--filter-footer');\n                        }\n                        var centerWidth = filterWidth / 2;\n                        var minMargin = 10;\n                        var maxLeft = bodyElem.clientWidth - filterWidth - minMargin;\n                        var left, right;\n                        var style = {\n                            top: \"\".concat(targetElem_1.offsetTop + targetElem_1.offsetParent.offsetTop + targetElem_1.offsetHeight + 8, \"px\")\n                        };\n                        // 判断面板不能大于表格高度\n                        var maxHeight = null;\n                        if (filterHeight >= bodyElem.clientHeight) {\n                            maxHeight = Math.max(60, bodyElem.clientHeight - (filterFootElem ? filterFootElem.offsetHeight : 0) - (filterHeadElem ? filterHeadElem.offsetHeight : 0));\n                        }\n                        if (column.fixed === 'left') {\n                            left = targetElem_1.offsetLeft + targetElem_1.offsetParent.offsetLeft - centerWidth;\n                        }\n                        else if (column.fixed === 'right') {\n                            right = (targetElem_1.offsetParent.offsetWidth - targetElem_1.offsetLeft) + (targetElem_1.offsetParent.offsetParent.offsetWidth - targetElem_1.offsetParent.offsetLeft) - column.renderWidth - centerWidth;\n                        }\n                        else {\n                            left = targetElem_1.offsetLeft + targetElem_1.offsetParent.offsetLeft - centerWidth - bodyElem.scrollLeft;\n                        }\n                        if (left) {\n                            var overflowWidth = (pageX_1 + filterWidth - centerWidth + minMargin) - visibleWidth_1;\n                            if (overflowWidth > 0) {\n                                left -= overflowWidth;\n                            }\n                            style.left = \"\".concat(Math.min(maxLeft, Math.max(minMargin, left)), \"px\");\n                        }\n                        else if (right) {\n                            var overflowWidth = (pageX_1 + filterWidth - centerWidth + minMargin) - visibleWidth_1;\n                            if (overflowWidth > 0) {\n                                right += overflowWidth;\n                            }\n                            style.right = \"\".concat(Math.max(minMargin, right), \"px\");\n                        }\n                        filterStore.style = style;\n                        filterStore.maxHeight = maxHeight;\n                    });\n                }\n                $xetable.dispatchEvent('filter-visible', { column: column, field: column.field, property: column.field, filterList: $xetable.getCheckedFilters(), visible: filterStore.visible }, evnt);\n            },\n            handleClearFilter: function (column) {\n                if (column) {\n                    var filters = column.filters, filterRender = column.filterRender;\n                    if (filters) {\n                        var compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n                        var filterResetMethod_1 = column.filterResetMethod || (compConf ? compConf.filterResetMethod : null);\n                        filters.forEach(function (item) {\n                            item._checked = false;\n                            item.checked = false;\n                            if (!filterResetMethod_1) {\n                                item.data = XEUtils.clone(item.resetValue, true);\n                            }\n                        });\n                        if (filterResetMethod_1) {\n                            filterResetMethod_1({ options: filters, column: column, $table: $xetable });\n                        }\n                    }\n                }\n            },\n            /**\n             * 确认筛选\n             * 当筛选面板中的确定按钮被按下时触发\n             * @param {Event} evnt 事件\n             */\n            confirmFilterEvent: function (evnt) {\n                var mouseConfig = props.mouseConfig;\n                var filterStore = reactData.filterStore, oldScrollXLoad = reactData.scrollXLoad, oldScrollYLoad = reactData.scrollYLoad;\n                var filterOpts = computeFilterOpts.value;\n                var mouseOpts = computeMouseOpts.value;\n                var column = filterStore.column;\n                var field = column.field;\n                var values = [];\n                var datas = [];\n                column.filters.forEach(function (item) {\n                    if (item.checked) {\n                        values.push(item.value);\n                        datas.push(item.data);\n                    }\n                });\n                var filterList = $xetable.getCheckedFilters();\n                var params = { $table: $xetable, $event: evnt, column: column, field: field, property: field, values: values, datas: datas, filters: filterList, filterList: filterList };\n                // 如果是服务端筛选，则跳过本地筛选处理\n                if (!filterOpts.remote) {\n                    $xetable.handleTableData(true);\n                    $xetable.checkSelectionStatus();\n                }\n                if (mouseConfig && mouseOpts.area && $xetable.handleFilterEvent) {\n                    $xetable.handleFilterEvent(evnt, params);\n                }\n                $xetable.dispatchEvent('filter-change', params, evnt);\n                $xetable.closeFilter();\n                $xetable.updateFooter().then(function () {\n                    var scrollXLoad = reactData.scrollXLoad, scrollYLoad = reactData.scrollYLoad;\n                    if ((oldScrollXLoad || scrollXLoad) || (oldScrollYLoad || scrollYLoad)) {\n                        if (oldScrollXLoad || scrollXLoad) {\n                            $xetable.updateScrollXSpace();\n                        }\n                        if (oldScrollYLoad || scrollYLoad) {\n                            $xetable.updateScrollYSpace();\n                        }\n                        return $xetable.refreshScroll();\n                    }\n                }).then(function () {\n                    $xetable.updateCellAreas();\n                    return $xetable.recalculate(true);\n                }).then(function () {\n                    // 存在滚动行为未结束情况\n                    setTimeout(function () { return $xetable.recalculate(); }, 50);\n                });\n            }\n        };\n        var filterMethods = {\n            /**\n             * 手动弹出筛选面板\n             * @param column\n             */\n            openFilter: function (fieldOrColumn) {\n                var column = handleFieldOrColumn($xetable, fieldOrColumn);\n                if (column && column.filters) {\n                    var elemStore_1 = internalData.elemStore;\n                    var fixed_1 = column.fixed;\n                    return $xetable.scrollToColumn(column).then(function () {\n                        var headerWrapperRef = elemStore_1[\"\".concat(fixed_1 || 'main', \"-header-wrapper\")] || elemStore_1['main-header-wrapper'];\n                        var headerWrapperElem = headerWrapperRef ? headerWrapperRef.value : null;\n                        if (headerWrapperElem) {\n                            var filterBtnElem = headerWrapperElem.querySelector(\".vxe-header--column.\".concat(column.id, \" .vxe-filter--btn\"));\n                            triggerEvent(filterBtnElem, 'click');\n                        }\n                    });\n                }\n                return nextTick();\n            },\n            /**\n             * 修改筛选条件列表\n             * @param {ColumnInfo} fieldOrColumn 列或字段名\n             * @param {Array} options 选项\n             */\n            setFilter: function (fieldOrColumn, options) {\n                var column = handleFieldOrColumn($xetable, fieldOrColumn);\n                if (column && column.filters) {\n                    column.filters = toFilters(options || []);\n                }\n                return nextTick();\n            },\n            /**\n             * 清空指定列的筛选条件\n             * 如果为空则清空所有列的筛选条件\n             * @param {String} fieldOrColumn 列或字段名\n             */\n            clearFilter: function (fieldOrColumn) {\n                var filterStore = reactData.filterStore;\n                var tableFullColumn = internalData.tableFullColumn;\n                var filterOpts = computeFilterOpts.value;\n                var column;\n                if (fieldOrColumn) {\n                    column = handleFieldOrColumn($xetable, fieldOrColumn);\n                    if (column) {\n                        filterPrivateMethods.handleClearFilter(column);\n                    }\n                }\n                else {\n                    tableFullColumn.forEach(filterPrivateMethods.handleClearFilter);\n                }\n                if (!fieldOrColumn || column !== filterStore.column) {\n                    Object.assign(filterStore, {\n                        isAllSelected: false,\n                        isIndeterminate: false,\n                        style: null,\n                        options: [],\n                        column: null,\n                        multiple: false,\n                        visible: false\n                    });\n                }\n                if (!filterOpts.remote) {\n                    return $xetable.updateData();\n                }\n                return nextTick();\n            },\n            getCheckedFilters: function () {\n                var tableFullColumn = internalData.tableFullColumn;\n                var filterList = [];\n                tableFullColumn.forEach(function (column) {\n                    var field = column.field, filters = column.filters;\n                    var valueList = [];\n                    var dataList = [];\n                    if (filters && filters.length) {\n                        filters.forEach(function (item) {\n                            if (item.checked) {\n                                valueList.push(item.value);\n                                dataList.push(item.data);\n                            }\n                        });\n                        if (valueList.length) {\n                            filterList.push({ column: column, field: field, property: field, values: valueList, datas: dataList });\n                        }\n                    }\n                });\n                return filterList;\n            }\n        };\n        return __assign(__assign({}, filterMethods), filterPrivateMethods);\n    },\n    setupGrid: function ($xegrid) {\n        return $xegrid.extendTableMethods(tableFilterMethodKeys);\n    }\n};\nexport default tableFilterHook;\n",
      "start": 1714699767740,
      "end": 1714699767740,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767740,
      "end": 1714699767740,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767740,
      "end": 1714699767740,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767740,
      "end": 1714699767740,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767740,
      "end": 1714699767740,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767740,
      "end": 1714699767740,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767740,
      "end": 1714699767740,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767740,
      "end": 1714699767741,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767741,
      "end": 1714699767741,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767741,
      "end": 1714699767741,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767741,
      "end": 1714699767741,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767741,
      "end": 1714699767741,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767741,
      "end": 1714699767741,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767741,
      "end": 1714699767741,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767741,
      "end": 1714699767741,
      "order": "normal"
    }
  ]
}

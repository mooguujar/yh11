{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/escape.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import escapeHtmlChar from './_escapeHtmlChar.js';\nimport toString from './toString.js';\n\n/** Used to match HTML entities and HTML characters. */\nvar reUnescapedHtml = /[&<>\"']/g,\n    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n * corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional\n * characters use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value. See\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * When working with HTML you should always\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n * XSS vectors.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escape('fred, barney, & pebbles');\n * // => 'fred, barney, &amp; pebbles'\n */\nfunction escape(string) {\n  string = toString(string);\n  return (string && reHasUnescapedHtml.test(string))\n    ? string.replace(reUnescapedHtml, escapeHtmlChar)\n    : string;\n}\n\nexport default escape;\n",
      "start": 1714699768335,
      "end": 1714699768353,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import escapeHtmlChar from './_escapeHtmlChar.js';\nimport toString from './toString.js';\n\n/** Used to match HTML entities and HTML characters. */\nvar reUnescapedHtml = /[&<>\"']/g,\n    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n * corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional\n * characters use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value. See\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * When working with HTML you should always\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n * XSS vectors.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escape('fred, barney, & pebbles');\n * // => 'fred, barney, &amp; pebbles'\n */\nfunction escape(string) {\n  string = toString(string);\n  return (string && reHasUnescapedHtml.test(string))\n    ? string.replace(reUnescapedHtml, escapeHtmlChar)\n    : string;\n}\n\nexport default escape;\n",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768353,
      "end": 1714699768353,
      "order": "normal"
    }
  ]
}

{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseMatchesProperty.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import baseIsEqual from './_baseIsEqual.js';\nimport get from './get.js';\nimport hasIn from './hasIn.js';\nimport isKey from './_isKey.js';\nimport isStrictComparable from './_isStrictComparable.js';\nimport matchesStrictComparable from './_matchesStrictComparable.js';\nimport toKey from './_toKey.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nexport default baseMatchesProperty;\n",
      "start": 1714699768727,
      "end": 1714699768735,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import baseIsEqual from './_baseIsEqual.js';\nimport get from './get.js';\nimport hasIn from './hasIn.js';\nimport isKey from './_isKey.js';\nimport isStrictComparable from './_isStrictComparable.js';\nimport matchesStrictComparable from './_matchesStrictComparable.js';\nimport toKey from './_toKey.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nexport default baseMatchesProperty;\n",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768735,
      "end": 1714699768735,
      "order": "normal"
    }
  ]
}

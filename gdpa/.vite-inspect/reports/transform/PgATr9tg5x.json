{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/toolbar/src/toolbar.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { defineComponent, h, ref, computed, inject, createCommentVNode, resolveComponent, reactive, nextTick, onMounted, onUnmounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { VXETable } from '../../v-x-e-table';\nimport { useSize } from '../../hooks/size';\nimport { getEventTargetNode } from '../../tools/dom';\nimport { formatText } from '../../tools/utils';\nimport { warnLog, errLog } from '../../tools/log';\nimport { GlobalEvent } from '../../tools/event';\nimport { getSlotVNs } from '../../tools/vn';\nexport default defineComponent({\n    name: 'VxeToolbar',\n    props: {\n        loading: Boolean,\n        refresh: [Boolean, Object],\n        import: [Boolean, Object],\n        export: [Boolean, Object],\n        print: [Boolean, Object],\n        zoom: [Boolean, Object],\n        custom: [Boolean, Object],\n        buttons: { type: Array, default: function () { return GlobalConfig.toolbar.buttons; } },\n        tools: { type: Array, default: function () { return GlobalConfig.toolbar.tools; } },\n        perfect: { type: Boolean, default: function () { return GlobalConfig.toolbar.perfect; } },\n        size: { type: String, default: function () { return GlobalConfig.toolbar.size || GlobalConfig.size; } },\n        className: [String, Function]\n    },\n    emits: [\n        'button-click',\n        'tool-click'\n    ],\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var xID = XEUtils.uniqueId();\n        var computeSize = useSize(props);\n        var reactData = reactive({\n            isRefresh: false,\n            columns: []\n        });\n        var refElem = ref();\n        var refCustomWrapper = ref();\n        var customStore = reactive({\n            isAll: false,\n            isIndeterminate: false,\n            activeBtn: false,\n            activeWrapper: false,\n            visible: false\n        });\n        var refMaps = {\n            refElem: refElem\n        };\n        var $xetoolbar = {\n            xID: xID,\n            props: props,\n            context: context,\n            reactData: reactData,\n            getRefMaps: function () { return refMaps; }\n        };\n        var toolbarMethods = {};\n        var $xegrid = inject('$xegrid', null);\n        var $xetable;\n        var computeRefreshOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.toolbar.refresh, props.refresh);\n        });\n        var computeImportOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.toolbar.import, props.import);\n        });\n        var computeExportOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.toolbar.export, props.export);\n        });\n        var computePrintOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.toolbar.print, props.print);\n        });\n        var computeZoomOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.toolbar.zoom, props.zoom);\n        });\n        var computeCustomOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.toolbar.custom, props.custom);\n        });\n        var checkTable = function () {\n            if ($xetable) {\n                return true;\n            }\n            errLog('vxe.error.barUnableLink');\n        };\n        var checkCustomStatus = function () {\n            var columns = reactData.columns;\n            var computeTableCustomOpts = $xetable.getComputeMaps().computeCustomOpts;\n            var tableCustomOpts = computeTableCustomOpts.value;\n            var checkMethod = tableCustomOpts.checkMethod;\n            customStore.isAll = columns.every(function (column) { return (checkMethod ? !checkMethod({ column: column }) : false) || column.visible; });\n            customStore.isIndeterminate = !customStore.isAll && columns.some(function (column) { return (!checkMethod || checkMethod({ column: column })) && (column.visible || column.halfVisible); });\n        };\n        var showCustom = function () {\n            customStore.visible = true;\n            checkCustomStatus();\n        };\n        var handleTableCustom = function () {\n            $xetable.handleCustom();\n        };\n        var closeCustom = function () {\n            var custom = props.custom;\n            var customOpts = computeCustomOpts.value;\n            if (customStore.visible) {\n                customStore.visible = false;\n                if (custom && !customOpts.immediate) {\n                    handleTableCustom();\n                }\n            }\n        };\n        var emitCustomEvent = function (type, evnt) {\n            var comp = $xegrid || $xetable;\n            comp.dispatchEvent('custom', { type: type }, evnt);\n        };\n        var confirmCustomEvent = function (evnt) {\n            closeCustom();\n            emitCustomEvent('confirm', evnt);\n        };\n        var customOpenEvent = function (evnt) {\n            if (checkTable()) {\n                if (!customStore.visible) {\n                    showCustom();\n                    emitCustomEvent('open', evnt);\n                }\n            }\n        };\n        var customColseEvent = function (evnt) {\n            if (customStore.visible) {\n                closeCustom();\n                emitCustomEvent('close', evnt);\n            }\n        };\n        var resetCustomEvent = function (evnt) {\n            $xetable.resetColumn(true);\n            closeCustom();\n            emitCustomEvent('reset', evnt);\n        };\n        var handleOptionCheck = function (column) {\n            var columns = reactData.columns;\n            var matchObj = XEUtils.findTree(columns, function (item) { return item === column; });\n            if (matchObj && matchObj.parent) {\n                var parent_1 = matchObj.parent;\n                if (parent_1.children && parent_1.children.length) {\n                    parent_1.visible = parent_1.children.every(function (column) { return column.visible; });\n                    parent_1.halfVisible = !parent_1.visible && parent_1.children.some(function (column) { return column.visible || column.halfVisible; });\n                    handleOptionCheck(parent_1);\n                }\n            }\n        };\n        var changeCheckboxOption = function (column) {\n            var isChecked = !column.visible;\n            var customOpts = computeCustomOpts.value;\n            XEUtils.eachTree([column], function (item) {\n                item.visible = isChecked;\n                item.halfVisible = false;\n            });\n            handleOptionCheck(column);\n            if (props.custom && customOpts.immediate) {\n                handleTableCustom();\n            }\n            checkCustomStatus();\n        };\n        var changeFixedOption = function (column, colFixed) {\n            var computeIsMaxFixedColumn = $xetable.getComputeMaps().computeIsMaxFixedColumn;\n            var isMaxFixedColumn = computeIsMaxFixedColumn.value;\n            if (column.fixed === colFixed) {\n                $xetable.clearColumnFixed(column);\n            }\n            else {\n                if (!isMaxFixedColumn || column.fixed) {\n                    $xetable.setColumnFixed(column, colFixed);\n                }\n            }\n        };\n        var allCustomEvent = function () {\n            var columns = reactData.columns;\n            var computeTableCustomOpts = $xetable.getComputeMaps().computeCustomOpts;\n            var tableCustomOpts = computeTableCustomOpts.value;\n            var checkMethod = tableCustomOpts.checkMethod;\n            var isAll = !customStore.isAll;\n            XEUtils.eachTree(columns, function (column) {\n                if (!checkMethod || checkMethod({ column: column })) {\n                    column.visible = isAll;\n                    column.halfVisible = false;\n                }\n            });\n            customStore.isAll = isAll;\n            checkCustomStatus();\n        };\n        var handleGlobalMousedownEvent = function (evnt) {\n            var customWrapperElem = refCustomWrapper.value;\n            if (!getEventTargetNode(evnt, customWrapperElem).flag) {\n                customColseEvent(evnt);\n            }\n        };\n        var handleGlobalBlurEvent = function (evnt) {\n            customColseEvent(evnt);\n        };\n        var handleClickSettingEvent = function (evnt) {\n            if (customStore.visible) {\n                customColseEvent(evnt);\n            }\n            else {\n                customOpenEvent(evnt);\n            }\n        };\n        var handleMouseenterSettingEvent = function (evnt) {\n            customStore.activeBtn = true;\n            customOpenEvent(evnt);\n        };\n        var handleMouseleaveSettingEvent = function (evnt) {\n            customStore.activeBtn = false;\n            setTimeout(function () {\n                if (!customStore.activeBtn && !customStore.activeWrapper) {\n                    customColseEvent(evnt);\n                }\n            }, 300);\n        };\n        var handleWrapperMouseenterEvent = function (evnt) {\n            customStore.activeWrapper = true;\n            customOpenEvent(evnt);\n        };\n        var handleWrapperMouseleaveEvent = function (evnt) {\n            customStore.activeWrapper = false;\n            setTimeout(function () {\n                if (!customStore.activeBtn && !customStore.activeWrapper) {\n                    customColseEvent(evnt);\n                }\n            }, 300);\n        };\n        var refreshEvent = function (evnt) {\n            var isRefresh = reactData.isRefresh;\n            var refreshOpts = computeRefreshOpts.value;\n            if (!isRefresh) {\n                var queryMethod = refreshOpts.queryMethod || refreshOpts.query;\n                if (queryMethod) {\n                    reactData.isRefresh = true;\n                    try {\n                        Promise.resolve(queryMethod({})).catch(function (e) { return e; }).then(function () {\n                            reactData.isRefresh = false;\n                        });\n                    }\n                    catch (e) {\n                        reactData.isRefresh = false;\n                    }\n                }\n                else if ($xegrid) {\n                    reactData.isRefresh = true;\n                    $xegrid.triggerToolbarCommitEvent({ code: refreshOpts.code || 'reload' }, evnt).catch(function (e) { return e; }).then(function () {\n                        reactData.isRefresh = false;\n                    });\n                }\n            }\n        };\n        var zoomEvent = function (evnt) {\n            if ($xegrid) {\n                $xegrid.triggerZoomEvent(evnt);\n            }\n        };\n        var btnEvent = function (evnt, item) {\n            var code = item.code;\n            if (code) {\n                if ($xegrid) {\n                    $xegrid.triggerToolbarBtnEvent(item, evnt);\n                }\n                else {\n                    var gCommandOpts = VXETable.commands.get(code);\n                    var params = { code: code, button: item, $table: $xetable, $grid: $xegrid, $event: evnt };\n                    if (gCommandOpts) {\n                        if (gCommandOpts.commandMethod) {\n                            gCommandOpts.commandMethod(params);\n                        }\n                        else {\n                            if (process.env.NODE_ENV === 'development') {\n                                errLog('vxe.error.notCommands', [code]);\n                            }\n                        }\n                    }\n                    $xetoolbar.dispatchEvent('button-click', params, evnt);\n                }\n            }\n        };\n        var tolEvent = function (evnt, item) {\n            var code = item.code;\n            if (code) {\n                if ($xegrid) {\n                    $xegrid.triggerToolbarTolEvent(item, evnt);\n                }\n                else {\n                    var gCommandOpts = VXETable.commands.get(code);\n                    var params = { code: code, tool: item, $table: $xetable, $grid: $xegrid, $event: evnt };\n                    if (gCommandOpts) {\n                        if (gCommandOpts.commandMethod) {\n                            gCommandOpts.commandMethod(params);\n                        }\n                        else {\n                            if (process.env.NODE_ENV === 'development') {\n                                errLog('vxe.error.notCommands', [code]);\n                            }\n                        }\n                    }\n                    $xetoolbar.dispatchEvent('tool-click', params, evnt);\n                }\n            }\n        };\n        var importEvent = function () {\n            if (checkTable()) {\n                $xetable.openImport();\n            }\n        };\n        var exportEvent = function () {\n            if (checkTable()) {\n                $xetable.openExport();\n            }\n        };\n        var printEvent = function () {\n            if (checkTable()) {\n                $xetable.openPrint();\n            }\n        };\n        var renderDropdowns = function (item, isBtn) {\n            var dropdowns = item.dropdowns;\n            var downVNs = [];\n            if (dropdowns) {\n                return dropdowns.map(function (child, index) {\n                    if (child.visible === false) {\n                        return createCommentVNode();\n                    }\n                    return h(resolveComponent('vxe-button'), {\n                        key: index,\n                        disabled: child.disabled,\n                        loading: child.loading,\n                        type: child.type,\n                        icon: child.icon,\n                        circle: child.circle,\n                        round: child.round,\n                        status: child.status,\n                        content: child.name,\n                        onClick: function (evnt) { return isBtn ? btnEvent(evnt, child) : tolEvent(evnt, child); }\n                    });\n                });\n            }\n            return downVNs;\n        };\n        /**\n         * 渲染按钮\n         */\n        var renderBtns = function () {\n            var buttons = props.buttons;\n            var buttonsSlot = slots.buttons;\n            if (buttonsSlot) {\n                return getSlotVNs(buttonsSlot({ $grid: $xegrid, $table: $xetable }));\n            }\n            var btnVNs = [];\n            if (buttons) {\n                buttons.forEach(function (item) {\n                    var dropdowns = item.dropdowns, buttonRender = item.buttonRender;\n                    if (item.visible !== false) {\n                        var compConf = buttonRender ? VXETable.renderer.get(buttonRender.name) : null;\n                        if (buttonRender && compConf && compConf.renderToolbarButton) {\n                            var toolbarButtonClassName = compConf.toolbarButtonClassName;\n                            var params = { $grid: $xegrid, $table: $xetable, button: item };\n                            btnVNs.push(h('span', {\n                                class: ['vxe-button--item', toolbarButtonClassName ? (XEUtils.isFunction(toolbarButtonClassName) ? toolbarButtonClassName(params) : toolbarButtonClassName) : '']\n                            }, getSlotVNs(compConf.renderToolbarButton(buttonRender, params))));\n                        }\n                        else {\n                            btnVNs.push(h(resolveComponent('vxe-button'), {\n                                disabled: item.disabled,\n                                loading: item.loading,\n                                type: item.type,\n                                icon: item.icon,\n                                circle: item.circle,\n                                round: item.round,\n                                status: item.status,\n                                content: item.name,\n                                destroyOnClose: item.destroyOnClose,\n                                placement: item.placement,\n                                transfer: item.transfer,\n                                onClick: function (evnt) { return btnEvent(evnt, item); }\n                            }, dropdowns && dropdowns.length ? {\n                                dropdowns: function () { return renderDropdowns(item, true); }\n                            } : {}));\n                        }\n                    }\n                });\n            }\n            return btnVNs;\n        };\n        /**\n         * 渲染右侧工具\n         */\n        var renderRightTools = function () {\n            var tools = props.tools;\n            var toolsSlot = slots.tools;\n            if (toolsSlot) {\n                return getSlotVNs(toolsSlot({ $grid: $xegrid, $table: $xetable }));\n            }\n            var btnVNs = [];\n            if (tools) {\n                tools.forEach(function (item) {\n                    var dropdowns = item.dropdowns, toolRender = item.toolRender;\n                    if (item.visible !== false) {\n                        var compConf = toolRender ? VXETable.renderer.get(toolRender.name) : null;\n                        if (toolRender && compConf && compConf.renderToolbarTool) {\n                            var toolbarToolClassName = compConf.toolbarToolClassName;\n                            var params = { $grid: $xegrid, $table: $xetable, tool: item };\n                            btnVNs.push(h('span', {\n                                class: ['vxe-tool--item', toolbarToolClassName ? (XEUtils.isFunction(toolbarToolClassName) ? toolbarToolClassName(params) : toolbarToolClassName) : '']\n                            }, getSlotVNs(compConf.renderToolbarTool(toolRender, params))));\n                        }\n                        else {\n                            btnVNs.push(h(resolveComponent('vxe-button'), {\n                                disabled: item.disabled,\n                                loading: item.loading,\n                                type: item.type,\n                                icon: item.icon,\n                                circle: item.circle,\n                                round: item.round,\n                                status: item.status,\n                                content: item.name,\n                                destroyOnClose: item.destroyOnClose,\n                                placement: item.placement,\n                                transfer: item.transfer,\n                                onClick: function (evnt) { return tolEvent(evnt, item); }\n                            }, dropdowns && dropdowns.length ? {\n                                dropdowns: function () { return renderDropdowns(item, false); }\n                            } : {}));\n                        }\n                    }\n                });\n            }\n            return btnVNs;\n        };\n        var renderCustoms = function () {\n            var columns = reactData.columns;\n            var customOpts = computeCustomOpts.value;\n            var isMaxFixedColumn = true;\n            var colVNs = [];\n            var customBtnOns = {};\n            var customWrapperOns = {};\n            var checkMethod;\n            if ($xetable) {\n                var _a = $xetable.getComputeMaps(), computeTableCustomOpts = _a.computeCustomOpts, computeIsMaxFixedColumn = _a.computeIsMaxFixedColumn;\n                var tableCustomOpts = computeTableCustomOpts.value;\n                checkMethod = tableCustomOpts.checkMethod;\n                isMaxFixedColumn = computeIsMaxFixedColumn.value;\n            }\n            if (customOpts.trigger === 'manual') {\n                // 手动触发\n            }\n            else if (customOpts.trigger === 'hover') {\n                // hover 触发\n                customBtnOns.onMouseenter = handleMouseenterSettingEvent;\n                customBtnOns.onMouseleave = handleMouseleaveSettingEvent;\n                customWrapperOns.onMouseenter = handleWrapperMouseenterEvent;\n                customWrapperOns.onMouseleave = handleWrapperMouseleaveEvent;\n            }\n            else {\n                // 点击触发\n                customBtnOns.onClick = handleClickSettingEvent;\n            }\n            XEUtils.eachTree(columns, function (column, index, items, path, parent) {\n                var colTitle = formatText(column.getTitle(), 1);\n                var colKey = column.getKey();\n                var isColGroup = column.children && column.children.length;\n                var isDisabled = checkMethod ? !checkMethod({ column: column }) : false;\n                if (isColGroup || colKey) {\n                    var isChecked = column.visible;\n                    var isIndeterminate = column.halfVisible;\n                    colVNs.push(h('li', {\n                        class: ['vxe-custom--option', \"level--\".concat(column.level), {\n                                'is--group': isColGroup\n                            }]\n                    }, [\n                        h('div', {\n                            title: colTitle,\n                            class: ['vxe-custom--checkbox-option', {\n                                    'is--checked': isChecked,\n                                    'is--indeterminate': isIndeterminate,\n                                    'is--disabled': isDisabled\n                                }],\n                            onClick: function () {\n                                if (!isDisabled) {\n                                    changeCheckboxOption(column);\n                                }\n                            }\n                        }, [\n                            h('span', {\n                                class: ['vxe-checkbox--icon', isIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]\n                            }),\n                            h('span', {\n                                class: 'vxe-checkbox--label'\n                            }, colTitle)\n                        ]),\n                        !parent && customOpts.allowFixed ? h('div', {\n                            class: 'vxe-custom--fixed-option'\n                        }, [\n                            h('span', {\n                                class: ['vxe-custom--fixed-left-option', column.fixed === 'left' ? GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_LEFT_ACTIVED : GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_LEFT, {\n                                        'is--checked': column.fixed === 'left',\n                                        'is--disabled': isMaxFixedColumn && !column.fixed\n                                    }],\n                                title: GlobalConfig.i18n(column.fixed === 'left' ? 'vxe.toolbar.cancelfixed' : 'vxe.toolbar.fixedLeft'),\n                                onClick: function () {\n                                    changeFixedOption(column, 'left');\n                                }\n                            }),\n                            h('span', {\n                                class: ['vxe-custom--fixed-right-option', column.fixed === 'right' ? GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_RIGHT_ACTIVED : GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_RIGHT, {\n                                        'is--checked': column.fixed === 'right',\n                                        'is--disabled': isMaxFixedColumn && !column.fixed\n                                    }],\n                                title: GlobalConfig.i18n(column.fixed === 'right' ? 'vxe.toolbar.cancelfixed' : 'vxe.toolbar.fixedRight'),\n                                onClick: function () {\n                                    changeFixedOption(column, 'right');\n                                }\n                            })\n                        ]) : null\n                    ]));\n                }\n            });\n            var isAllChecked = customStore.isAll;\n            var isAllIndeterminate = customStore.isIndeterminate;\n            return h('div', {\n                class: ['vxe-custom--wrapper', {\n                        'is--active': customStore.visible\n                    }],\n                ref: refCustomWrapper\n            }, [\n                h(resolveComponent('vxe-button'), __assign({ circle: true, icon: customOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_CUSTOM, title: GlobalConfig.i18n('vxe.toolbar.custom') }, customBtnOns)),\n                h('div', {\n                    class: 'vxe-custom--option-wrapper'\n                }, [\n                    h('ul', {\n                        class: 'vxe-custom--header'\n                    }, [\n                        h('li', {\n                            class: 'vxe-custom--option'\n                        }, [\n                            h('div', {\n                                class: ['vxe-custom--checkbox-option', {\n                                        'is--checked': isAllChecked,\n                                        'is--indeterminate': isAllIndeterminate\n                                    }],\n                                title: GlobalConfig.i18n('vxe.table.allTitle'),\n                                onClick: allCustomEvent\n                            }, [\n                                h('span', {\n                                    class: ['vxe-checkbox--icon', isAllIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]\n                                }),\n                                h('span', {\n                                    class: 'vxe-checkbox--label'\n                                }, GlobalConfig.i18n('vxe.toolbar.customAll'))\n                            ])\n                        ])\n                    ]),\n                    h('ul', __assign({ class: 'vxe-custom--body' }, customWrapperOns), colVNs),\n                    customOpts.showFooter || customOpts.isFooter ? h('div', {\n                        class: 'vxe-custom--footer'\n                    }, [\n                        h('button', {\n                            class: 'btn--reset',\n                            onClick: resetCustomEvent\n                        }, customOpts.resetButtonText || GlobalConfig.i18n('vxe.toolbar.customRestore')),\n                        h('button', {\n                            class: 'btn--confirm',\n                            onClick: confirmCustomEvent\n                        }, customOpts.confirmButtonText || GlobalConfig.i18n('vxe.toolbar.customConfirm'))\n                    ]) : null\n                ])\n            ]);\n        };\n        toolbarMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $toolbar: $xetoolbar, $event: evnt }, params));\n            },\n            syncUpdate: function (params) {\n                var collectColumn = params.collectColumn;\n                $xetable = params.$table;\n                reactData.columns = collectColumn;\n            }\n        };\n        Object.assign($xetoolbar, toolbarMethods);\n        onMounted(function () {\n            GlobalEvent.on($xetoolbar, 'mousedown', handleGlobalMousedownEvent);\n            GlobalEvent.on($xetoolbar, 'blur', handleGlobalBlurEvent);\n        });\n        onUnmounted(function () {\n            GlobalEvent.off($xetoolbar, 'mousedown');\n            GlobalEvent.off($xetoolbar, 'blur');\n        });\n        nextTick(function () {\n            var refresh = props.refresh;\n            var refreshOpts = computeRefreshOpts.value;\n            var queryMethod = refreshOpts.queryMethod || refreshOpts.query;\n            if (refresh && !$xegrid && !queryMethod) {\n                warnLog('vxe.error.notFunc', ['queryMethod']);\n            }\n            var customOpts = computeCustomOpts.value;\n            if (process.env.NODE_ENV === 'development') {\n                if (customOpts.isFooter) {\n                    warnLog('vxe.error.notValidators', ['custom.isFooter', 'custom.showFooter']);\n                }\n            }\n        });\n        var renderVN = function () {\n            var _a;\n            var perfect = props.perfect, loading = props.loading, refresh = props.refresh, zoom = props.zoom, custom = props.custom, className = props.className;\n            var vSize = computeSize.value;\n            var refreshOpts = computeRefreshOpts.value;\n            var importOpts = computeImportOpts.value;\n            var exportOpts = computeExportOpts.value;\n            var printOpts = computePrintOpts.value;\n            var zoomOpts = computeZoomOpts.value;\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-toolbar', className ? (XEUtils.isFunction(className) ? className({ $toolbar: $xetoolbar }) : className) : '', (_a = {},\n                        _a[\"size--\".concat(vSize)] = vSize,\n                        _a['is--perfect'] = perfect,\n                        _a['is--loading'] = loading,\n                        _a)]\n            }, [\n                h('div', {\n                    class: 'vxe-buttons--wrapper'\n                }, renderBtns()),\n                h('div', {\n                    class: 'vxe-tools--wrapper'\n                }, renderRightTools()),\n                h('div', {\n                    class: 'vxe-tools--operate'\n                }, [\n                    props.import ? h(resolveComponent('vxe-button'), {\n                        circle: true,\n                        icon: importOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_IMPORT,\n                        title: GlobalConfig.i18n('vxe.toolbar.import'),\n                        onClick: importEvent\n                    }) : createCommentVNode(),\n                    props.export ? h(resolveComponent('vxe-button'), {\n                        circle: true,\n                        icon: exportOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_EXPORT,\n                        title: GlobalConfig.i18n('vxe.toolbar.export'),\n                        onClick: exportEvent\n                    }) : createCommentVNode(),\n                    props.print ? h(resolveComponent('vxe-button'), {\n                        circle: true,\n                        icon: printOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_PRINT,\n                        title: GlobalConfig.i18n('vxe.toolbar.print'),\n                        onClick: printEvent\n                    }) : createCommentVNode(),\n                    refresh ? h(resolveComponent('vxe-button'), {\n                        circle: true,\n                        icon: reactData.isRefresh ? (refreshOpts.iconLoading || GlobalConfig.icon.TOOLBAR_TOOLS_REFRESH_LOADING) : (refreshOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_REFRESH),\n                        title: GlobalConfig.i18n('vxe.toolbar.refresh'),\n                        onClick: refreshEvent\n                    }) : createCommentVNode(),\n                    zoom && $xegrid ? h(resolveComponent('vxe-button'), {\n                        circle: true,\n                        icon: $xegrid.isMaximized() ? (zoomOpts.iconOut || GlobalConfig.icon.TOOLBAR_TOOLS_MINIMIZE) : (zoomOpts.iconIn || GlobalConfig.icon.TOOLBAR_TOOLS_FULLSCREEN),\n                        title: GlobalConfig.i18n(\"vxe.toolbar.zoom\".concat($xegrid.isMaximized() ? 'Out' : 'In')),\n                        onClick: zoomEvent\n                    }) : createCommentVNode(),\n                    custom ? renderCustoms() : createCommentVNode()\n                ])\n            ]);\n        };\n        $xetoolbar.renderVN = renderVN;\n        return $xetoolbar;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767740,
      "end": 1714699767784,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767784,
      "end": 1714699767784,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767784,
      "end": 1714699767784,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767784,
      "end": 1714699767784,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767784,
      "end": 1714699767784,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767784,
      "end": 1714699767784,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767784,
      "end": 1714699767784,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { defineComponent, h, ref, computed, inject, createCommentVNode, resolveComponent, reactive, nextTick, onMounted, onUnmounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { VXETable } from '../../v-x-e-table';\nimport { useSize } from '../../hooks/size';\nimport { getEventTargetNode } from '../../tools/dom';\nimport { formatText } from '../../tools/utils';\nimport { warnLog, errLog } from '../../tools/log';\nimport { GlobalEvent } from '../../tools/event';\nimport { getSlotVNs } from '../../tools/vn';\nexport default defineComponent({\n    name: 'VxeToolbar',\n    props: {\n        loading: Boolean,\n        refresh: [Boolean, Object],\n        import: [Boolean, Object],\n        export: [Boolean, Object],\n        print: [Boolean, Object],\n        zoom: [Boolean, Object],\n        custom: [Boolean, Object],\n        buttons: { type: Array, default: function () { return GlobalConfig.toolbar.buttons; } },\n        tools: { type: Array, default: function () { return GlobalConfig.toolbar.tools; } },\n        perfect: { type: Boolean, default: function () { return GlobalConfig.toolbar.perfect; } },\n        size: { type: String, default: function () { return GlobalConfig.toolbar.size || GlobalConfig.size; } },\n        className: [String, Function]\n    },\n    emits: [\n        'button-click',\n        'tool-click'\n    ],\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var xID = XEUtils.uniqueId();\n        var computeSize = useSize(props);\n        var reactData = reactive({\n            isRefresh: false,\n            columns: []\n        });\n        var refElem = ref();\n        var refCustomWrapper = ref();\n        var customStore = reactive({\n            isAll: false,\n            isIndeterminate: false,\n            activeBtn: false,\n            activeWrapper: false,\n            visible: false\n        });\n        var refMaps = {\n            refElem: refElem\n        };\n        var $xetoolbar = {\n            xID: xID,\n            props: props,\n            context: context,\n            reactData: reactData,\n            getRefMaps: function () { return refMaps; }\n        };\n        var toolbarMethods = {};\n        var $xegrid = inject('$xegrid', null);\n        var $xetable;\n        var computeRefreshOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.toolbar.refresh, props.refresh);\n        });\n        var computeImportOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.toolbar.import, props.import);\n        });\n        var computeExportOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.toolbar.export, props.export);\n        });\n        var computePrintOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.toolbar.print, props.print);\n        });\n        var computeZoomOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.toolbar.zoom, props.zoom);\n        });\n        var computeCustomOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.toolbar.custom, props.custom);\n        });\n        var checkTable = function () {\n            if ($xetable) {\n                return true;\n            }\n            errLog('vxe.error.barUnableLink');\n        };\n        var checkCustomStatus = function () {\n            var columns = reactData.columns;\n            var computeTableCustomOpts = $xetable.getComputeMaps().computeCustomOpts;\n            var tableCustomOpts = computeTableCustomOpts.value;\n            var checkMethod = tableCustomOpts.checkMethod;\n            customStore.isAll = columns.every(function (column) { return (checkMethod ? !checkMethod({ column: column }) : false) || column.visible; });\n            customStore.isIndeterminate = !customStore.isAll && columns.some(function (column) { return (!checkMethod || checkMethod({ column: column })) && (column.visible || column.halfVisible); });\n        };\n        var showCustom = function () {\n            customStore.visible = true;\n            checkCustomStatus();\n        };\n        var handleTableCustom = function () {\n            $xetable.handleCustom();\n        };\n        var closeCustom = function () {\n            var custom = props.custom;\n            var customOpts = computeCustomOpts.value;\n            if (customStore.visible) {\n                customStore.visible = false;\n                if (custom && !customOpts.immediate) {\n                    handleTableCustom();\n                }\n            }\n        };\n        var emitCustomEvent = function (type, evnt) {\n            var comp = $xegrid || $xetable;\n            comp.dispatchEvent('custom', { type: type }, evnt);\n        };\n        var confirmCustomEvent = function (evnt) {\n            closeCustom();\n            emitCustomEvent('confirm', evnt);\n        };\n        var customOpenEvent = function (evnt) {\n            if (checkTable()) {\n                if (!customStore.visible) {\n                    showCustom();\n                    emitCustomEvent('open', evnt);\n                }\n            }\n        };\n        var customColseEvent = function (evnt) {\n            if (customStore.visible) {\n                closeCustom();\n                emitCustomEvent('close', evnt);\n            }\n        };\n        var resetCustomEvent = function (evnt) {\n            $xetable.resetColumn(true);\n            closeCustom();\n            emitCustomEvent('reset', evnt);\n        };\n        var handleOptionCheck = function (column) {\n            var columns = reactData.columns;\n            var matchObj = XEUtils.findTree(columns, function (item) { return item === column; });\n            if (matchObj && matchObj.parent) {\n                var parent_1 = matchObj.parent;\n                if (parent_1.children && parent_1.children.length) {\n                    parent_1.visible = parent_1.children.every(function (column) { return column.visible; });\n                    parent_1.halfVisible = !parent_1.visible && parent_1.children.some(function (column) { return column.visible || column.halfVisible; });\n                    handleOptionCheck(parent_1);\n                }\n            }\n        };\n        var changeCheckboxOption = function (column) {\n            var isChecked = !column.visible;\n            var customOpts = computeCustomOpts.value;\n            XEUtils.eachTree([column], function (item) {\n                item.visible = isChecked;\n                item.halfVisible = false;\n            });\n            handleOptionCheck(column);\n            if (props.custom && customOpts.immediate) {\n                handleTableCustom();\n            }\n            checkCustomStatus();\n        };\n        var changeFixedOption = function (column, colFixed) {\n            var computeIsMaxFixedColumn = $xetable.getComputeMaps().computeIsMaxFixedColumn;\n            var isMaxFixedColumn = computeIsMaxFixedColumn.value;\n            if (column.fixed === colFixed) {\n                $xetable.clearColumnFixed(column);\n            }\n            else {\n                if (!isMaxFixedColumn || column.fixed) {\n                    $xetable.setColumnFixed(column, colFixed);\n                }\n            }\n        };\n        var allCustomEvent = function () {\n            var columns = reactData.columns;\n            var computeTableCustomOpts = $xetable.getComputeMaps().computeCustomOpts;\n            var tableCustomOpts = computeTableCustomOpts.value;\n            var checkMethod = tableCustomOpts.checkMethod;\n            var isAll = !customStore.isAll;\n            XEUtils.eachTree(columns, function (column) {\n                if (!checkMethod || checkMethod({ column: column })) {\n                    column.visible = isAll;\n                    column.halfVisible = false;\n                }\n            });\n            customStore.isAll = isAll;\n            checkCustomStatus();\n        };\n        var handleGlobalMousedownEvent = function (evnt) {\n            var customWrapperElem = refCustomWrapper.value;\n            if (!getEventTargetNode(evnt, customWrapperElem).flag) {\n                customColseEvent(evnt);\n            }\n        };\n        var handleGlobalBlurEvent = function (evnt) {\n            customColseEvent(evnt);\n        };\n        var handleClickSettingEvent = function (evnt) {\n            if (customStore.visible) {\n                customColseEvent(evnt);\n            }\n            else {\n                customOpenEvent(evnt);\n            }\n        };\n        var handleMouseenterSettingEvent = function (evnt) {\n            customStore.activeBtn = true;\n            customOpenEvent(evnt);\n        };\n        var handleMouseleaveSettingEvent = function (evnt) {\n            customStore.activeBtn = false;\n            setTimeout(function () {\n                if (!customStore.activeBtn && !customStore.activeWrapper) {\n                    customColseEvent(evnt);\n                }\n            }, 300);\n        };\n        var handleWrapperMouseenterEvent = function (evnt) {\n            customStore.activeWrapper = true;\n            customOpenEvent(evnt);\n        };\n        var handleWrapperMouseleaveEvent = function (evnt) {\n            customStore.activeWrapper = false;\n            setTimeout(function () {\n                if (!customStore.activeBtn && !customStore.activeWrapper) {\n                    customColseEvent(evnt);\n                }\n            }, 300);\n        };\n        var refreshEvent = function (evnt) {\n            var isRefresh = reactData.isRefresh;\n            var refreshOpts = computeRefreshOpts.value;\n            if (!isRefresh) {\n                var queryMethod = refreshOpts.queryMethod || refreshOpts.query;\n                if (queryMethod) {\n                    reactData.isRefresh = true;\n                    try {\n                        Promise.resolve(queryMethod({})).catch(function (e) { return e; }).then(function () {\n                            reactData.isRefresh = false;\n                        });\n                    }\n                    catch (e) {\n                        reactData.isRefresh = false;\n                    }\n                }\n                else if ($xegrid) {\n                    reactData.isRefresh = true;\n                    $xegrid.triggerToolbarCommitEvent({ code: refreshOpts.code || 'reload' }, evnt).catch(function (e) { return e; }).then(function () {\n                        reactData.isRefresh = false;\n                    });\n                }\n            }\n        };\n        var zoomEvent = function (evnt) {\n            if ($xegrid) {\n                $xegrid.triggerZoomEvent(evnt);\n            }\n        };\n        var btnEvent = function (evnt, item) {\n            var code = item.code;\n            if (code) {\n                if ($xegrid) {\n                    $xegrid.triggerToolbarBtnEvent(item, evnt);\n                }\n                else {\n                    var gCommandOpts = VXETable.commands.get(code);\n                    var params = { code: code, button: item, $table: $xetable, $grid: $xegrid, $event: evnt };\n                    if (gCommandOpts) {\n                        if (gCommandOpts.commandMethod) {\n                            gCommandOpts.commandMethod(params);\n                        }\n                        else {\n                            if (process.env.NODE_ENV === 'development') {\n                                errLog('vxe.error.notCommands', [code]);\n                            }\n                        }\n                    }\n                    $xetoolbar.dispatchEvent('button-click', params, evnt);\n                }\n            }\n        };\n        var tolEvent = function (evnt, item) {\n            var code = item.code;\n            if (code) {\n                if ($xegrid) {\n                    $xegrid.triggerToolbarTolEvent(item, evnt);\n                }\n                else {\n                    var gCommandOpts = VXETable.commands.get(code);\n                    var params = { code: code, tool: item, $table: $xetable, $grid: $xegrid, $event: evnt };\n                    if (gCommandOpts) {\n                        if (gCommandOpts.commandMethod) {\n                            gCommandOpts.commandMethod(params);\n                        }\n                        else {\n                            if (process.env.NODE_ENV === 'development') {\n                                errLog('vxe.error.notCommands', [code]);\n                            }\n                        }\n                    }\n                    $xetoolbar.dispatchEvent('tool-click', params, evnt);\n                }\n            }\n        };\n        var importEvent = function () {\n            if (checkTable()) {\n                $xetable.openImport();\n            }\n        };\n        var exportEvent = function () {\n            if (checkTable()) {\n                $xetable.openExport();\n            }\n        };\n        var printEvent = function () {\n            if (checkTable()) {\n                $xetable.openPrint();\n            }\n        };\n        var renderDropdowns = function (item, isBtn) {\n            var dropdowns = item.dropdowns;\n            var downVNs = [];\n            if (dropdowns) {\n                return dropdowns.map(function (child, index) {\n                    if (child.visible === false) {\n                        return createCommentVNode();\n                    }\n                    return h(resolveComponent('vxe-button'), {\n                        key: index,\n                        disabled: child.disabled,\n                        loading: child.loading,\n                        type: child.type,\n                        icon: child.icon,\n                        circle: child.circle,\n                        round: child.round,\n                        status: child.status,\n                        content: child.name,\n                        onClick: function (evnt) { return isBtn ? btnEvent(evnt, child) : tolEvent(evnt, child); }\n                    });\n                });\n            }\n            return downVNs;\n        };\n        /**\n         * 渲染按钮\n         */\n        var renderBtns = function () {\n            var buttons = props.buttons;\n            var buttonsSlot = slots.buttons;\n            if (buttonsSlot) {\n                return getSlotVNs(buttonsSlot({ $grid: $xegrid, $table: $xetable }));\n            }\n            var btnVNs = [];\n            if (buttons) {\n                buttons.forEach(function (item) {\n                    var dropdowns = item.dropdowns, buttonRender = item.buttonRender;\n                    if (item.visible !== false) {\n                        var compConf = buttonRender ? VXETable.renderer.get(buttonRender.name) : null;\n                        if (buttonRender && compConf && compConf.renderToolbarButton) {\n                            var toolbarButtonClassName = compConf.toolbarButtonClassName;\n                            var params = { $grid: $xegrid, $table: $xetable, button: item };\n                            btnVNs.push(h('span', {\n                                class: ['vxe-button--item', toolbarButtonClassName ? (XEUtils.isFunction(toolbarButtonClassName) ? toolbarButtonClassName(params) : toolbarButtonClassName) : '']\n                            }, getSlotVNs(compConf.renderToolbarButton(buttonRender, params))));\n                        }\n                        else {\n                            btnVNs.push(h(resolveComponent('vxe-button'), {\n                                disabled: item.disabled,\n                                loading: item.loading,\n                                type: item.type,\n                                icon: item.icon,\n                                circle: item.circle,\n                                round: item.round,\n                                status: item.status,\n                                content: item.name,\n                                destroyOnClose: item.destroyOnClose,\n                                placement: item.placement,\n                                transfer: item.transfer,\n                                onClick: function (evnt) { return btnEvent(evnt, item); }\n                            }, dropdowns && dropdowns.length ? {\n                                dropdowns: function () { return renderDropdowns(item, true); }\n                            } : {}));\n                        }\n                    }\n                });\n            }\n            return btnVNs;\n        };\n        /**\n         * 渲染右侧工具\n         */\n        var renderRightTools = function () {\n            var tools = props.tools;\n            var toolsSlot = slots.tools;\n            if (toolsSlot) {\n                return getSlotVNs(toolsSlot({ $grid: $xegrid, $table: $xetable }));\n            }\n            var btnVNs = [];\n            if (tools) {\n                tools.forEach(function (item) {\n                    var dropdowns = item.dropdowns, toolRender = item.toolRender;\n                    if (item.visible !== false) {\n                        var compConf = toolRender ? VXETable.renderer.get(toolRender.name) : null;\n                        if (toolRender && compConf && compConf.renderToolbarTool) {\n                            var toolbarToolClassName = compConf.toolbarToolClassName;\n                            var params = { $grid: $xegrid, $table: $xetable, tool: item };\n                            btnVNs.push(h('span', {\n                                class: ['vxe-tool--item', toolbarToolClassName ? (XEUtils.isFunction(toolbarToolClassName) ? toolbarToolClassName(params) : toolbarToolClassName) : '']\n                            }, getSlotVNs(compConf.renderToolbarTool(toolRender, params))));\n                        }\n                        else {\n                            btnVNs.push(h(resolveComponent('vxe-button'), {\n                                disabled: item.disabled,\n                                loading: item.loading,\n                                type: item.type,\n                                icon: item.icon,\n                                circle: item.circle,\n                                round: item.round,\n                                status: item.status,\n                                content: item.name,\n                                destroyOnClose: item.destroyOnClose,\n                                placement: item.placement,\n                                transfer: item.transfer,\n                                onClick: function (evnt) { return tolEvent(evnt, item); }\n                            }, dropdowns && dropdowns.length ? {\n                                dropdowns: function () { return renderDropdowns(item, false); }\n                            } : {}));\n                        }\n                    }\n                });\n            }\n            return btnVNs;\n        };\n        var renderCustoms = function () {\n            var columns = reactData.columns;\n            var customOpts = computeCustomOpts.value;\n            var isMaxFixedColumn = true;\n            var colVNs = [];\n            var customBtnOns = {};\n            var customWrapperOns = {};\n            var checkMethod;\n            if ($xetable) {\n                var _a = $xetable.getComputeMaps(), computeTableCustomOpts = _a.computeCustomOpts, computeIsMaxFixedColumn = _a.computeIsMaxFixedColumn;\n                var tableCustomOpts = computeTableCustomOpts.value;\n                checkMethod = tableCustomOpts.checkMethod;\n                isMaxFixedColumn = computeIsMaxFixedColumn.value;\n            }\n            if (customOpts.trigger === 'manual') {\n                // 手动触发\n            }\n            else if (customOpts.trigger === 'hover') {\n                // hover 触发\n                customBtnOns.onMouseenter = handleMouseenterSettingEvent;\n                customBtnOns.onMouseleave = handleMouseleaveSettingEvent;\n                customWrapperOns.onMouseenter = handleWrapperMouseenterEvent;\n                customWrapperOns.onMouseleave = handleWrapperMouseleaveEvent;\n            }\n            else {\n                // 点击触发\n                customBtnOns.onClick = handleClickSettingEvent;\n            }\n            XEUtils.eachTree(columns, function (column, index, items, path, parent) {\n                var colTitle = formatText(column.getTitle(), 1);\n                var colKey = column.getKey();\n                var isColGroup = column.children && column.children.length;\n                var isDisabled = checkMethod ? !checkMethod({ column: column }) : false;\n                if (isColGroup || colKey) {\n                    var isChecked = column.visible;\n                    var isIndeterminate = column.halfVisible;\n                    colVNs.push(h('li', {\n                        class: ['vxe-custom--option', \"level--\".concat(column.level), {\n                                'is--group': isColGroup\n                            }]\n                    }, [\n                        h('div', {\n                            title: colTitle,\n                            class: ['vxe-custom--checkbox-option', {\n                                    'is--checked': isChecked,\n                                    'is--indeterminate': isIndeterminate,\n                                    'is--disabled': isDisabled\n                                }],\n                            onClick: function () {\n                                if (!isDisabled) {\n                                    changeCheckboxOption(column);\n                                }\n                            }\n                        }, [\n                            h('span', {\n                                class: ['vxe-checkbox--icon', isIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]\n                            }),\n                            h('span', {\n                                class: 'vxe-checkbox--label'\n                            }, colTitle)\n                        ]),\n                        !parent && customOpts.allowFixed ? h('div', {\n                            class: 'vxe-custom--fixed-option'\n                        }, [\n                            h('span', {\n                                class: ['vxe-custom--fixed-left-option', column.fixed === 'left' ? GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_LEFT_ACTIVED : GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_LEFT, {\n                                        'is--checked': column.fixed === 'left',\n                                        'is--disabled': isMaxFixedColumn && !column.fixed\n                                    }],\n                                title: GlobalConfig.i18n(column.fixed === 'left' ? 'vxe.toolbar.cancelfixed' : 'vxe.toolbar.fixedLeft'),\n                                onClick: function () {\n                                    changeFixedOption(column, 'left');\n                                }\n                            }),\n                            h('span', {\n                                class: ['vxe-custom--fixed-right-option', column.fixed === 'right' ? GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_RIGHT_ACTIVED : GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_RIGHT, {\n                                        'is--checked': column.fixed === 'right',\n                                        'is--disabled': isMaxFixedColumn && !column.fixed\n                                    }],\n                                title: GlobalConfig.i18n(column.fixed === 'right' ? 'vxe.toolbar.cancelfixed' : 'vxe.toolbar.fixedRight'),\n                                onClick: function () {\n                                    changeFixedOption(column, 'right');\n                                }\n                            })\n                        ]) : null\n                    ]));\n                }\n            });\n            var isAllChecked = customStore.isAll;\n            var isAllIndeterminate = customStore.isIndeterminate;\n            return h('div', {\n                class: ['vxe-custom--wrapper', {\n                        'is--active': customStore.visible\n                    }],\n                ref: refCustomWrapper\n            }, [\n                h(resolveComponent('vxe-button'), __assign({ circle: true, icon: customOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_CUSTOM, title: GlobalConfig.i18n('vxe.toolbar.custom') }, customBtnOns)),\n                h('div', {\n                    class: 'vxe-custom--option-wrapper'\n                }, [\n                    h('ul', {\n                        class: 'vxe-custom--header'\n                    }, [\n                        h('li', {\n                            class: 'vxe-custom--option'\n                        }, [\n                            h('div', {\n                                class: ['vxe-custom--checkbox-option', {\n                                        'is--checked': isAllChecked,\n                                        'is--indeterminate': isAllIndeterminate\n                                    }],\n                                title: GlobalConfig.i18n('vxe.table.allTitle'),\n                                onClick: allCustomEvent\n                            }, [\n                                h('span', {\n                                    class: ['vxe-checkbox--icon', isAllIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]\n                                }),\n                                h('span', {\n                                    class: 'vxe-checkbox--label'\n                                }, GlobalConfig.i18n('vxe.toolbar.customAll'))\n                            ])\n                        ])\n                    ]),\n                    h('ul', __assign({ class: 'vxe-custom--body' }, customWrapperOns), colVNs),\n                    customOpts.showFooter || customOpts.isFooter ? h('div', {\n                        class: 'vxe-custom--footer'\n                    }, [\n                        h('button', {\n                            class: 'btn--reset',\n                            onClick: resetCustomEvent\n                        }, customOpts.resetButtonText || GlobalConfig.i18n('vxe.toolbar.customRestore')),\n                        h('button', {\n                            class: 'btn--confirm',\n                            onClick: confirmCustomEvent\n                        }, customOpts.confirmButtonText || GlobalConfig.i18n('vxe.toolbar.customConfirm'))\n                    ]) : null\n                ])\n            ]);\n        };\n        toolbarMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $toolbar: $xetoolbar, $event: evnt }, params));\n            },\n            syncUpdate: function (params) {\n                var collectColumn = params.collectColumn;\n                $xetable = params.$table;\n                reactData.columns = collectColumn;\n            }\n        };\n        Object.assign($xetoolbar, toolbarMethods);\n        onMounted(function () {\n            GlobalEvent.on($xetoolbar, 'mousedown', handleGlobalMousedownEvent);\n            GlobalEvent.on($xetoolbar, 'blur', handleGlobalBlurEvent);\n        });\n        onUnmounted(function () {\n            GlobalEvent.off($xetoolbar, 'mousedown');\n            GlobalEvent.off($xetoolbar, 'blur');\n        });\n        nextTick(function () {\n            var refresh = props.refresh;\n            var refreshOpts = computeRefreshOpts.value;\n            var queryMethod = refreshOpts.queryMethod || refreshOpts.query;\n            if (refresh && !$xegrid && !queryMethod) {\n                warnLog('vxe.error.notFunc', ['queryMethod']);\n            }\n            var customOpts = computeCustomOpts.value;\n            if (process.env.NODE_ENV === 'development') {\n                if (customOpts.isFooter) {\n                    warnLog('vxe.error.notValidators', ['custom.isFooter', 'custom.showFooter']);\n                }\n            }\n        });\n        var renderVN = function () {\n            var _a;\n            var perfect = props.perfect, loading = props.loading, refresh = props.refresh, zoom = props.zoom, custom = props.custom, className = props.className;\n            var vSize = computeSize.value;\n            var refreshOpts = computeRefreshOpts.value;\n            var importOpts = computeImportOpts.value;\n            var exportOpts = computeExportOpts.value;\n            var printOpts = computePrintOpts.value;\n            var zoomOpts = computeZoomOpts.value;\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-toolbar', className ? (XEUtils.isFunction(className) ? className({ $toolbar: $xetoolbar }) : className) : '', (_a = {},\n                        _a[\"size--\".concat(vSize)] = vSize,\n                        _a['is--perfect'] = perfect,\n                        _a['is--loading'] = loading,\n                        _a)]\n            }, [\n                h('div', {\n                    class: 'vxe-buttons--wrapper'\n                }, renderBtns()),\n                h('div', {\n                    class: 'vxe-tools--wrapper'\n                }, renderRightTools()),\n                h('div', {\n                    class: 'vxe-tools--operate'\n                }, [\n                    props.import ? h(resolveComponent('vxe-button'), {\n                        circle: true,\n                        icon: importOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_IMPORT,\n                        title: GlobalConfig.i18n('vxe.toolbar.import'),\n                        onClick: importEvent\n                    }) : createCommentVNode(),\n                    props.export ? h(resolveComponent('vxe-button'), {\n                        circle: true,\n                        icon: exportOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_EXPORT,\n                        title: GlobalConfig.i18n('vxe.toolbar.export'),\n                        onClick: exportEvent\n                    }) : createCommentVNode(),\n                    props.print ? h(resolveComponent('vxe-button'), {\n                        circle: true,\n                        icon: printOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_PRINT,\n                        title: GlobalConfig.i18n('vxe.toolbar.print'),\n                        onClick: printEvent\n                    }) : createCommentVNode(),\n                    refresh ? h(resolveComponent('vxe-button'), {\n                        circle: true,\n                        icon: reactData.isRefresh ? (refreshOpts.iconLoading || GlobalConfig.icon.TOOLBAR_TOOLS_REFRESH_LOADING) : (refreshOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_REFRESH),\n                        title: GlobalConfig.i18n('vxe.toolbar.refresh'),\n                        onClick: refreshEvent\n                    }) : createCommentVNode(),\n                    zoom && $xegrid ? h(resolveComponent('vxe-button'), {\n                        circle: true,\n                        icon: $xegrid.isMaximized() ? (zoomOpts.iconOut || GlobalConfig.icon.TOOLBAR_TOOLS_MINIMIZE) : (zoomOpts.iconIn || GlobalConfig.icon.TOOLBAR_TOOLS_FULLSCREEN),\n                        title: GlobalConfig.i18n(\"vxe.toolbar.zoom\".concat($xegrid.isMaximized() ? 'Out' : 'In')),\n                        onClick: zoomEvent\n                    }) : createCommentVNode(),\n                    custom ? renderCustoms() : createCommentVNode()\n                ])\n            ]);\n        };\n        $xetoolbar.renderVN = renderVN;\n        return $xetoolbar;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767784,
      "end": 1714699767784,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767784,
      "end": 1714699767784,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "var __assign = function() {\n  __assign = Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s)\n        if (Object.prototype.hasOwnProperty.call(s, p))\n          t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { defineComponent, h, ref, computed, inject, createCommentVNode, resolveComponent, reactive, nextTick, onMounted, onUnmounted } from \"vue\";\nimport XEUtils from \"xe-utils\";\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport { VXETable } from \"../../v-x-e-table\";\nimport { useSize } from \"../../hooks/size\";\nimport { getEventTargetNode } from \"../../tools/dom\";\nimport { formatText } from \"../../tools/utils\";\nimport { warnLog, errLog } from \"../../tools/log\";\nimport { GlobalEvent } from \"../../tools/event\";\nimport { getSlotVNs } from \"../../tools/vn\";\nexport default defineComponent({\n  name: \"VxeToolbar\",\n  props: {\n    loading: Boolean,\n    refresh: [Boolean, Object],\n    import: [Boolean, Object],\n    export: [Boolean, Object],\n    print: [Boolean, Object],\n    zoom: [Boolean, Object],\n    custom: [Boolean, Object],\n    buttons: { type: Array, default: function() {\n      return GlobalConfig.toolbar.buttons;\n    } },\n    tools: { type: Array, default: function() {\n      return GlobalConfig.toolbar.tools;\n    } },\n    perfect: { type: Boolean, default: function() {\n      return GlobalConfig.toolbar.perfect;\n    } },\n    size: { type: String, default: function() {\n      return GlobalConfig.toolbar.size || GlobalConfig.size;\n    } },\n    className: [String, Function]\n  },\n  emits: [\n    \"button-click\",\n    \"tool-click\"\n  ],\n  setup: function(props, context) {\n    var slots = context.slots, emit = context.emit;\n    var xID = XEUtils.uniqueId();\n    var computeSize = useSize(props);\n    var reactData = reactive({\n      isRefresh: false,\n      columns: []\n    });\n    var refElem = ref();\n    var refCustomWrapper = ref();\n    var customStore = reactive({\n      isAll: false,\n      isIndeterminate: false,\n      activeBtn: false,\n      activeWrapper: false,\n      visible: false\n    });\n    var refMaps = {\n      refElem\n    };\n    var $xetoolbar = {\n      xID,\n      props,\n      context,\n      reactData,\n      getRefMaps: function() {\n        return refMaps;\n      }\n    };\n    var toolbarMethods = {};\n    var $xegrid = inject(\"$xegrid\", null);\n    var $xetable;\n    var computeRefreshOpts = computed(function() {\n      return Object.assign({}, GlobalConfig.toolbar.refresh, props.refresh);\n    });\n    var computeImportOpts = computed(function() {\n      return Object.assign({}, GlobalConfig.toolbar.import, props.import);\n    });\n    var computeExportOpts = computed(function() {\n      return Object.assign({}, GlobalConfig.toolbar.export, props.export);\n    });\n    var computePrintOpts = computed(function() {\n      return Object.assign({}, GlobalConfig.toolbar.print, props.print);\n    });\n    var computeZoomOpts = computed(function() {\n      return Object.assign({}, GlobalConfig.toolbar.zoom, props.zoom);\n    });\n    var computeCustomOpts = computed(function() {\n      return Object.assign({}, GlobalConfig.toolbar.custom, props.custom);\n    });\n    var checkTable = function() {\n      if ($xetable) {\n        return true;\n      }\n      errLog(\"vxe.error.barUnableLink\");\n    };\n    var checkCustomStatus = function() {\n      var columns = reactData.columns;\n      var computeTableCustomOpts = $xetable.getComputeMaps().computeCustomOpts;\n      var tableCustomOpts = computeTableCustomOpts.value;\n      var checkMethod = tableCustomOpts.checkMethod;\n      customStore.isAll = columns.every(function(column) {\n        return (checkMethod ? !checkMethod({ column }) : false) || column.visible;\n      });\n      customStore.isIndeterminate = !customStore.isAll && columns.some(function(column) {\n        return (!checkMethod || checkMethod({ column })) && (column.visible || column.halfVisible);\n      });\n    };\n    var showCustom = function() {\n      customStore.visible = true;\n      checkCustomStatus();\n    };\n    var handleTableCustom = function() {\n      $xetable.handleCustom();\n    };\n    var closeCustom = function() {\n      var custom = props.custom;\n      var customOpts = computeCustomOpts.value;\n      if (customStore.visible) {\n        customStore.visible = false;\n        if (custom && !customOpts.immediate) {\n          handleTableCustom();\n        }\n      }\n    };\n    var emitCustomEvent = function(type, evnt) {\n      var comp = $xegrid || $xetable;\n      comp.dispatchEvent(\"custom\", { type }, evnt);\n    };\n    var confirmCustomEvent = function(evnt) {\n      closeCustom();\n      emitCustomEvent(\"confirm\", evnt);\n    };\n    var customOpenEvent = function(evnt) {\n      if (checkTable()) {\n        if (!customStore.visible) {\n          showCustom();\n          emitCustomEvent(\"open\", evnt);\n        }\n      }\n    };\n    var customColseEvent = function(evnt) {\n      if (customStore.visible) {\n        closeCustom();\n        emitCustomEvent(\"close\", evnt);\n      }\n    };\n    var resetCustomEvent = function(evnt) {\n      $xetable.resetColumn(true);\n      closeCustom();\n      emitCustomEvent(\"reset\", evnt);\n    };\n    var handleOptionCheck = function(column) {\n      var columns = reactData.columns;\n      var matchObj = XEUtils.findTree(columns, function(item) {\n        return item === column;\n      });\n      if (matchObj && matchObj.parent) {\n        var parent_1 = matchObj.parent;\n        if (parent_1.children && parent_1.children.length) {\n          parent_1.visible = parent_1.children.every(function(column2) {\n            return column2.visible;\n          });\n          parent_1.halfVisible = !parent_1.visible && parent_1.children.some(function(column2) {\n            return column2.visible || column2.halfVisible;\n          });\n          handleOptionCheck(parent_1);\n        }\n      }\n    };\n    var changeCheckboxOption = function(column) {\n      var isChecked = !column.visible;\n      var customOpts = computeCustomOpts.value;\n      XEUtils.eachTree([column], function(item) {\n        item.visible = isChecked;\n        item.halfVisible = false;\n      });\n      handleOptionCheck(column);\n      if (props.custom && customOpts.immediate) {\n        handleTableCustom();\n      }\n      checkCustomStatus();\n    };\n    var changeFixedOption = function(column, colFixed) {\n      var computeIsMaxFixedColumn = $xetable.getComputeMaps().computeIsMaxFixedColumn;\n      var isMaxFixedColumn = computeIsMaxFixedColumn.value;\n      if (column.fixed === colFixed) {\n        $xetable.clearColumnFixed(column);\n      } else {\n        if (!isMaxFixedColumn || column.fixed) {\n          $xetable.setColumnFixed(column, colFixed);\n        }\n      }\n    };\n    var allCustomEvent = function() {\n      var columns = reactData.columns;\n      var computeTableCustomOpts = $xetable.getComputeMaps().computeCustomOpts;\n      var tableCustomOpts = computeTableCustomOpts.value;\n      var checkMethod = tableCustomOpts.checkMethod;\n      var isAll = !customStore.isAll;\n      XEUtils.eachTree(columns, function(column) {\n        if (!checkMethod || checkMethod({ column })) {\n          column.visible = isAll;\n          column.halfVisible = false;\n        }\n      });\n      customStore.isAll = isAll;\n      checkCustomStatus();\n    };\n    var handleGlobalMousedownEvent = function(evnt) {\n      var customWrapperElem = refCustomWrapper.value;\n      if (!getEventTargetNode(evnt, customWrapperElem).flag) {\n        customColseEvent(evnt);\n      }\n    };\n    var handleGlobalBlurEvent = function(evnt) {\n      customColseEvent(evnt);\n    };\n    var handleClickSettingEvent = function(evnt) {\n      if (customStore.visible) {\n        customColseEvent(evnt);\n      } else {\n        customOpenEvent(evnt);\n      }\n    };\n    var handleMouseenterSettingEvent = function(evnt) {\n      customStore.activeBtn = true;\n      customOpenEvent(evnt);\n    };\n    var handleMouseleaveSettingEvent = function(evnt) {\n      customStore.activeBtn = false;\n      setTimeout(function() {\n        if (!customStore.activeBtn && !customStore.activeWrapper) {\n          customColseEvent(evnt);\n        }\n      }, 300);\n    };\n    var handleWrapperMouseenterEvent = function(evnt) {\n      customStore.activeWrapper = true;\n      customOpenEvent(evnt);\n    };\n    var handleWrapperMouseleaveEvent = function(evnt) {\n      customStore.activeWrapper = false;\n      setTimeout(function() {\n        if (!customStore.activeBtn && !customStore.activeWrapper) {\n          customColseEvent(evnt);\n        }\n      }, 300);\n    };\n    var refreshEvent = function(evnt) {\n      var isRefresh = reactData.isRefresh;\n      var refreshOpts = computeRefreshOpts.value;\n      if (!isRefresh) {\n        var queryMethod = refreshOpts.queryMethod || refreshOpts.query;\n        if (queryMethod) {\n          reactData.isRefresh = true;\n          try {\n            Promise.resolve(queryMethod({})).catch(function(e) {\n              return e;\n            }).then(function() {\n              reactData.isRefresh = false;\n            });\n          } catch (e) {\n            reactData.isRefresh = false;\n          }\n        } else if ($xegrid) {\n          reactData.isRefresh = true;\n          $xegrid.triggerToolbarCommitEvent({ code: refreshOpts.code || \"reload\" }, evnt).catch(function(e) {\n            return e;\n          }).then(function() {\n            reactData.isRefresh = false;\n          });\n        }\n      }\n    };\n    var zoomEvent = function(evnt) {\n      if ($xegrid) {\n        $xegrid.triggerZoomEvent(evnt);\n      }\n    };\n    var btnEvent = function(evnt, item) {\n      var code = item.code;\n      if (code) {\n        if ($xegrid) {\n          $xegrid.triggerToolbarBtnEvent(item, evnt);\n        } else {\n          var gCommandOpts = VXETable.commands.get(code);\n          var params = { code, button: item, $table: $xetable, $grid: $xegrid, $event: evnt };\n          if (gCommandOpts) {\n            if (gCommandOpts.commandMethod) {\n              gCommandOpts.commandMethod(params);\n            } else {\n              if (false) {\n                errLog(\"vxe.error.notCommands\", [code]);\n              }\n            }\n          }\n          $xetoolbar.dispatchEvent(\"button-click\", params, evnt);\n        }\n      }\n    };\n    var tolEvent = function(evnt, item) {\n      var code = item.code;\n      if (code) {\n        if ($xegrid) {\n          $xegrid.triggerToolbarTolEvent(item, evnt);\n        } else {\n          var gCommandOpts = VXETable.commands.get(code);\n          var params = { code, tool: item, $table: $xetable, $grid: $xegrid, $event: evnt };\n          if (gCommandOpts) {\n            if (gCommandOpts.commandMethod) {\n              gCommandOpts.commandMethod(params);\n            } else {\n              if (false) {\n                errLog(\"vxe.error.notCommands\", [code]);\n              }\n            }\n          }\n          $xetoolbar.dispatchEvent(\"tool-click\", params, evnt);\n        }\n      }\n    };\n    var importEvent = function() {\n      if (checkTable()) {\n        $xetable.openImport();\n      }\n    };\n    var exportEvent = function() {\n      if (checkTable()) {\n        $xetable.openExport();\n      }\n    };\n    var printEvent = function() {\n      if (checkTable()) {\n        $xetable.openPrint();\n      }\n    };\n    var renderDropdowns = function(item, isBtn) {\n      var dropdowns = item.dropdowns;\n      var downVNs = [];\n      if (dropdowns) {\n        return dropdowns.map(function(child, index) {\n          if (child.visible === false) {\n            return createCommentVNode();\n          }\n          return h(resolveComponent(\"vxe-button\"), {\n            key: index,\n            disabled: child.disabled,\n            loading: child.loading,\n            type: child.type,\n            icon: child.icon,\n            circle: child.circle,\n            round: child.round,\n            status: child.status,\n            content: child.name,\n            onClick: function(evnt) {\n              return isBtn ? btnEvent(evnt, child) : tolEvent(evnt, child);\n            }\n          });\n        });\n      }\n      return downVNs;\n    };\n    var renderBtns = function() {\n      var buttons = props.buttons;\n      var buttonsSlot = slots.buttons;\n      if (buttonsSlot) {\n        return getSlotVNs(buttonsSlot({ $grid: $xegrid, $table: $xetable }));\n      }\n      var btnVNs = [];\n      if (buttons) {\n        buttons.forEach(function(item) {\n          var dropdowns = item.dropdowns, buttonRender = item.buttonRender;\n          if (item.visible !== false) {\n            var compConf = buttonRender ? VXETable.renderer.get(buttonRender.name) : null;\n            if (buttonRender && compConf && compConf.renderToolbarButton) {\n              var toolbarButtonClassName = compConf.toolbarButtonClassName;\n              var params = { $grid: $xegrid, $table: $xetable, button: item };\n              btnVNs.push(h(\"span\", {\n                class: [\"vxe-button--item\", toolbarButtonClassName ? XEUtils.isFunction(toolbarButtonClassName) ? toolbarButtonClassName(params) : toolbarButtonClassName : \"\"]\n              }, getSlotVNs(compConf.renderToolbarButton(buttonRender, params))));\n            } else {\n              btnVNs.push(h(resolveComponent(\"vxe-button\"), {\n                disabled: item.disabled,\n                loading: item.loading,\n                type: item.type,\n                icon: item.icon,\n                circle: item.circle,\n                round: item.round,\n                status: item.status,\n                content: item.name,\n                destroyOnClose: item.destroyOnClose,\n                placement: item.placement,\n                transfer: item.transfer,\n                onClick: function(evnt) {\n                  return btnEvent(evnt, item);\n                }\n              }, dropdowns && dropdowns.length ? {\n                dropdowns: function() {\n                  return renderDropdowns(item, true);\n                }\n              } : {}));\n            }\n          }\n        });\n      }\n      return btnVNs;\n    };\n    var renderRightTools = function() {\n      var tools = props.tools;\n      var toolsSlot = slots.tools;\n      if (toolsSlot) {\n        return getSlotVNs(toolsSlot({ $grid: $xegrid, $table: $xetable }));\n      }\n      var btnVNs = [];\n      if (tools) {\n        tools.forEach(function(item) {\n          var dropdowns = item.dropdowns, toolRender = item.toolRender;\n          if (item.visible !== false) {\n            var compConf = toolRender ? VXETable.renderer.get(toolRender.name) : null;\n            if (toolRender && compConf && compConf.renderToolbarTool) {\n              var toolbarToolClassName = compConf.toolbarToolClassName;\n              var params = { $grid: $xegrid, $table: $xetable, tool: item };\n              btnVNs.push(h(\"span\", {\n                class: [\"vxe-tool--item\", toolbarToolClassName ? XEUtils.isFunction(toolbarToolClassName) ? toolbarToolClassName(params) : toolbarToolClassName : \"\"]\n              }, getSlotVNs(compConf.renderToolbarTool(toolRender, params))));\n            } else {\n              btnVNs.push(h(resolveComponent(\"vxe-button\"), {\n                disabled: item.disabled,\n                loading: item.loading,\n                type: item.type,\n                icon: item.icon,\n                circle: item.circle,\n                round: item.round,\n                status: item.status,\n                content: item.name,\n                destroyOnClose: item.destroyOnClose,\n                placement: item.placement,\n                transfer: item.transfer,\n                onClick: function(evnt) {\n                  return tolEvent(evnt, item);\n                }\n              }, dropdowns && dropdowns.length ? {\n                dropdowns: function() {\n                  return renderDropdowns(item, false);\n                }\n              } : {}));\n            }\n          }\n        });\n      }\n      return btnVNs;\n    };\n    var renderCustoms = function() {\n      var columns = reactData.columns;\n      var customOpts = computeCustomOpts.value;\n      var isMaxFixedColumn = true;\n      var colVNs = [];\n      var customBtnOns = {};\n      var customWrapperOns = {};\n      var checkMethod;\n      if ($xetable) {\n        var _a = $xetable.getComputeMaps(), computeTableCustomOpts = _a.computeCustomOpts, computeIsMaxFixedColumn = _a.computeIsMaxFixedColumn;\n        var tableCustomOpts = computeTableCustomOpts.value;\n        checkMethod = tableCustomOpts.checkMethod;\n        isMaxFixedColumn = computeIsMaxFixedColumn.value;\n      }\n      if (customOpts.trigger === \"manual\") {\n      } else if (customOpts.trigger === \"hover\") {\n        customBtnOns.onMouseenter = handleMouseenterSettingEvent;\n        customBtnOns.onMouseleave = handleMouseleaveSettingEvent;\n        customWrapperOns.onMouseenter = handleWrapperMouseenterEvent;\n        customWrapperOns.onMouseleave = handleWrapperMouseleaveEvent;\n      } else {\n        customBtnOns.onClick = handleClickSettingEvent;\n      }\n      XEUtils.eachTree(columns, function(column, index, items, path, parent) {\n        var colTitle = formatText(column.getTitle(), 1);\n        var colKey = column.getKey();\n        var isColGroup = column.children && column.children.length;\n        var isDisabled = checkMethod ? !checkMethod({ column }) : false;\n        if (isColGroup || colKey) {\n          var isChecked = column.visible;\n          var isIndeterminate = column.halfVisible;\n          colVNs.push(h(\"li\", {\n            class: [\"vxe-custom--option\", \"level--\".concat(column.level), {\n              \"is--group\": isColGroup\n            }]\n          }, [\n            h(\"div\", {\n              title: colTitle,\n              class: [\"vxe-custom--checkbox-option\", {\n                \"is--checked\": isChecked,\n                \"is--indeterminate\": isIndeterminate,\n                \"is--disabled\": isDisabled\n              }],\n              onClick: function() {\n                if (!isDisabled) {\n                  changeCheckboxOption(column);\n                }\n              }\n            }, [\n              h(\"span\", {\n                class: [\"vxe-checkbox--icon\", isIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED]\n              }),\n              h(\"span\", {\n                class: \"vxe-checkbox--label\"\n              }, colTitle)\n            ]),\n            !parent && customOpts.allowFixed ? h(\"div\", {\n              class: \"vxe-custom--fixed-option\"\n            }, [\n              h(\"span\", {\n                class: [\"vxe-custom--fixed-left-option\", column.fixed === \"left\" ? GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_LEFT_ACTIVED : GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_LEFT, {\n                  \"is--checked\": column.fixed === \"left\",\n                  \"is--disabled\": isMaxFixedColumn && !column.fixed\n                }],\n                title: GlobalConfig.i18n(column.fixed === \"left\" ? \"vxe.toolbar.cancelfixed\" : \"vxe.toolbar.fixedLeft\"),\n                onClick: function() {\n                  changeFixedOption(column, \"left\");\n                }\n              }),\n              h(\"span\", {\n                class: [\"vxe-custom--fixed-right-option\", column.fixed === \"right\" ? GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_RIGHT_ACTIVED : GlobalConfig.icon.TOOLBAR_TOOLS_FIXED_RIGHT, {\n                  \"is--checked\": column.fixed === \"right\",\n                  \"is--disabled\": isMaxFixedColumn && !column.fixed\n                }],\n                title: GlobalConfig.i18n(column.fixed === \"right\" ? \"vxe.toolbar.cancelfixed\" : \"vxe.toolbar.fixedRight\"),\n                onClick: function() {\n                  changeFixedOption(column, \"right\");\n                }\n              })\n            ]) : null\n          ]));\n        }\n      });\n      var isAllChecked = customStore.isAll;\n      var isAllIndeterminate = customStore.isIndeterminate;\n      return h(\"div\", {\n        class: [\"vxe-custom--wrapper\", {\n          \"is--active\": customStore.visible\n        }],\n        ref: refCustomWrapper\n      }, [\n        h(resolveComponent(\"vxe-button\"), __assign({ circle: true, icon: customOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_CUSTOM, title: GlobalConfig.i18n(\"vxe.toolbar.custom\") }, customBtnOns)),\n        h(\"div\", {\n          class: \"vxe-custom--option-wrapper\"\n        }, [\n          h(\"ul\", {\n            class: \"vxe-custom--header\"\n          }, [\n            h(\"li\", {\n              class: \"vxe-custom--option\"\n            }, [\n              h(\"div\", {\n                class: [\"vxe-custom--checkbox-option\", {\n                  \"is--checked\": isAllChecked,\n                  \"is--indeterminate\": isAllIndeterminate\n                }],\n                title: GlobalConfig.i18n(\"vxe.table.allTitle\"),\n                onClick: allCustomEvent\n              }, [\n                h(\"span\", {\n                  class: [\"vxe-checkbox--icon\", isAllIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : isAllChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED]\n                }),\n                h(\"span\", {\n                  class: \"vxe-checkbox--label\"\n                }, GlobalConfig.i18n(\"vxe.toolbar.customAll\"))\n              ])\n            ])\n          ]),\n          h(\"ul\", __assign({ class: \"vxe-custom--body\" }, customWrapperOns), colVNs),\n          customOpts.showFooter || customOpts.isFooter ? h(\"div\", {\n            class: \"vxe-custom--footer\"\n          }, [\n            h(\"button\", {\n              class: \"btn--reset\",\n              onClick: resetCustomEvent\n            }, customOpts.resetButtonText || GlobalConfig.i18n(\"vxe.toolbar.customRestore\")),\n            h(\"button\", {\n              class: \"btn--confirm\",\n              onClick: confirmCustomEvent\n            }, customOpts.confirmButtonText || GlobalConfig.i18n(\"vxe.toolbar.customConfirm\"))\n          ]) : null\n        ])\n      ]);\n    };\n    toolbarMethods = {\n      dispatchEvent: function(type, params, evnt) {\n        emit(type, Object.assign({ $toolbar: $xetoolbar, $event: evnt }, params));\n      },\n      syncUpdate: function(params) {\n        var collectColumn = params.collectColumn;\n        $xetable = params.$table;\n        reactData.columns = collectColumn;\n      }\n    };\n    Object.assign($xetoolbar, toolbarMethods);\n    onMounted(function() {\n      GlobalEvent.on($xetoolbar, \"mousedown\", handleGlobalMousedownEvent);\n      GlobalEvent.on($xetoolbar, \"blur\", handleGlobalBlurEvent);\n    });\n    onUnmounted(function() {\n      GlobalEvent.off($xetoolbar, \"mousedown\");\n      GlobalEvent.off($xetoolbar, \"blur\");\n    });\n    nextTick(function() {\n      var refresh = props.refresh;\n      var refreshOpts = computeRefreshOpts.value;\n      var queryMethod = refreshOpts.queryMethod || refreshOpts.query;\n      if (refresh && !$xegrid && !queryMethod) {\n        warnLog(\"vxe.error.notFunc\", [\"queryMethod\"]);\n      }\n      var customOpts = computeCustomOpts.value;\n      if (false) {\n        if (customOpts.isFooter) {\n          warnLog(\"vxe.error.notValidators\", [\"custom.isFooter\", \"custom.showFooter\"]);\n        }\n      }\n    });\n    var renderVN = function() {\n      var _a;\n      var perfect = props.perfect, loading = props.loading, refresh = props.refresh, zoom = props.zoom, custom = props.custom, className = props.className;\n      var vSize = computeSize.value;\n      var refreshOpts = computeRefreshOpts.value;\n      var importOpts = computeImportOpts.value;\n      var exportOpts = computeExportOpts.value;\n      var printOpts = computePrintOpts.value;\n      var zoomOpts = computeZoomOpts.value;\n      return h(\"div\", {\n        ref: refElem,\n        class: [\"vxe-toolbar\", className ? XEUtils.isFunction(className) ? className({ $toolbar: $xetoolbar }) : className : \"\", (_a = {}, _a[\"size--\".concat(vSize)] = vSize, _a[\"is--perfect\"] = perfect, _a[\"is--loading\"] = loading, _a)]\n      }, [\n        h(\"div\", {\n          class: \"vxe-buttons--wrapper\"\n        }, renderBtns()),\n        h(\"div\", {\n          class: \"vxe-tools--wrapper\"\n        }, renderRightTools()),\n        h(\"div\", {\n          class: \"vxe-tools--operate\"\n        }, [\n          props.import ? h(resolveComponent(\"vxe-button\"), {\n            circle: true,\n            icon: importOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_IMPORT,\n            title: GlobalConfig.i18n(\"vxe.toolbar.import\"),\n            onClick: importEvent\n          }) : createCommentVNode(),\n          props.export ? h(resolveComponent(\"vxe-button\"), {\n            circle: true,\n            icon: exportOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_EXPORT,\n            title: GlobalConfig.i18n(\"vxe.toolbar.export\"),\n            onClick: exportEvent\n          }) : createCommentVNode(),\n          props.print ? h(resolveComponent(\"vxe-button\"), {\n            circle: true,\n            icon: printOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_PRINT,\n            title: GlobalConfig.i18n(\"vxe.toolbar.print\"),\n            onClick: printEvent\n          }) : createCommentVNode(),\n          refresh ? h(resolveComponent(\"vxe-button\"), {\n            circle: true,\n            icon: reactData.isRefresh ? refreshOpts.iconLoading || GlobalConfig.icon.TOOLBAR_TOOLS_REFRESH_LOADING : refreshOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_REFRESH,\n            title: GlobalConfig.i18n(\"vxe.toolbar.refresh\"),\n            onClick: refreshEvent\n          }) : createCommentVNode(),\n          zoom && $xegrid ? h(resolveComponent(\"vxe-button\"), {\n            circle: true,\n            icon: $xegrid.isMaximized() ? zoomOpts.iconOut || GlobalConfig.icon.TOOLBAR_TOOLS_MINIMIZE : zoomOpts.iconIn || GlobalConfig.icon.TOOLBAR_TOOLS_FULLSCREEN,\n            title: GlobalConfig.i18n(\"vxe.toolbar.zoom\".concat($xegrid.isMaximized() ? \"Out\" : \"In\")),\n            onClick: zoomEvent\n          }) : createCommentVNode(),\n          custom ? renderCustoms() : createCommentVNode()\n        ])\n      ]);\n    };\n    $xetoolbar.renderVN = renderVN;\n    return $xetoolbar;\n  },\n  render: function() {\n    return this.renderVN();\n  }\n});\n",
      "start": 1714699767784,
      "end": 1714699768532,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1714699768532,
      "end": 1714699768532,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768532,
      "end": 1714699768532,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768532,
      "end": 1714699768532,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768532,
      "end": 1714699768532,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768532,
      "end": 1714699768534,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768534,
      "end": 1714699768534,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768534,
      "end": 1714699768534,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768534,
      "end": 1714699768534,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768534,
      "end": 1714699768534,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768534,
      "end": 1714699768534,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768534,
      "end": 1714699768534,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768534,
      "end": 1714699768534,
      "order": "normal"
    }
  ]
}

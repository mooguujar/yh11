{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/form/src/form-item.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { defineComponent, h, onUnmounted, inject, ref, provide, onMounted, createCommentVNode, reactive } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { VXETable } from '../../v-x-e-table';\nimport { getFuncText, isEnableConf } from '../../tools/utils';\nimport { getSlotVNs } from '../../tools/vn';\nimport { createItem, watchItem, destroyItem, assemItem, isActivetem } from './util';\nimport { renderTitle } from './render';\nexport var formItemProps = {\n    title: String,\n    field: String,\n    span: [String, Number],\n    align: String,\n    titleAlign: {\n        type: String,\n        default: null\n    },\n    titleWidth: {\n        type: [String, Number],\n        default: null\n    },\n    titleColon: {\n        type: Boolean,\n        default: null\n    },\n    titleAsterisk: {\n        type: Boolean,\n        default: null\n    },\n    showTitle: {\n        type: Boolean,\n        default: true\n    },\n    vertical: {\n        type: Boolean,\n        default: null\n    },\n    className: [String, Function],\n    contentClassName: [String, Function],\n    contentStyle: [Object, Function],\n    titleClassName: [String, Function],\n    titleStyle: [Object, Function],\n    titleOverflow: {\n        type: [Boolean, String],\n        default: null\n    },\n    titlePrefix: Object,\n    titleSuffix: Object,\n    resetValue: { default: null },\n    visibleMethod: Function,\n    visible: { type: Boolean, default: null },\n    folding: Boolean,\n    collapseNode: Boolean,\n    itemRender: Object\n};\nexport default defineComponent({\n    name: 'VxeFormItem',\n    props: formItemProps,\n    setup: function (props, _a) {\n        var slots = _a.slots;\n        var refElem = ref();\n        var $xeform = inject('$xeform', {});\n        var formGather = inject('$xeformgather', null);\n        var formItem = reactive(createItem($xeform, props));\n        var xeformitem = { formItem: formItem };\n        var xeformiteminfo = { itemConfig: formItem };\n        formItem.slots = slots;\n        provide('$xeformiteminfo', xeformiteminfo);\n        provide('$xeformitem', xeformitem);\n        provide('$xeformgather', null);\n        watchItem(props, formItem);\n        onMounted(function () {\n            assemItem($xeform, refElem.value, formItem, formGather);\n        });\n        onUnmounted(function () {\n            destroyItem($xeform, formItem);\n        });\n        var renderItem = function ($xeform, item) {\n            var props = $xeform.props, reactData = $xeform.reactData;\n            var data = props.data, rules = props.rules, allTitleAlign = props.titleAlign, allTitleWidth = props.titleWidth, allTitleColon = props.titleColon, allTitleAsterisk = props.titleAsterisk, allTitleOverflow = props.titleOverflow, allVertical = props.vertical;\n            var collapseAll = reactData.collapseAll;\n            var computeValidOpts = $xeform.getComputeMaps().computeValidOpts;\n            var validOpts = computeValidOpts.value;\n            var slots = item.slots, title = item.title, visible = item.visible, folding = item.folding, field = item.field, collapseNode = item.collapseNode, itemRender = item.itemRender, showError = item.showError, errRule = item.errRule, className = item.className, titleOverflow = item.titleOverflow, vertical = item.vertical, showTitle = item.showTitle, contentClassName = item.contentClassName, contentStyle = item.contentStyle, titleClassName = item.titleClassName, titleStyle = item.titleStyle;\n            var compConf = isEnableConf(itemRender) ? VXETable.renderer.get(itemRender.name) : null;\n            var itemClassName = compConf ? compConf.itemClassName : '';\n            var itemStyle = compConf ? compConf.itemStyle : null;\n            var itemContentClassName = compConf ? compConf.itemContentClassName : '';\n            var itemContentStyle = compConf ? compConf.itemContentStyle : null;\n            var itemTitleClassName = compConf ? compConf.itemTitleClassName : '';\n            var itemTitleStyle = compConf ? compConf.itemTitleStyle : null;\n            var defaultSlot = slots ? slots.default : null;\n            var titleSlot = slots ? slots.title : null;\n            var span = item.span || props.span;\n            var align = item.align || props.align;\n            var titleAlign = XEUtils.eqNull(item.titleAlign) ? allTitleAlign : item.titleAlign;\n            var titleWidth = XEUtils.eqNull(item.titleWidth) ? allTitleWidth : item.titleWidth;\n            var titleColon = XEUtils.eqNull(item.titleColon) ? allTitleColon : item.titleColon;\n            var titleAsterisk = XEUtils.eqNull(item.titleAsterisk) ? allTitleAsterisk : item.titleAsterisk;\n            var itemOverflow = (XEUtils.isUndefined(titleOverflow) || XEUtils.isNull(titleOverflow)) ? allTitleOverflow : titleOverflow;\n            var itemVertical = (XEUtils.isUndefined(vertical) || XEUtils.isNull(vertical)) ? allVertical : vertical;\n            var ovEllipsis = itemOverflow === 'ellipsis';\n            var ovTitle = itemOverflow === 'title';\n            var ovTooltip = itemOverflow === true || itemOverflow === 'tooltip';\n            var hasEllipsis = ovTitle || ovTooltip || ovEllipsis;\n            var params = { data: data, field: field, property: field, item: item, $form: $xeform, $grid: $xeform.xegrid };\n            var isRequired = false;\n            if (visible === false) {\n                return createCommentVNode();\n            }\n            if (rules) {\n                var itemRules = rules[field];\n                if (itemRules) {\n                    isRequired = itemRules.some(function (rule) { return rule.required; });\n                }\n            }\n            var contentVNs = [];\n            if (defaultSlot) {\n                contentVNs = $xeform.callSlot(defaultSlot, params);\n            }\n            else if (compConf && compConf.renderItemContent) {\n                contentVNs = getSlotVNs(compConf.renderItemContent(itemRender, params));\n            }\n            else if (field) {\n                contentVNs = [\"\".concat(XEUtils.get(data, field))];\n            }\n            if (collapseNode) {\n                contentVNs.push(h('div', {\n                    class: 'vxe-form--item-trigger-node',\n                    onClick: $xeform.toggleCollapseEvent\n                }, [\n                    h('span', {\n                        class: 'vxe-form--item-trigger-text'\n                    }, collapseAll ? GlobalConfig.i18n('vxe.form.unfolding') : GlobalConfig.i18n('vxe.form.folding')),\n                    h('i', {\n                        class: ['vxe-form--item-trigger-icon', collapseAll ? GlobalConfig.icon.FORM_FOLDING : GlobalConfig.icon.FORM_UNFOLDING]\n                    })\n                ]));\n            }\n            if (errRule && validOpts.showMessage) {\n                contentVNs.push(h('div', {\n                    class: 'vxe-form--item-valid',\n                    style: errRule.maxWidth ? {\n                        width: \"\".concat(errRule.maxWidth, \"px\")\n                    } : null\n                }, errRule.message));\n            }\n            var ons = ovTooltip ? {\n                onMouseenter: function (evnt) {\n                    $xeform.triggerTitleTipEvent(evnt, params);\n                },\n                onMouseleave: $xeform.handleTitleTipLeaveEvent\n            } : {};\n            return h('div', {\n                ref: refElem,\n                class: [\n                    'vxe-form--item',\n                    item.id,\n                    span ? \"vxe-col--\".concat(span, \" is--span\") : '',\n                    className ? (XEUtils.isFunction(className) ? className(params) : className) : '',\n                    itemClassName ? (XEUtils.isFunction(itemClassName) ? itemClassName(params) : itemClassName) : '',\n                    {\n                        'is--title': title,\n                        'is--colon': titleColon,\n                        'is--vertical': itemVertical,\n                        'is--asterisk': titleAsterisk,\n                        'is--required': isRequired,\n                        'is--hidden': folding && collapseAll,\n                        'is--active': isActivetem($xeform, item),\n                        'is--error': showError\n                    }\n                ],\n                style: XEUtils.isFunction(itemStyle) ? itemStyle(params) : itemStyle\n            }, [\n                h('div', {\n                    class: 'vxe-form--item-inner'\n                }, [\n                    (showTitle !== false) && (title || titleSlot) ? h('div', __assign({ class: [\n                            'vxe-form--item-title',\n                            titleAlign ? \"align--\".concat(titleAlign) : '',\n                            hasEllipsis ? 'is--ellipsis' : '',\n                            itemTitleClassName ? (XEUtils.isFunction(itemTitleClassName) ? itemTitleClassName(params) : itemTitleClassName) : '',\n                            titleClassName ? (XEUtils.isFunction(titleClassName) ? titleClassName(params) : titleClassName) : ''\n                        ], style: Object.assign({}, XEUtils.isFunction(itemTitleStyle) ? itemTitleStyle(params) : itemTitleStyle, XEUtils.isFunction(titleStyle) ? titleStyle(params) : titleStyle, titleWidth ? {\n                            width: isNaN(titleWidth) ? titleWidth : \"\".concat(titleWidth, \"px\")\n                        } : null), title: ovTitle ? getFuncText(title) : null }, ons), renderTitle($xeform, item)) : null,\n                    h('div', {\n                        class: [\n                            'vxe-form--item-content',\n                            align ? \"align--\".concat(align) : '',\n                            itemContentClassName ? (XEUtils.isFunction(itemContentClassName) ? itemContentClassName(params) : itemContentClassName) : '',\n                            contentClassName ? (XEUtils.isFunction(contentClassName) ? contentClassName(params) : contentClassName) : ''\n                        ],\n                        style: Object.assign({}, XEUtils.isFunction(itemContentStyle) ? itemContentStyle(params) : itemContentStyle, XEUtils.isFunction(contentStyle) ? contentStyle(params) : contentStyle)\n                    }, contentVNs)\n                ])\n            ]);\n        };\n        var renderVN = function () {\n            var formProps = $xeform ? $xeform.props : null;\n            return formProps && formProps.customLayout ? renderItem($xeform, formItem) : h('div', {\n                ref: refElem\n            });\n        };\n        var $xeformitem = {\n            renderVN: renderVN\n        };\n        return $xeformitem;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767753,
      "end": 1714699767806,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767806,
      "end": 1714699767806,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767806,
      "end": 1714699767806,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767806,
      "end": 1714699767806,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767806,
      "end": 1714699767806,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767806,
      "end": 1714699767806,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767806,
      "end": 1714699767806,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { defineComponent, h, onUnmounted, inject, ref, provide, onMounted, createCommentVNode, reactive } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { VXETable } from '../../v-x-e-table';\nimport { getFuncText, isEnableConf } from '../../tools/utils';\nimport { getSlotVNs } from '../../tools/vn';\nimport { createItem, watchItem, destroyItem, assemItem, isActivetem } from './util';\nimport { renderTitle } from './render';\nexport var formItemProps = {\n    title: String,\n    field: String,\n    span: [String, Number],\n    align: String,\n    titleAlign: {\n        type: String,\n        default: null\n    },\n    titleWidth: {\n        type: [String, Number],\n        default: null\n    },\n    titleColon: {\n        type: Boolean,\n        default: null\n    },\n    titleAsterisk: {\n        type: Boolean,\n        default: null\n    },\n    showTitle: {\n        type: Boolean,\n        default: true\n    },\n    vertical: {\n        type: Boolean,\n        default: null\n    },\n    className: [String, Function],\n    contentClassName: [String, Function],\n    contentStyle: [Object, Function],\n    titleClassName: [String, Function],\n    titleStyle: [Object, Function],\n    titleOverflow: {\n        type: [Boolean, String],\n        default: null\n    },\n    titlePrefix: Object,\n    titleSuffix: Object,\n    resetValue: { default: null },\n    visibleMethod: Function,\n    visible: { type: Boolean, default: null },\n    folding: Boolean,\n    collapseNode: Boolean,\n    itemRender: Object\n};\nexport default defineComponent({\n    name: 'VxeFormItem',\n    props: formItemProps,\n    setup: function (props, _a) {\n        var slots = _a.slots;\n        var refElem = ref();\n        var $xeform = inject('$xeform', {});\n        var formGather = inject('$xeformgather', null);\n        var formItem = reactive(createItem($xeform, props));\n        var xeformitem = { formItem: formItem };\n        var xeformiteminfo = { itemConfig: formItem };\n        formItem.slots = slots;\n        provide('$xeformiteminfo', xeformiteminfo);\n        provide('$xeformitem', xeformitem);\n        provide('$xeformgather', null);\n        watchItem(props, formItem);\n        onMounted(function () {\n            assemItem($xeform, refElem.value, formItem, formGather);\n        });\n        onUnmounted(function () {\n            destroyItem($xeform, formItem);\n        });\n        var renderItem = function ($xeform, item) {\n            var props = $xeform.props, reactData = $xeform.reactData;\n            var data = props.data, rules = props.rules, allTitleAlign = props.titleAlign, allTitleWidth = props.titleWidth, allTitleColon = props.titleColon, allTitleAsterisk = props.titleAsterisk, allTitleOverflow = props.titleOverflow, allVertical = props.vertical;\n            var collapseAll = reactData.collapseAll;\n            var computeValidOpts = $xeform.getComputeMaps().computeValidOpts;\n            var validOpts = computeValidOpts.value;\n            var slots = item.slots, title = item.title, visible = item.visible, folding = item.folding, field = item.field, collapseNode = item.collapseNode, itemRender = item.itemRender, showError = item.showError, errRule = item.errRule, className = item.className, titleOverflow = item.titleOverflow, vertical = item.vertical, showTitle = item.showTitle, contentClassName = item.contentClassName, contentStyle = item.contentStyle, titleClassName = item.titleClassName, titleStyle = item.titleStyle;\n            var compConf = isEnableConf(itemRender) ? VXETable.renderer.get(itemRender.name) : null;\n            var itemClassName = compConf ? compConf.itemClassName : '';\n            var itemStyle = compConf ? compConf.itemStyle : null;\n            var itemContentClassName = compConf ? compConf.itemContentClassName : '';\n            var itemContentStyle = compConf ? compConf.itemContentStyle : null;\n            var itemTitleClassName = compConf ? compConf.itemTitleClassName : '';\n            var itemTitleStyle = compConf ? compConf.itemTitleStyle : null;\n            var defaultSlot = slots ? slots.default : null;\n            var titleSlot = slots ? slots.title : null;\n            var span = item.span || props.span;\n            var align = item.align || props.align;\n            var titleAlign = XEUtils.eqNull(item.titleAlign) ? allTitleAlign : item.titleAlign;\n            var titleWidth = XEUtils.eqNull(item.titleWidth) ? allTitleWidth : item.titleWidth;\n            var titleColon = XEUtils.eqNull(item.titleColon) ? allTitleColon : item.titleColon;\n            var titleAsterisk = XEUtils.eqNull(item.titleAsterisk) ? allTitleAsterisk : item.titleAsterisk;\n            var itemOverflow = (XEUtils.isUndefined(titleOverflow) || XEUtils.isNull(titleOverflow)) ? allTitleOverflow : titleOverflow;\n            var itemVertical = (XEUtils.isUndefined(vertical) || XEUtils.isNull(vertical)) ? allVertical : vertical;\n            var ovEllipsis = itemOverflow === 'ellipsis';\n            var ovTitle = itemOverflow === 'title';\n            var ovTooltip = itemOverflow === true || itemOverflow === 'tooltip';\n            var hasEllipsis = ovTitle || ovTooltip || ovEllipsis;\n            var params = { data: data, field: field, property: field, item: item, $form: $xeform, $grid: $xeform.xegrid };\n            var isRequired = false;\n            if (visible === false) {\n                return createCommentVNode();\n            }\n            if (rules) {\n                var itemRules = rules[field];\n                if (itemRules) {\n                    isRequired = itemRules.some(function (rule) { return rule.required; });\n                }\n            }\n            var contentVNs = [];\n            if (defaultSlot) {\n                contentVNs = $xeform.callSlot(defaultSlot, params);\n            }\n            else if (compConf && compConf.renderItemContent) {\n                contentVNs = getSlotVNs(compConf.renderItemContent(itemRender, params));\n            }\n            else if (field) {\n                contentVNs = [\"\".concat(XEUtils.get(data, field))];\n            }\n            if (collapseNode) {\n                contentVNs.push(h('div', {\n                    class: 'vxe-form--item-trigger-node',\n                    onClick: $xeform.toggleCollapseEvent\n                }, [\n                    h('span', {\n                        class: 'vxe-form--item-trigger-text'\n                    }, collapseAll ? GlobalConfig.i18n('vxe.form.unfolding') : GlobalConfig.i18n('vxe.form.folding')),\n                    h('i', {\n                        class: ['vxe-form--item-trigger-icon', collapseAll ? GlobalConfig.icon.FORM_FOLDING : GlobalConfig.icon.FORM_UNFOLDING]\n                    })\n                ]));\n            }\n            if (errRule && validOpts.showMessage) {\n                contentVNs.push(h('div', {\n                    class: 'vxe-form--item-valid',\n                    style: errRule.maxWidth ? {\n                        width: \"\".concat(errRule.maxWidth, \"px\")\n                    } : null\n                }, errRule.message));\n            }\n            var ons = ovTooltip ? {\n                onMouseenter: function (evnt) {\n                    $xeform.triggerTitleTipEvent(evnt, params);\n                },\n                onMouseleave: $xeform.handleTitleTipLeaveEvent\n            } : {};\n            return h('div', {\n                ref: refElem,\n                class: [\n                    'vxe-form--item',\n                    item.id,\n                    span ? \"vxe-col--\".concat(span, \" is--span\") : '',\n                    className ? (XEUtils.isFunction(className) ? className(params) : className) : '',\n                    itemClassName ? (XEUtils.isFunction(itemClassName) ? itemClassName(params) : itemClassName) : '',\n                    {\n                        'is--title': title,\n                        'is--colon': titleColon,\n                        'is--vertical': itemVertical,\n                        'is--asterisk': titleAsterisk,\n                        'is--required': isRequired,\n                        'is--hidden': folding && collapseAll,\n                        'is--active': isActivetem($xeform, item),\n                        'is--error': showError\n                    }\n                ],\n                style: XEUtils.isFunction(itemStyle) ? itemStyle(params) : itemStyle\n            }, [\n                h('div', {\n                    class: 'vxe-form--item-inner'\n                }, [\n                    (showTitle !== false) && (title || titleSlot) ? h('div', __assign({ class: [\n                            'vxe-form--item-title',\n                            titleAlign ? \"align--\".concat(titleAlign) : '',\n                            hasEllipsis ? 'is--ellipsis' : '',\n                            itemTitleClassName ? (XEUtils.isFunction(itemTitleClassName) ? itemTitleClassName(params) : itemTitleClassName) : '',\n                            titleClassName ? (XEUtils.isFunction(titleClassName) ? titleClassName(params) : titleClassName) : ''\n                        ], style: Object.assign({}, XEUtils.isFunction(itemTitleStyle) ? itemTitleStyle(params) : itemTitleStyle, XEUtils.isFunction(titleStyle) ? titleStyle(params) : titleStyle, titleWidth ? {\n                            width: isNaN(titleWidth) ? titleWidth : \"\".concat(titleWidth, \"px\")\n                        } : null), title: ovTitle ? getFuncText(title) : null }, ons), renderTitle($xeform, item)) : null,\n                    h('div', {\n                        class: [\n                            'vxe-form--item-content',\n                            align ? \"align--\".concat(align) : '',\n                            itemContentClassName ? (XEUtils.isFunction(itemContentClassName) ? itemContentClassName(params) : itemContentClassName) : '',\n                            contentClassName ? (XEUtils.isFunction(contentClassName) ? contentClassName(params) : contentClassName) : ''\n                        ],\n                        style: Object.assign({}, XEUtils.isFunction(itemContentStyle) ? itemContentStyle(params) : itemContentStyle, XEUtils.isFunction(contentStyle) ? contentStyle(params) : contentStyle)\n                    }, contentVNs)\n                ])\n            ]);\n        };\n        var renderVN = function () {\n            var formProps = $xeform ? $xeform.props : null;\n            return formProps && formProps.customLayout ? renderItem($xeform, formItem) : h('div', {\n                ref: refElem\n            });\n        };\n        var $xeformitem = {\n            renderVN: renderVN\n        };\n        return $xeformitem;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767806,
      "end": 1714699767806,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767806,
      "end": 1714699767806,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767806,
      "end": 1714699767806,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767806,
      "end": 1714699767806,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767806,
      "end": 1714699767806,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767806,
      "end": 1714699767806,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767806,
      "end": 1714699767806,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767806,
      "end": 1714699767807,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767807,
      "end": 1714699767807,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767807,
      "end": 1714699767807,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767807,
      "end": 1714699767807,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767807,
      "end": 1714699767807,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767807,
      "end": 1714699767807,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767807,
      "end": 1714699767807,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767807,
      "end": 1714699767807,
      "order": "normal"
    }
  ]
}

{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/list/src/list.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { defineComponent, h, ref, computed, onUnmounted, watch, reactive, nextTick, onActivated } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { useSize } from '../../hooks/size';\nimport { createResizeEvent } from '../../tools/resize';\nimport { browse } from '../../tools/dom';\nimport { GlobalEvent } from '../../tools/event';\nimport VxeLoading from '../../loading/index';\nexport default defineComponent({\n    name: 'VxeList',\n    props: {\n        data: Array,\n        height: [Number, String],\n        maxHeight: [Number, String],\n        loading: Boolean,\n        className: [String, Function],\n        size: { type: String, default: function () { return GlobalConfig.list.size || GlobalConfig.size; } },\n        autoResize: { type: Boolean, default: function () { return GlobalConfig.list.autoResize; } },\n        syncResize: [Boolean, String, Number],\n        scrollY: Object\n    },\n    emits: [\n        'scroll'\n    ],\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var xID = XEUtils.uniqueId();\n        var computeSize = useSize(props);\n        var reactData = reactive({\n            scrollYLoad: false,\n            bodyHeight: 0,\n            rowHeight: 0,\n            topSpaceHeight: 0,\n            items: []\n        });\n        var refElem = ref();\n        var refVirtualWrapper = ref();\n        var refVirtualBody = ref();\n        var internalData = {\n            fullData: [],\n            lastScrollLeft: 0,\n            lastScrollTop: 0,\n            scrollYStore: {\n                startIndex: 0,\n                endIndex: 0,\n                visibleSize: 0,\n                offsetSize: 0,\n                rowHeight: 0\n            }\n        };\n        var refMaps = {\n            refElem: refElem\n        };\n        var $xelist = {\n            xID: xID,\n            props: props,\n            context: context,\n            reactData: reactData,\n            internalData: internalData,\n            getRefMaps: function () { return refMaps; }\n        };\n        var listMethods = {};\n        var computeSYOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.list.scrollY, props.scrollY);\n        });\n        var computeStyles = computed(function () {\n            var height = props.height, maxHeight = props.maxHeight;\n            var style = {};\n            if (height) {\n                style.height = \"\".concat(isNaN(height) ? height : \"\".concat(height, \"px\"));\n            }\n            else if (maxHeight) {\n                style.height = 'auto';\n                style.maxHeight = \"\".concat(isNaN(maxHeight) ? maxHeight : \"\".concat(maxHeight, \"px\"));\n            }\n            return style;\n        });\n        var updateYSpace = function () {\n            var scrollYLoad = reactData.scrollYLoad;\n            var scrollYStore = internalData.scrollYStore, fullData = internalData.fullData;\n            reactData.bodyHeight = scrollYLoad ? fullData.length * scrollYStore.rowHeight : 0;\n            reactData.topSpaceHeight = scrollYLoad ? Math.max(scrollYStore.startIndex * scrollYStore.rowHeight, 0) : 0;\n        };\n        var handleData = function () {\n            var scrollYLoad = reactData.scrollYLoad;\n            var fullData = internalData.fullData, scrollYStore = internalData.scrollYStore;\n            reactData.items = scrollYLoad ? fullData.slice(scrollYStore.startIndex, scrollYStore.endIndex) : fullData.slice(0);\n            return nextTick();\n        };\n        var updateYData = function () {\n            handleData();\n            updateYSpace();\n        };\n        var computeScrollLoad = function () {\n            return nextTick().then(function () {\n                var scrollYLoad = reactData.scrollYLoad;\n                var scrollYStore = internalData.scrollYStore;\n                var virtualBodyElem = refVirtualBody.value;\n                var sYOpts = computeSYOpts.value;\n                var rowHeight = 0;\n                var firstItemElem;\n                if (virtualBodyElem) {\n                    if (sYOpts.sItem) {\n                        firstItemElem = virtualBodyElem.querySelector(sYOpts.sItem);\n                    }\n                    if (!firstItemElem) {\n                        firstItemElem = virtualBodyElem.children[0];\n                    }\n                }\n                if (firstItemElem) {\n                    rowHeight = firstItemElem.offsetHeight;\n                }\n                rowHeight = Math.max(20, rowHeight);\n                scrollYStore.rowHeight = rowHeight;\n                // 计算 Y 逻辑\n                if (scrollYLoad) {\n                    var scrollBodyElem = refVirtualWrapper.value;\n                    var visibleYSize = Math.max(8, Math.ceil(scrollBodyElem.clientHeight / rowHeight));\n                    var offsetYSize = sYOpts.oSize ? XEUtils.toNumber(sYOpts.oSize) : (browse.edge ? 10 : 0);\n                    scrollYStore.offsetSize = offsetYSize;\n                    scrollYStore.visibleSize = visibleYSize;\n                    scrollYStore.endIndex = Math.max(scrollYStore.startIndex, visibleYSize + offsetYSize, scrollYStore.endIndex);\n                    updateYData();\n                }\n                else {\n                    updateYSpace();\n                }\n                reactData.rowHeight = rowHeight;\n            });\n        };\n        /**\n         * 清除滚动条\n         */\n        var clearScroll = function () {\n            var scrollBodyElem = refVirtualWrapper.value;\n            if (scrollBodyElem) {\n                scrollBodyElem.scrollTop = 0;\n            }\n            return nextTick();\n        };\n        /**\n         * 如果有滚动条，则滚动到对应的位置\n         * @param {Number} scrollLeft 左距离\n         * @param {Number} scrollTop 上距离\n         */\n        var scrollTo = function (scrollLeft, scrollTop) {\n            var scrollBodyElem = refVirtualWrapper.value;\n            if (XEUtils.isNumber(scrollLeft)) {\n                scrollBodyElem.scrollLeft = scrollLeft;\n            }\n            if (XEUtils.isNumber(scrollTop)) {\n                scrollBodyElem.scrollTop = scrollTop;\n            }\n            if (reactData.scrollYLoad) {\n                return new Promise(function (resolve) {\n                    setTimeout(function () {\n                        nextTick(function () {\n                            resolve();\n                        });\n                    }, 50);\n                });\n            }\n            return nextTick();\n        };\n        /**\n         * 刷新滚动条\n         */\n        var refreshScroll = function () {\n            var lastScrollLeft = internalData.lastScrollLeft, lastScrollTop = internalData.lastScrollTop;\n            return clearScroll().then(function () {\n                if (lastScrollLeft || lastScrollTop) {\n                    internalData.lastScrollLeft = 0;\n                    internalData.lastScrollTop = 0;\n                    return scrollTo(lastScrollLeft, lastScrollTop);\n                }\n            });\n        };\n        /**\n         * 重新计算列表\n         */\n        var recalculate = function () {\n            var el = refElem.value;\n            if (el.clientWidth && el.clientHeight) {\n                return computeScrollLoad();\n            }\n            return Promise.resolve();\n        };\n        var loadYData = function (evnt) {\n            var scrollYStore = internalData.scrollYStore;\n            var startIndex = scrollYStore.startIndex, endIndex = scrollYStore.endIndex, visibleSize = scrollYStore.visibleSize, offsetSize = scrollYStore.offsetSize, rowHeight = scrollYStore.rowHeight;\n            var scrollBodyElem = evnt.target;\n            var scrollTop = scrollBodyElem.scrollTop;\n            var toVisibleIndex = Math.floor(scrollTop / rowHeight);\n            var offsetStartIndex = Math.max(0, toVisibleIndex - 1 - offsetSize);\n            var offsetEndIndex = toVisibleIndex + visibleSize + offsetSize;\n            if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {\n                if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {\n                    scrollYStore.startIndex = offsetStartIndex;\n                    scrollYStore.endIndex = offsetEndIndex;\n                    updateYData();\n                }\n            }\n        };\n        var scrollEvent = function (evnt) {\n            var scrollBodyElem = evnt.target;\n            var scrollTop = scrollBodyElem.scrollTop;\n            var scrollLeft = scrollBodyElem.scrollLeft;\n            var isX = scrollLeft !== internalData.lastScrollLeft;\n            var isY = scrollTop !== internalData.lastScrollTop;\n            internalData.lastScrollTop = scrollTop;\n            internalData.lastScrollLeft = scrollLeft;\n            if (reactData.scrollYLoad) {\n                loadYData(evnt);\n            }\n            listMethods.dispatchEvent('scroll', { scrollLeft: scrollLeft, scrollTop: scrollTop, isX: isX, isY: isY }, evnt);\n        };\n        listMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $list: $xelist, $event: evnt }, params));\n            },\n            /**\n             * 加载数据\n             * @param {Array} datas 数据\n             */\n            loadData: function (datas) {\n                var scrollYStore = internalData.scrollYStore;\n                var sYOpts = computeSYOpts.value;\n                var fullData = datas || [];\n                Object.assign(scrollYStore, {\n                    startIndex: 0,\n                    endIndex: 1,\n                    visibleSize: 0\n                });\n                internalData.fullData = fullData;\n                // 如果gt为0，则总是启用\n                reactData.scrollYLoad = !!sYOpts.enabled && sYOpts.gt > -1 && (sYOpts.gt === 0 || sYOpts.gt <= fullData.length);\n                handleData();\n                return computeScrollLoad().then(function () {\n                    refreshScroll();\n                });\n            },\n            /**\n             * 重新加载数据\n             * @param {Array} datas 数据\n             */\n            reloadData: function (datas) {\n                clearScroll();\n                return listMethods.loadData(datas);\n            },\n            recalculate: recalculate,\n            scrollTo: scrollTo,\n            refreshScroll: refreshScroll,\n            clearScroll: clearScroll\n        };\n        Object.assign($xelist, listMethods);\n        var dataFlag = ref(0);\n        watch(function () { return props.data ? props.data.length : -1; }, function () {\n            dataFlag.value++;\n        });\n        watch(function () { return props.data; }, function () {\n            dataFlag.value++;\n        });\n        watch(dataFlag, function () {\n            listMethods.loadData(props.data || []);\n        });\n        watch(function () { return props.syncResize; }, function (value) {\n            if (value) {\n                recalculate();\n                nextTick(function () { return setTimeout(function () { return recalculate(); }); });\n            }\n        });\n        onActivated(function () {\n            recalculate().then(function () { return refreshScroll(); });\n        });\n        var resizeObserver;\n        nextTick(function () {\n            GlobalEvent.on($xelist, 'resize', function () {\n                recalculate();\n            });\n            if (props.autoResize) {\n                var el = refElem.value;\n                resizeObserver = createResizeEvent(function () { return recalculate(); });\n                resizeObserver.observe(el);\n            }\n            listMethods.loadData(props.data || []);\n        });\n        onUnmounted(function () {\n            if (resizeObserver) {\n                resizeObserver.disconnect();\n            }\n            GlobalEvent.off($xelist, 'resize');\n        });\n        var renderVN = function () {\n            var _a;\n            var className = props.className, loading = props.loading;\n            var bodyHeight = reactData.bodyHeight, topSpaceHeight = reactData.topSpaceHeight, items = reactData.items;\n            var vSize = computeSize.value;\n            var styles = computeStyles.value;\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-list', className ? (XEUtils.isFunction(className) ? className({ $list: $xelist }) : className) : '', (_a = {},\n                        _a[\"size--\".concat(vSize)] = vSize,\n                        _a['is--loading'] = loading,\n                        _a)]\n            }, [\n                h('div', {\n                    ref: refVirtualWrapper,\n                    class: 'vxe-list--virtual-wrapper',\n                    style: styles,\n                    onScroll: scrollEvent\n                }, [\n                    h('div', {\n                        class: 'vxe-list--y-space',\n                        style: {\n                            height: bodyHeight ? \"\".concat(bodyHeight, \"px\") : ''\n                        }\n                    }),\n                    h('div', {\n                        ref: refVirtualBody,\n                        class: 'vxe-list--body',\n                        style: {\n                            marginTop: topSpaceHeight ? \"\".concat(topSpaceHeight, \"px\") : ''\n                        }\n                    }, slots.default ? slots.default({ items: items, $list: $xelist }) : [])\n                ]),\n                /**\n                 * 加载中\n                 */\n                h(VxeLoading, {\n                    class: 'vxe-list--loading',\n                    modelValue: loading\n                })\n            ]);\n        };\n        $xelist.renderVN = renderVN;\n        return $xelist;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767778,
      "end": 1714699767849,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767849,
      "end": 1714699767849,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767849,
      "end": 1714699767849,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767849,
      "end": 1714699767849,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767849,
      "end": 1714699767849,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767849,
      "end": 1714699767849,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767849,
      "end": 1714699767849,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import { defineComponent, h, ref, computed, onUnmounted, watch, reactive, nextTick, onActivated } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { useSize } from '../../hooks/size';\nimport { createResizeEvent } from '../../tools/resize';\nimport { browse } from '../../tools/dom';\nimport { GlobalEvent } from '../../tools/event';\nimport VxeLoading from '../../loading/index';\nexport default defineComponent({\n    name: 'VxeList',\n    props: {\n        data: Array,\n        height: [Number, String],\n        maxHeight: [Number, String],\n        loading: Boolean,\n        className: [String, Function],\n        size: { type: String, default: function () { return GlobalConfig.list.size || GlobalConfig.size; } },\n        autoResize: { type: Boolean, default: function () { return GlobalConfig.list.autoResize; } },\n        syncResize: [Boolean, String, Number],\n        scrollY: Object\n    },\n    emits: [\n        'scroll'\n    ],\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var xID = XEUtils.uniqueId();\n        var computeSize = useSize(props);\n        var reactData = reactive({\n            scrollYLoad: false,\n            bodyHeight: 0,\n            rowHeight: 0,\n            topSpaceHeight: 0,\n            items: []\n        });\n        var refElem = ref();\n        var refVirtualWrapper = ref();\n        var refVirtualBody = ref();\n        var internalData = {\n            fullData: [],\n            lastScrollLeft: 0,\n            lastScrollTop: 0,\n            scrollYStore: {\n                startIndex: 0,\n                endIndex: 0,\n                visibleSize: 0,\n                offsetSize: 0,\n                rowHeight: 0\n            }\n        };\n        var refMaps = {\n            refElem: refElem\n        };\n        var $xelist = {\n            xID: xID,\n            props: props,\n            context: context,\n            reactData: reactData,\n            internalData: internalData,\n            getRefMaps: function () { return refMaps; }\n        };\n        var listMethods = {};\n        var computeSYOpts = computed(function () {\n            return Object.assign({}, GlobalConfig.list.scrollY, props.scrollY);\n        });\n        var computeStyles = computed(function () {\n            var height = props.height, maxHeight = props.maxHeight;\n            var style = {};\n            if (height) {\n                style.height = \"\".concat(isNaN(height) ? height : \"\".concat(height, \"px\"));\n            }\n            else if (maxHeight) {\n                style.height = 'auto';\n                style.maxHeight = \"\".concat(isNaN(maxHeight) ? maxHeight : \"\".concat(maxHeight, \"px\"));\n            }\n            return style;\n        });\n        var updateYSpace = function () {\n            var scrollYLoad = reactData.scrollYLoad;\n            var scrollYStore = internalData.scrollYStore, fullData = internalData.fullData;\n            reactData.bodyHeight = scrollYLoad ? fullData.length * scrollYStore.rowHeight : 0;\n            reactData.topSpaceHeight = scrollYLoad ? Math.max(scrollYStore.startIndex * scrollYStore.rowHeight, 0) : 0;\n        };\n        var handleData = function () {\n            var scrollYLoad = reactData.scrollYLoad;\n            var fullData = internalData.fullData, scrollYStore = internalData.scrollYStore;\n            reactData.items = scrollYLoad ? fullData.slice(scrollYStore.startIndex, scrollYStore.endIndex) : fullData.slice(0);\n            return nextTick();\n        };\n        var updateYData = function () {\n            handleData();\n            updateYSpace();\n        };\n        var computeScrollLoad = function () {\n            return nextTick().then(function () {\n                var scrollYLoad = reactData.scrollYLoad;\n                var scrollYStore = internalData.scrollYStore;\n                var virtualBodyElem = refVirtualBody.value;\n                var sYOpts = computeSYOpts.value;\n                var rowHeight = 0;\n                var firstItemElem;\n                if (virtualBodyElem) {\n                    if (sYOpts.sItem) {\n                        firstItemElem = virtualBodyElem.querySelector(sYOpts.sItem);\n                    }\n                    if (!firstItemElem) {\n                        firstItemElem = virtualBodyElem.children[0];\n                    }\n                }\n                if (firstItemElem) {\n                    rowHeight = firstItemElem.offsetHeight;\n                }\n                rowHeight = Math.max(20, rowHeight);\n                scrollYStore.rowHeight = rowHeight;\n                // 计算 Y 逻辑\n                if (scrollYLoad) {\n                    var scrollBodyElem = refVirtualWrapper.value;\n                    var visibleYSize = Math.max(8, Math.ceil(scrollBodyElem.clientHeight / rowHeight));\n                    var offsetYSize = sYOpts.oSize ? XEUtils.toNumber(sYOpts.oSize) : (browse.edge ? 10 : 0);\n                    scrollYStore.offsetSize = offsetYSize;\n                    scrollYStore.visibleSize = visibleYSize;\n                    scrollYStore.endIndex = Math.max(scrollYStore.startIndex, visibleYSize + offsetYSize, scrollYStore.endIndex);\n                    updateYData();\n                }\n                else {\n                    updateYSpace();\n                }\n                reactData.rowHeight = rowHeight;\n            });\n        };\n        /**\n         * 清除滚动条\n         */\n        var clearScroll = function () {\n            var scrollBodyElem = refVirtualWrapper.value;\n            if (scrollBodyElem) {\n                scrollBodyElem.scrollTop = 0;\n            }\n            return nextTick();\n        };\n        /**\n         * 如果有滚动条，则滚动到对应的位置\n         * @param {Number} scrollLeft 左距离\n         * @param {Number} scrollTop 上距离\n         */\n        var scrollTo = function (scrollLeft, scrollTop) {\n            var scrollBodyElem = refVirtualWrapper.value;\n            if (XEUtils.isNumber(scrollLeft)) {\n                scrollBodyElem.scrollLeft = scrollLeft;\n            }\n            if (XEUtils.isNumber(scrollTop)) {\n                scrollBodyElem.scrollTop = scrollTop;\n            }\n            if (reactData.scrollYLoad) {\n                return new Promise(function (resolve) {\n                    setTimeout(function () {\n                        nextTick(function () {\n                            resolve();\n                        });\n                    }, 50);\n                });\n            }\n            return nextTick();\n        };\n        /**\n         * 刷新滚动条\n         */\n        var refreshScroll = function () {\n            var lastScrollLeft = internalData.lastScrollLeft, lastScrollTop = internalData.lastScrollTop;\n            return clearScroll().then(function () {\n                if (lastScrollLeft || lastScrollTop) {\n                    internalData.lastScrollLeft = 0;\n                    internalData.lastScrollTop = 0;\n                    return scrollTo(lastScrollLeft, lastScrollTop);\n                }\n            });\n        };\n        /**\n         * 重新计算列表\n         */\n        var recalculate = function () {\n            var el = refElem.value;\n            if (el.clientWidth && el.clientHeight) {\n                return computeScrollLoad();\n            }\n            return Promise.resolve();\n        };\n        var loadYData = function (evnt) {\n            var scrollYStore = internalData.scrollYStore;\n            var startIndex = scrollYStore.startIndex, endIndex = scrollYStore.endIndex, visibleSize = scrollYStore.visibleSize, offsetSize = scrollYStore.offsetSize, rowHeight = scrollYStore.rowHeight;\n            var scrollBodyElem = evnt.target;\n            var scrollTop = scrollBodyElem.scrollTop;\n            var toVisibleIndex = Math.floor(scrollTop / rowHeight);\n            var offsetStartIndex = Math.max(0, toVisibleIndex - 1 - offsetSize);\n            var offsetEndIndex = toVisibleIndex + visibleSize + offsetSize;\n            if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {\n                if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {\n                    scrollYStore.startIndex = offsetStartIndex;\n                    scrollYStore.endIndex = offsetEndIndex;\n                    updateYData();\n                }\n            }\n        };\n        var scrollEvent = function (evnt) {\n            var scrollBodyElem = evnt.target;\n            var scrollTop = scrollBodyElem.scrollTop;\n            var scrollLeft = scrollBodyElem.scrollLeft;\n            var isX = scrollLeft !== internalData.lastScrollLeft;\n            var isY = scrollTop !== internalData.lastScrollTop;\n            internalData.lastScrollTop = scrollTop;\n            internalData.lastScrollLeft = scrollLeft;\n            if (reactData.scrollYLoad) {\n                loadYData(evnt);\n            }\n            listMethods.dispatchEvent('scroll', { scrollLeft: scrollLeft, scrollTop: scrollTop, isX: isX, isY: isY }, evnt);\n        };\n        listMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $list: $xelist, $event: evnt }, params));\n            },\n            /**\n             * 加载数据\n             * @param {Array} datas 数据\n             */\n            loadData: function (datas) {\n                var scrollYStore = internalData.scrollYStore;\n                var sYOpts = computeSYOpts.value;\n                var fullData = datas || [];\n                Object.assign(scrollYStore, {\n                    startIndex: 0,\n                    endIndex: 1,\n                    visibleSize: 0\n                });\n                internalData.fullData = fullData;\n                // 如果gt为0，则总是启用\n                reactData.scrollYLoad = !!sYOpts.enabled && sYOpts.gt > -1 && (sYOpts.gt === 0 || sYOpts.gt <= fullData.length);\n                handleData();\n                return computeScrollLoad().then(function () {\n                    refreshScroll();\n                });\n            },\n            /**\n             * 重新加载数据\n             * @param {Array} datas 数据\n             */\n            reloadData: function (datas) {\n                clearScroll();\n                return listMethods.loadData(datas);\n            },\n            recalculate: recalculate,\n            scrollTo: scrollTo,\n            refreshScroll: refreshScroll,\n            clearScroll: clearScroll\n        };\n        Object.assign($xelist, listMethods);\n        var dataFlag = ref(0);\n        watch(function () { return props.data ? props.data.length : -1; }, function () {\n            dataFlag.value++;\n        });\n        watch(function () { return props.data; }, function () {\n            dataFlag.value++;\n        });\n        watch(dataFlag, function () {\n            listMethods.loadData(props.data || []);\n        });\n        watch(function () { return props.syncResize; }, function (value) {\n            if (value) {\n                recalculate();\n                nextTick(function () { return setTimeout(function () { return recalculate(); }); });\n            }\n        });\n        onActivated(function () {\n            recalculate().then(function () { return refreshScroll(); });\n        });\n        var resizeObserver;\n        nextTick(function () {\n            GlobalEvent.on($xelist, 'resize', function () {\n                recalculate();\n            });\n            if (props.autoResize) {\n                var el = refElem.value;\n                resizeObserver = createResizeEvent(function () { return recalculate(); });\n                resizeObserver.observe(el);\n            }\n            listMethods.loadData(props.data || []);\n        });\n        onUnmounted(function () {\n            if (resizeObserver) {\n                resizeObserver.disconnect();\n            }\n            GlobalEvent.off($xelist, 'resize');\n        });\n        var renderVN = function () {\n            var _a;\n            var className = props.className, loading = props.loading;\n            var bodyHeight = reactData.bodyHeight, topSpaceHeight = reactData.topSpaceHeight, items = reactData.items;\n            var vSize = computeSize.value;\n            var styles = computeStyles.value;\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-list', className ? (XEUtils.isFunction(className) ? className({ $list: $xelist }) : className) : '', (_a = {},\n                        _a[\"size--\".concat(vSize)] = vSize,\n                        _a['is--loading'] = loading,\n                        _a)]\n            }, [\n                h('div', {\n                    ref: refVirtualWrapper,\n                    class: 'vxe-list--virtual-wrapper',\n                    style: styles,\n                    onScroll: scrollEvent\n                }, [\n                    h('div', {\n                        class: 'vxe-list--y-space',\n                        style: {\n                            height: bodyHeight ? \"\".concat(bodyHeight, \"px\") : ''\n                        }\n                    }),\n                    h('div', {\n                        ref: refVirtualBody,\n                        class: 'vxe-list--body',\n                        style: {\n                            marginTop: topSpaceHeight ? \"\".concat(topSpaceHeight, \"px\") : ''\n                        }\n                    }, slots.default ? slots.default({ items: items, $list: $xelist }) : [])\n                ]),\n                /**\n                 * 加载中\n                 */\n                h(VxeLoading, {\n                    class: 'vxe-list--loading',\n                    modelValue: loading\n                })\n            ]);\n        };\n        $xelist.renderVN = renderVN;\n        return $xelist;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767849,
      "end": 1714699767849,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767849,
      "end": 1714699767849,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767849,
      "end": 1714699767849,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767849,
      "end": 1714699767849,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767849,
      "end": 1714699767849,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767849,
      "end": 1714699767849,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767849,
      "end": 1714699767849,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767849,
      "end": 1714699767850,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767850,
      "end": 1714699767850,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767850,
      "end": 1714699767850,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767850,
      "end": 1714699767850,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767850,
      "end": 1714699767850,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767850,
      "end": 1714699767850,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767850,
      "end": 1714699767850,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767850,
      "end": 1714699767850,
      "order": "normal"
    }
  ]
}

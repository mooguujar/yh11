{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/differenceWith.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport last from './last.js';\n\n/**\n * This method is like `_.difference` except that it accepts `comparator`\n * which is invoked to compare elements of `array` to `values`. The order and\n * references of result values are determined by the first array. The comparator\n * is invoked with two arguments: (arrVal, othVal).\n *\n * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n *\n * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }]\n */\nvar differenceWith = baseRest(function(array, values) {\n  var comparator = last(values);\n  if (isArrayLikeObject(comparator)) {\n    comparator = undefined;\n  }\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n    : [];\n});\n\nexport default differenceWith;\n",
      "start": 1714699768325,
      "end": 1714699768345,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport last from './last.js';\n\n/**\n * This method is like `_.difference` except that it accepts `comparator`\n * which is invoked to compare elements of `array` to `values`. The order and\n * references of result values are determined by the first array. The comparator\n * is invoked with two arguments: (arrVal, othVal).\n *\n * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n *\n * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }]\n */\nvar differenceWith = baseRest(function(array, values) {\n  var comparator = last(values);\n  if (isArrayLikeObject(comparator)) {\n    comparator = undefined;\n  }\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n    : [];\n});\n\nexport default differenceWith;\n",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768345,
      "end": 1714699768345,
      "order": "normal"
    }
  ]
}

{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/pulldown/src/pulldown.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { defineComponent, h, Teleport, ref, onUnmounted, reactive, nextTick, watch, createCommentVNode } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { useSize } from '../../hooks/size';\nimport { getAbsolutePos, getEventTargetNode } from '../../tools/dom';\nimport { getLastZIndex, nextZIndex } from '../../tools/utils';\nimport { GlobalEvent } from '../../tools/event';\nexport default defineComponent({\n    name: 'VxePulldown',\n    props: {\n        modelValue: Boolean,\n        disabled: Boolean,\n        placement: String,\n        size: { type: String, default: function () { return GlobalConfig.size; } },\n        className: [String, Function],\n        popupClassName: [String, Function],\n        destroyOnClose: Boolean,\n        transfer: Boolean\n    },\n    emits: [\n        'update:modelValue',\n        'hide-panel'\n    ],\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var xID = XEUtils.uniqueId();\n        var computeSize = useSize(props);\n        var reactData = reactive({\n            inited: false,\n            panelIndex: 0,\n            panelStyle: null,\n            panelPlacement: null,\n            visiblePanel: false,\n            animatVisible: false,\n            isActivated: false\n        });\n        var refElem = ref();\n        var refPulldowContent = ref();\n        var refPulldowPnanel = ref();\n        var refMaps = {\n            refElem: refElem\n        };\n        var $xepulldown = {\n            xID: xID,\n            props: props,\n            context: context,\n            reactData: reactData,\n            getRefMaps: function () { return refMaps; }\n        };\n        var pulldownMethods = {};\n        var updateZindex = function () {\n            if (reactData.panelIndex < getLastZIndex()) {\n                reactData.panelIndex = nextZIndex();\n            }\n        };\n        var isPanelVisible = function () {\n            return reactData.visiblePanel;\n        };\n        /**\n         * 手动更新位置\n         */\n        var updatePlacement = function () {\n            return nextTick().then(function () {\n                var transfer = props.transfer, placement = props.placement;\n                var panelIndex = reactData.panelIndex, visiblePanel = reactData.visiblePanel;\n                if (visiblePanel) {\n                    var targetElem = refPulldowContent.value;\n                    var panelElem = refPulldowPnanel.value;\n                    if (panelElem && targetElem) {\n                        var targetHeight = targetElem.offsetHeight;\n                        var targetWidth = targetElem.offsetWidth;\n                        var panelHeight = panelElem.offsetHeight;\n                        var panelWidth = panelElem.offsetWidth;\n                        var marginSize = 5;\n                        var panelStyle = {\n                            zIndex: panelIndex\n                        };\n                        var _a = getAbsolutePos(targetElem), boundingTop = _a.boundingTop, boundingLeft = _a.boundingLeft, visibleHeight = _a.visibleHeight, visibleWidth = _a.visibleWidth;\n                        var panelPlacement = 'bottom';\n                        if (transfer) {\n                            var left = boundingLeft;\n                            var top_1 = boundingTop + targetHeight;\n                            if (placement === 'top') {\n                                panelPlacement = 'top';\n                                top_1 = boundingTop - panelHeight;\n                            }\n                            else if (!placement) {\n                                // 如果下面不够放，则向上\n                                if (top_1 + panelHeight + marginSize > visibleHeight) {\n                                    panelPlacement = 'top';\n                                    top_1 = boundingTop - panelHeight;\n                                }\n                                // 如果上面不够放，则向下（优先）\n                                if (top_1 < marginSize) {\n                                    panelPlacement = 'bottom';\n                                    top_1 = boundingTop + targetHeight;\n                                }\n                            }\n                            // 如果溢出右边\n                            if (left + panelWidth + marginSize > visibleWidth) {\n                                left -= left + panelWidth + marginSize - visibleWidth;\n                            }\n                            // 如果溢出左边\n                            if (left < marginSize) {\n                                left = marginSize;\n                            }\n                            Object.assign(panelStyle, {\n                                left: \"\".concat(left, \"px\"),\n                                top: \"\".concat(top_1, \"px\"),\n                                minWidth: \"\".concat(targetWidth, \"px\")\n                            });\n                        }\n                        else {\n                            if (placement === 'top') {\n                                panelPlacement = 'top';\n                                panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                            }\n                            else if (!placement) {\n                                // 如果下面不够放，则向上\n                                if (boundingTop + targetHeight + panelHeight > visibleHeight) {\n                                    // 如果上面不够放，则向下（优先）\n                                    if (boundingTop - targetHeight - panelHeight > marginSize) {\n                                        panelPlacement = 'top';\n                                        panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                                    }\n                                }\n                            }\n                        }\n                        reactData.panelStyle = panelStyle;\n                        reactData.panelPlacement = panelPlacement;\n                    }\n                }\n                return nextTick();\n            });\n        };\n        var hidePanelTimeout;\n        /**\n         * 显示下拉面板\n         */\n        var showPanel = function () {\n            if (!reactData.inited) {\n                reactData.inited = true;\n            }\n            return new Promise(function (resolve) {\n                if (!props.disabled) {\n                    clearTimeout(hidePanelTimeout);\n                    reactData.isActivated = true;\n                    reactData.animatVisible = true;\n                    setTimeout(function () {\n                        reactData.visiblePanel = true;\n                        emit('update:modelValue', true);\n                        updatePlacement();\n                        setTimeout(function () {\n                            resolve(updatePlacement());\n                        }, 40);\n                    }, 10);\n                    updateZindex();\n                }\n                else {\n                    nextTick(function () {\n                        resolve();\n                    });\n                }\n            });\n        };\n        /**\n         * 隐藏下拉面板\n         */\n        var hidePanel = function () {\n            reactData.visiblePanel = false;\n            emit('update:modelValue', false);\n            return new Promise(function (resolve) {\n                if (reactData.animatVisible) {\n                    hidePanelTimeout = window.setTimeout(function () {\n                        reactData.animatVisible = false;\n                        nextTick(function () {\n                            resolve();\n                        });\n                    }, 350);\n                }\n                else {\n                    nextTick(function () {\n                        resolve();\n                    });\n                }\n            });\n        };\n        /**\n         * 切换下拉面板\n         */\n        var togglePanel = function () {\n            if (reactData.visiblePanel) {\n                return hidePanel();\n            }\n            return showPanel();\n        };\n        var handleGlobalMousewheelEvent = function (evnt) {\n            var disabled = props.disabled;\n            var visiblePanel = reactData.visiblePanel;\n            var panelElem = refPulldowPnanel.value;\n            if (!disabled) {\n                if (visiblePanel) {\n                    if (getEventTargetNode(evnt, panelElem).flag) {\n                        updatePlacement();\n                    }\n                    else {\n                        hidePanel();\n                        pulldownMethods.dispatchEvent('hide-panel', {}, evnt);\n                    }\n                }\n            }\n        };\n        var handleGlobalMousedownEvent = function (evnt) {\n            var disabled = props.disabled;\n            var visiblePanel = reactData.visiblePanel;\n            var el = refElem.value;\n            var panelElem = refPulldowPnanel.value;\n            if (!disabled) {\n                reactData.isActivated = getEventTargetNode(evnt, el).flag || getEventTargetNode(evnt, panelElem).flag;\n                if (visiblePanel && !reactData.isActivated) {\n                    hidePanel();\n                    pulldownMethods.dispatchEvent('hide-panel', {}, evnt);\n                }\n            }\n        };\n        var handleGlobalBlurEvent = function (evnt) {\n            if (reactData.visiblePanel) {\n                reactData.isActivated = false;\n                hidePanel();\n                pulldownMethods.dispatchEvent('hide-panel', {}, evnt);\n            }\n        };\n        pulldownMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $pulldown: $xepulldown, $event: evnt }, params));\n            },\n            isPanelVisible: isPanelVisible,\n            togglePanel: togglePanel,\n            showPanel: showPanel,\n            hidePanel: hidePanel\n        };\n        Object.assign($xepulldown, pulldownMethods);\n        watch(function () { return props.modelValue; }, function (value) {\n            if (value) {\n                showPanel();\n            }\n            else {\n                hidePanel();\n            }\n        });\n        nextTick(function () {\n            GlobalEvent.on($xepulldown, 'mousewheel', handleGlobalMousewheelEvent);\n            GlobalEvent.on($xepulldown, 'mousedown', handleGlobalMousedownEvent);\n            GlobalEvent.on($xepulldown, 'blur', handleGlobalBlurEvent);\n        });\n        onUnmounted(function () {\n            GlobalEvent.off($xepulldown, 'mousewheel');\n            GlobalEvent.off($xepulldown, 'mousedown');\n            GlobalEvent.off($xepulldown, 'blur');\n        });\n        var renderVN = function () {\n            var _a, _b;\n            var className = props.className, popupClassName = props.popupClassName, destroyOnClose = props.destroyOnClose, transfer = props.transfer, disabled = props.disabled;\n            var inited = reactData.inited, isActivated = reactData.isActivated, animatVisible = reactData.animatVisible, visiblePanel = reactData.visiblePanel, panelStyle = reactData.panelStyle, panelPlacement = reactData.panelPlacement;\n            var vSize = computeSize.value;\n            var defaultSlot = slots.default;\n            var headerSlot = slots.header;\n            var footerSlot = slots.footer;\n            var dropdownSlot = slots.dropdown;\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-pulldown', className ? (XEUtils.isFunction(className) ? className({ $pulldown: $xepulldown }) : className) : '', (_a = {},\n                        _a[\"size--\".concat(vSize)] = vSize,\n                        _a['is--visivle'] = visiblePanel,\n                        _a['is--disabled'] = disabled,\n                        _a['is--active'] = isActivated,\n                        _a)]\n            }, [\n                h('div', {\n                    ref: refPulldowContent,\n                    class: 'vxe-pulldown--content'\n                }, defaultSlot ? defaultSlot({ $pulldown: $xepulldown }) : []),\n                h(Teleport, {\n                    to: 'body',\n                    disabled: transfer ? !inited : true\n                }, [\n                    h('div', {\n                        ref: refPulldowPnanel,\n                        class: ['vxe-table--ignore-clear vxe-pulldown--panel', popupClassName ? (XEUtils.isFunction(popupClassName) ? popupClassName({ $pulldown: $xepulldown }) : popupClassName) : '', (_b = {},\n                                _b[\"size--\".concat(vSize)] = vSize,\n                                _b['is--transfer'] = transfer,\n                                _b['animat--leave'] = animatVisible,\n                                _b['animat--enter'] = visiblePanel,\n                                _b)],\n                        placement: panelPlacement,\n                        style: panelStyle\n                    }, dropdownSlot ? [\n                        h('div', {\n                            class: 'vxe-pulldown--panel-wrapper'\n                        }, !inited || (destroyOnClose && !visiblePanel && !animatVisible) ? [] : [\n                            headerSlot ? h('div', {\n                                class: 'vxe-pulldown--panel-header'\n                            }, headerSlot({ $pulldown: $xepulldown })) : createCommentVNode(),\n                            h('div', {\n                                class: 'vxe-pulldown--panel-body'\n                            }, dropdownSlot({ $pulldown: $xepulldown })),\n                            footerSlot ? h('div', {\n                                class: 'vxe-pulldown--panel-footer'\n                            }, footerSlot({ $pulldown: $xepulldown })) : createCommentVNode()\n                        ])\n                    ] : [])\n                ])\n            ]);\n        };\n        $xepulldown.renderVN = renderVN;\n        return $xepulldown;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767775,
      "end": 1714699767844,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767844,
      "end": 1714699767844,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767844,
      "end": 1714699767844,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import { defineComponent, h, Teleport, ref, onUnmounted, reactive, nextTick, watch, createCommentVNode } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { useSize } from '../../hooks/size';\nimport { getAbsolutePos, getEventTargetNode } from '../../tools/dom';\nimport { getLastZIndex, nextZIndex } from '../../tools/utils';\nimport { GlobalEvent } from '../../tools/event';\nexport default defineComponent({\n    name: 'VxePulldown',\n    props: {\n        modelValue: Boolean,\n        disabled: Boolean,\n        placement: String,\n        size: { type: String, default: function () { return GlobalConfig.size; } },\n        className: [String, Function],\n        popupClassName: [String, Function],\n        destroyOnClose: Boolean,\n        transfer: Boolean\n    },\n    emits: [\n        'update:modelValue',\n        'hide-panel'\n    ],\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var xID = XEUtils.uniqueId();\n        var computeSize = useSize(props);\n        var reactData = reactive({\n            inited: false,\n            panelIndex: 0,\n            panelStyle: null,\n            panelPlacement: null,\n            visiblePanel: false,\n            animatVisible: false,\n            isActivated: false\n        });\n        var refElem = ref();\n        var refPulldowContent = ref();\n        var refPulldowPnanel = ref();\n        var refMaps = {\n            refElem: refElem\n        };\n        var $xepulldown = {\n            xID: xID,\n            props: props,\n            context: context,\n            reactData: reactData,\n            getRefMaps: function () { return refMaps; }\n        };\n        var pulldownMethods = {};\n        var updateZindex = function () {\n            if (reactData.panelIndex < getLastZIndex()) {\n                reactData.panelIndex = nextZIndex();\n            }\n        };\n        var isPanelVisible = function () {\n            return reactData.visiblePanel;\n        };\n        /**\n         * 手动更新位置\n         */\n        var updatePlacement = function () {\n            return nextTick().then(function () {\n                var transfer = props.transfer, placement = props.placement;\n                var panelIndex = reactData.panelIndex, visiblePanel = reactData.visiblePanel;\n                if (visiblePanel) {\n                    var targetElem = refPulldowContent.value;\n                    var panelElem = refPulldowPnanel.value;\n                    if (panelElem && targetElem) {\n                        var targetHeight = targetElem.offsetHeight;\n                        var targetWidth = targetElem.offsetWidth;\n                        var panelHeight = panelElem.offsetHeight;\n                        var panelWidth = panelElem.offsetWidth;\n                        var marginSize = 5;\n                        var panelStyle = {\n                            zIndex: panelIndex\n                        };\n                        var _a = getAbsolutePos(targetElem), boundingTop = _a.boundingTop, boundingLeft = _a.boundingLeft, visibleHeight = _a.visibleHeight, visibleWidth = _a.visibleWidth;\n                        var panelPlacement = 'bottom';\n                        if (transfer) {\n                            var left = boundingLeft;\n                            var top_1 = boundingTop + targetHeight;\n                            if (placement === 'top') {\n                                panelPlacement = 'top';\n                                top_1 = boundingTop - panelHeight;\n                            }\n                            else if (!placement) {\n                                // 如果下面不够放，则向上\n                                if (top_1 + panelHeight + marginSize > visibleHeight) {\n                                    panelPlacement = 'top';\n                                    top_1 = boundingTop - panelHeight;\n                                }\n                                // 如果上面不够放，则向下（优先）\n                                if (top_1 < marginSize) {\n                                    panelPlacement = 'bottom';\n                                    top_1 = boundingTop + targetHeight;\n                                }\n                            }\n                            // 如果溢出右边\n                            if (left + panelWidth + marginSize > visibleWidth) {\n                                left -= left + panelWidth + marginSize - visibleWidth;\n                            }\n                            // 如果溢出左边\n                            if (left < marginSize) {\n                                left = marginSize;\n                            }\n                            Object.assign(panelStyle, {\n                                left: \"\".concat(left, \"px\"),\n                                top: \"\".concat(top_1, \"px\"),\n                                minWidth: \"\".concat(targetWidth, \"px\")\n                            });\n                        }\n                        else {\n                            if (placement === 'top') {\n                                panelPlacement = 'top';\n                                panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                            }\n                            else if (!placement) {\n                                // 如果下面不够放，则向上\n                                if (boundingTop + targetHeight + panelHeight > visibleHeight) {\n                                    // 如果上面不够放，则向下（优先）\n                                    if (boundingTop - targetHeight - panelHeight > marginSize) {\n                                        panelPlacement = 'top';\n                                        panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                                    }\n                                }\n                            }\n                        }\n                        reactData.panelStyle = panelStyle;\n                        reactData.panelPlacement = panelPlacement;\n                    }\n                }\n                return nextTick();\n            });\n        };\n        var hidePanelTimeout;\n        /**\n         * 显示下拉面板\n         */\n        var showPanel = function () {\n            if (!reactData.inited) {\n                reactData.inited = true;\n            }\n            return new Promise(function (resolve) {\n                if (!props.disabled) {\n                    clearTimeout(hidePanelTimeout);\n                    reactData.isActivated = true;\n                    reactData.animatVisible = true;\n                    setTimeout(function () {\n                        reactData.visiblePanel = true;\n                        emit('update:modelValue', true);\n                        updatePlacement();\n                        setTimeout(function () {\n                            resolve(updatePlacement());\n                        }, 40);\n                    }, 10);\n                    updateZindex();\n                }\n                else {\n                    nextTick(function () {\n                        resolve();\n                    });\n                }\n            });\n        };\n        /**\n         * 隐藏下拉面板\n         */\n        var hidePanel = function () {\n            reactData.visiblePanel = false;\n            emit('update:modelValue', false);\n            return new Promise(function (resolve) {\n                if (reactData.animatVisible) {\n                    hidePanelTimeout = window.setTimeout(function () {\n                        reactData.animatVisible = false;\n                        nextTick(function () {\n                            resolve();\n                        });\n                    }, 350);\n                }\n                else {\n                    nextTick(function () {\n                        resolve();\n                    });\n                }\n            });\n        };\n        /**\n         * 切换下拉面板\n         */\n        var togglePanel = function () {\n            if (reactData.visiblePanel) {\n                return hidePanel();\n            }\n            return showPanel();\n        };\n        var handleGlobalMousewheelEvent = function (evnt) {\n            var disabled = props.disabled;\n            var visiblePanel = reactData.visiblePanel;\n            var panelElem = refPulldowPnanel.value;\n            if (!disabled) {\n                if (visiblePanel) {\n                    if (getEventTargetNode(evnt, panelElem).flag) {\n                        updatePlacement();\n                    }\n                    else {\n                        hidePanel();\n                        pulldownMethods.dispatchEvent('hide-panel', {}, evnt);\n                    }\n                }\n            }\n        };\n        var handleGlobalMousedownEvent = function (evnt) {\n            var disabled = props.disabled;\n            var visiblePanel = reactData.visiblePanel;\n            var el = refElem.value;\n            var panelElem = refPulldowPnanel.value;\n            if (!disabled) {\n                reactData.isActivated = getEventTargetNode(evnt, el).flag || getEventTargetNode(evnt, panelElem).flag;\n                if (visiblePanel && !reactData.isActivated) {\n                    hidePanel();\n                    pulldownMethods.dispatchEvent('hide-panel', {}, evnt);\n                }\n            }\n        };\n        var handleGlobalBlurEvent = function (evnt) {\n            if (reactData.visiblePanel) {\n                reactData.isActivated = false;\n                hidePanel();\n                pulldownMethods.dispatchEvent('hide-panel', {}, evnt);\n            }\n        };\n        pulldownMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $pulldown: $xepulldown, $event: evnt }, params));\n            },\n            isPanelVisible: isPanelVisible,\n            togglePanel: togglePanel,\n            showPanel: showPanel,\n            hidePanel: hidePanel\n        };\n        Object.assign($xepulldown, pulldownMethods);\n        watch(function () { return props.modelValue; }, function (value) {\n            if (value) {\n                showPanel();\n            }\n            else {\n                hidePanel();\n            }\n        });\n        nextTick(function () {\n            GlobalEvent.on($xepulldown, 'mousewheel', handleGlobalMousewheelEvent);\n            GlobalEvent.on($xepulldown, 'mousedown', handleGlobalMousedownEvent);\n            GlobalEvent.on($xepulldown, 'blur', handleGlobalBlurEvent);\n        });\n        onUnmounted(function () {\n            GlobalEvent.off($xepulldown, 'mousewheel');\n            GlobalEvent.off($xepulldown, 'mousedown');\n            GlobalEvent.off($xepulldown, 'blur');\n        });\n        var renderVN = function () {\n            var _a, _b;\n            var className = props.className, popupClassName = props.popupClassName, destroyOnClose = props.destroyOnClose, transfer = props.transfer, disabled = props.disabled;\n            var inited = reactData.inited, isActivated = reactData.isActivated, animatVisible = reactData.animatVisible, visiblePanel = reactData.visiblePanel, panelStyle = reactData.panelStyle, panelPlacement = reactData.panelPlacement;\n            var vSize = computeSize.value;\n            var defaultSlot = slots.default;\n            var headerSlot = slots.header;\n            var footerSlot = slots.footer;\n            var dropdownSlot = slots.dropdown;\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-pulldown', className ? (XEUtils.isFunction(className) ? className({ $pulldown: $xepulldown }) : className) : '', (_a = {},\n                        _a[\"size--\".concat(vSize)] = vSize,\n                        _a['is--visivle'] = visiblePanel,\n                        _a['is--disabled'] = disabled,\n                        _a['is--active'] = isActivated,\n                        _a)]\n            }, [\n                h('div', {\n                    ref: refPulldowContent,\n                    class: 'vxe-pulldown--content'\n                }, defaultSlot ? defaultSlot({ $pulldown: $xepulldown }) : []),\n                h(Teleport, {\n                    to: 'body',\n                    disabled: transfer ? !inited : true\n                }, [\n                    h('div', {\n                        ref: refPulldowPnanel,\n                        class: ['vxe-table--ignore-clear vxe-pulldown--panel', popupClassName ? (XEUtils.isFunction(popupClassName) ? popupClassName({ $pulldown: $xepulldown }) : popupClassName) : '', (_b = {},\n                                _b[\"size--\".concat(vSize)] = vSize,\n                                _b['is--transfer'] = transfer,\n                                _b['animat--leave'] = animatVisible,\n                                _b['animat--enter'] = visiblePanel,\n                                _b)],\n                        placement: panelPlacement,\n                        style: panelStyle\n                    }, dropdownSlot ? [\n                        h('div', {\n                            class: 'vxe-pulldown--panel-wrapper'\n                        }, !inited || (destroyOnClose && !visiblePanel && !animatVisible) ? [] : [\n                            headerSlot ? h('div', {\n                                class: 'vxe-pulldown--panel-header'\n                            }, headerSlot({ $pulldown: $xepulldown })) : createCommentVNode(),\n                            h('div', {\n                                class: 'vxe-pulldown--panel-body'\n                            }, dropdownSlot({ $pulldown: $xepulldown })),\n                            footerSlot ? h('div', {\n                                class: 'vxe-pulldown--panel-footer'\n                            }, footerSlot({ $pulldown: $xepulldown })) : createCommentVNode()\n                        ])\n                    ] : [])\n                ])\n            ]);\n        };\n        $xepulldown.renderVN = renderVN;\n        return $xepulldown;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767845,
      "end": 1714699767845,
      "order": "normal"
    }
  ]
}

{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/parseInt.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import root from './_root.js';\nimport toString from './toString.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeParseInt = root.parseInt;\n\n/**\n * Converts `string` to an integer of the specified radix. If `radix` is\n * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n * hexadecimal, in which case a `radix` of `16` is used.\n *\n * **Note:** This method aligns with the\n * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category String\n * @param {string} string The string to convert.\n * @param {number} [radix=10] The radix to interpret `value` by.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.parseInt('08');\n * // => 8\n *\n * _.map(['6', '08', '10'], _.parseInt);\n * // => [6, 8, 10]\n */\nfunction parseInt(string, radix, guard) {\n  if (guard || radix == null) {\n    radix = 0;\n  } else if (radix) {\n    radix = +radix;\n  }\n  return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n}\n\nexport default parseInt;\n",
      "start": 1714699768463,
      "end": 1714699768477,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import root from './_root.js';\nimport toString from './toString.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeParseInt = root.parseInt;\n\n/**\n * Converts `string` to an integer of the specified radix. If `radix` is\n * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n * hexadecimal, in which case a `radix` of `16` is used.\n *\n * **Note:** This method aligns with the\n * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category String\n * @param {string} string The string to convert.\n * @param {number} [radix=10] The radix to interpret `value` by.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.parseInt('08');\n * // => 8\n *\n * _.map(['6', '08', '10'], _.parseInt);\n * // => [6, 8, 10]\n */\nfunction parseInt(string, radix, guard) {\n  if (guard || radix == null) {\n    radix = 0;\n  } else if (radix) {\n    radix = +radix;\n  }\n  return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n}\n\nexport default parseInt;\n",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768477,
      "end": 1714699768477,
      "order": "normal"
    }
  ]
}

{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/indexOf.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import baseIndexOf from './_baseIndexOf.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseIndexOf(array, value, index);\n}\n\nexport default indexOf;\n",
      "start": 1714699768379,
      "end": 1714699768401,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import baseIndexOf from './_baseIndexOf.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseIndexOf(array, value, index);\n}\n\nexport default indexOf;\n",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768401,
      "end": 1714699768401,
      "order": "normal"
    }
  ]
}

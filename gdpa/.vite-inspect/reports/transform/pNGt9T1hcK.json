{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vant@4.8.4_vue@3.4.19/node_modules/vant/es/search/Search.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\nimport { ref, defineComponent } from \"vue\";\nimport { pick, extend, truthProp, preventDefault, makeStringProp, createNamespace } from \"../utils/index.mjs\";\nimport { fieldSharedProps } from \"../field/Field.mjs\";\nimport { useId } from \"../composables/use-id.mjs\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { Field } from \"../field/index.mjs\";\nconst [name, bem, t] = createNamespace(\"search\");\nconst searchProps = extend({}, fieldSharedProps, {\n  label: String,\n  shape: makeStringProp(\"square\"),\n  leftIcon: makeStringProp(\"search\"),\n  clearable: truthProp,\n  actionText: String,\n  background: String,\n  showAction: Boolean\n});\nvar stdin_default = defineComponent({\n  name,\n  props: searchProps,\n  emits: [\"blur\", \"focus\", \"clear\", \"search\", \"cancel\", \"clickInput\", \"clickLeftIcon\", \"clickRightIcon\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots,\n    attrs\n  }) {\n    const id = useId();\n    const fieldRef = ref();\n    const onCancel = () => {\n      if (!slots.action) {\n        emit(\"update:modelValue\", \"\");\n        emit(\"cancel\");\n      }\n    };\n    const onKeypress = (event) => {\n      const ENTER_CODE = 13;\n      if (event.keyCode === ENTER_CODE) {\n        preventDefault(event);\n        emit(\"search\", props.modelValue);\n      }\n    };\n    const getInputId = () => props.id || `${id}-input`;\n    const renderLabel = () => {\n      if (slots.label || props.label) {\n        return _createVNode(\"label\", {\n          \"class\": bem(\"label\"),\n          \"for\": getInputId()\n        }, [slots.label ? slots.label() : props.label]);\n      }\n    };\n    const renderAction = () => {\n      if (props.showAction) {\n        const text = props.actionText || t(\"cancel\");\n        return _createVNode(\"div\", {\n          \"class\": bem(\"action\"),\n          \"role\": \"button\",\n          \"tabindex\": 0,\n          \"onClick\": onCancel\n        }, [slots.action ? slots.action() : text]);\n      }\n    };\n    const blur = () => {\n      var _a;\n      return (_a = fieldRef.value) == null ? void 0 : _a.blur();\n    };\n    const focus = () => {\n      var _a;\n      return (_a = fieldRef.value) == null ? void 0 : _a.focus();\n    };\n    const onBlur = (event) => emit(\"blur\", event);\n    const onFocus = (event) => emit(\"focus\", event);\n    const onClear = (event) => emit(\"clear\", event);\n    const onClickInput = (event) => emit(\"clickInput\", event);\n    const onClickLeftIcon = (event) => emit(\"clickLeftIcon\", event);\n    const onClickRightIcon = (event) => emit(\"clickRightIcon\", event);\n    const fieldPropNames = Object.keys(fieldSharedProps);\n    const renderField = () => {\n      const fieldAttrs = extend({}, attrs, pick(props, fieldPropNames), {\n        id: getInputId()\n      });\n      const onInput = (value) => emit(\"update:modelValue\", value);\n      return _createVNode(Field, _mergeProps({\n        \"ref\": fieldRef,\n        \"type\": \"search\",\n        \"class\": bem(\"field\", {\n          \"with-message\": fieldAttrs.errorMessage\n        }),\n        \"border\": false,\n        \"onBlur\": onBlur,\n        \"onFocus\": onFocus,\n        \"onClear\": onClear,\n        \"onKeypress\": onKeypress,\n        \"onClickInput\": onClickInput,\n        \"onClickLeftIcon\": onClickLeftIcon,\n        \"onClickRightIcon\": onClickRightIcon,\n        \"onUpdate:modelValue\": onInput\n      }, fieldAttrs), pick(slots, [\"left-icon\", \"right-icon\"]));\n    };\n    useExpose({\n      focus,\n      blur\n    });\n    return () => {\n      var _a;\n      return _createVNode(\"div\", {\n        \"class\": bem({\n          \"show-action\": props.showAction\n        }),\n        \"style\": {\n          background: props.background\n        }\n      }, [(_a = slots.left) == null ? void 0 : _a.call(slots), _createVNode(\"div\", {\n        \"class\": bem(\"content\", props.shape)\n      }, [renderLabel(), renderField()]), renderAction()]);\n    };\n  }\n});\nexport {\n  stdin_default as default,\n  searchProps\n};\n",
      "start": 1714699767313,
      "end": 1714699767344,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\nimport { ref, defineComponent } from \"vue\";\nimport { pick, extend, truthProp, preventDefault, makeStringProp, createNamespace } from \"../utils/index.mjs\";\nimport { fieldSharedProps } from \"../field/Field.mjs\";\nimport { useId } from \"../composables/use-id.mjs\";\nimport { useExpose } from \"../composables/use-expose.mjs\";\nimport { Field } from \"../field/index.mjs\";\nconst [name, bem, t] = createNamespace(\"search\");\nconst searchProps = extend({}, fieldSharedProps, {\n  label: String,\n  shape: makeStringProp(\"square\"),\n  leftIcon: makeStringProp(\"search\"),\n  clearable: truthProp,\n  actionText: String,\n  background: String,\n  showAction: Boolean\n});\nvar stdin_default = defineComponent({\n  name,\n  props: searchProps,\n  emits: [\"blur\", \"focus\", \"clear\", \"search\", \"cancel\", \"clickInput\", \"clickLeftIcon\", \"clickRightIcon\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots,\n    attrs\n  }) {\n    const id = useId();\n    const fieldRef = ref();\n    const onCancel = () => {\n      if (!slots.action) {\n        emit(\"update:modelValue\", \"\");\n        emit(\"cancel\");\n      }\n    };\n    const onKeypress = (event) => {\n      const ENTER_CODE = 13;\n      if (event.keyCode === ENTER_CODE) {\n        preventDefault(event);\n        emit(\"search\", props.modelValue);\n      }\n    };\n    const getInputId = () => props.id || `${id}-input`;\n    const renderLabel = () => {\n      if (slots.label || props.label) {\n        return _createVNode(\"label\", {\n          \"class\": bem(\"label\"),\n          \"for\": getInputId()\n        }, [slots.label ? slots.label() : props.label]);\n      }\n    };\n    const renderAction = () => {\n      if (props.showAction) {\n        const text = props.actionText || t(\"cancel\");\n        return _createVNode(\"div\", {\n          \"class\": bem(\"action\"),\n          \"role\": \"button\",\n          \"tabindex\": 0,\n          \"onClick\": onCancel\n        }, [slots.action ? slots.action() : text]);\n      }\n    };\n    const blur = () => {\n      var _a;\n      return (_a = fieldRef.value) == null ? void 0 : _a.blur();\n    };\n    const focus = () => {\n      var _a;\n      return (_a = fieldRef.value) == null ? void 0 : _a.focus();\n    };\n    const onBlur = (event) => emit(\"blur\", event);\n    const onFocus = (event) => emit(\"focus\", event);\n    const onClear = (event) => emit(\"clear\", event);\n    const onClickInput = (event) => emit(\"clickInput\", event);\n    const onClickLeftIcon = (event) => emit(\"clickLeftIcon\", event);\n    const onClickRightIcon = (event) => emit(\"clickRightIcon\", event);\n    const fieldPropNames = Object.keys(fieldSharedProps);\n    const renderField = () => {\n      const fieldAttrs = extend({}, attrs, pick(props, fieldPropNames), {\n        id: getInputId()\n      });\n      const onInput = (value) => emit(\"update:modelValue\", value);\n      return _createVNode(Field, _mergeProps({\n        \"ref\": fieldRef,\n        \"type\": \"search\",\n        \"class\": bem(\"field\", {\n          \"with-message\": fieldAttrs.errorMessage\n        }),\n        \"border\": false,\n        \"onBlur\": onBlur,\n        \"onFocus\": onFocus,\n        \"onClear\": onClear,\n        \"onKeypress\": onKeypress,\n        \"onClickInput\": onClickInput,\n        \"onClickLeftIcon\": onClickLeftIcon,\n        \"onClickRightIcon\": onClickRightIcon,\n        \"onUpdate:modelValue\": onInput\n      }, fieldAttrs), pick(slots, [\"left-icon\", \"right-icon\"]));\n    };\n    useExpose({\n      focus,\n      blur\n    });\n    return () => {\n      var _a;\n      return _createVNode(\"div\", {\n        \"class\": bem({\n          \"show-action\": props.showAction\n        }),\n        \"style\": {\n          background: props.background\n        }\n      }, [(_a = slots.left) == null ? void 0 : _a.call(slots), _createVNode(\"div\", {\n        \"class\": bem(\"content\", props.shape)\n      }, [renderLabel(), renderField()]), renderAction()]);\n    };\n  }\n});\nexport {\n  stdin_default as default,\n  searchProps\n};\n",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767344,
      "end": 1714699767344,
      "order": "normal"
    }
  ]
}

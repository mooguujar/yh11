{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/alignment-pattern.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * Alignment pattern are fixed reference pattern in defined positions\n * in a matrix symbology, which enables the decode software to re-synchronise\n * the coordinate mapping of the image modules in the event of moderate amounts\n * of distortion of the image.\n *\n * Alignment patterns are present only in QR Code symbols of version 2 or larger\n * and their number depends on the symbol version.\n */\n\nconst getSymbolSize = require('./utils').getSymbolSize\n\n/**\n * Calculate the row/column coordinates of the center module of each alignment pattern\n * for the specified QR Code version.\n *\n * The alignment patterns are positioned symmetrically on either side of the diagonal\n * running from the top left corner of the symbol to the bottom right corner.\n *\n * Since positions are simmetrical only half of the coordinates are returned.\n * Each item of the array will represent in turn the x and y coordinate.\n * @see {@link getPositions}\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinate\n */\nexports.getRowColCoords = function getRowColCoords (version) {\n  if (version === 1) return []\n\n  const posCount = Math.floor(version / 7) + 2\n  const size = getSymbolSize(version)\n  const intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2\n  const positions = [size - 7] // Last coord is always (size - 7)\n\n  for (let i = 1; i < posCount - 1; i++) {\n    positions[i] = positions[i - 1] - intervals\n  }\n\n  positions.push(6) // First coord is always 6\n\n  return positions.reverse()\n}\n\n/**\n * Returns an array containing the positions of each alignment pattern.\n * Each array's element represent the center point of the pattern as (x, y) coordinates\n *\n * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}\n * and filtering out the items that overlaps with finder pattern\n *\n * @example\n * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.\n * The alignment patterns, therefore, are to be centered on (row, column)\n * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).\n * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns\n * and are not therefore used for alignment patterns.\n *\n * let pos = getPositions(7)\n * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */\nexports.getPositions = function getPositions (version) {\n  const coords = []\n  const pos = exports.getRowColCoords(version)\n  const posLength = pos.length\n\n  for (let i = 0; i < posLength; i++) {\n    for (let j = 0; j < posLength; j++) {\n      // Skip if position is occupied by finder patterns\n      if ((i === 0 && j === 0) || // top-left\n          (i === 0 && j === posLength - 1) || // bottom-left\n          (i === posLength - 1 && j === 0)) { // top-right\n        continue\n      }\n\n      coords.push([pos[i], pos[j]])\n    }\n  }\n\n  return coords\n}\n",
      "start": 1714699771036,
      "end": 1714699771055,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699771055,
      "end": 1714699771055,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699771055,
      "end": 1714699771055,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699771055,
      "end": 1714699771055,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699771055,
      "end": 1714699771055,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699771055,
      "end": 1714699771055,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699771055,
      "end": 1714699771055,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "/**\n * Alignment pattern are fixed reference pattern in defined positions\n * in a matrix symbology, which enables the decode software to re-synchronise\n * the coordinate mapping of the image modules in the event of moderate amounts\n * of distortion of the image.\n *\n * Alignment patterns are present only in QR Code symbols of version 2 or larger\n * and their number depends on the symbol version.\n */\n\nconst getSymbolSize = require('./utils').getSymbolSize\n\n/**\n * Calculate the row/column coordinates of the center module of each alignment pattern\n * for the specified QR Code version.\n *\n * The alignment patterns are positioned symmetrically on either side of the diagonal\n * running from the top left corner of the symbol to the bottom right corner.\n *\n * Since positions are simmetrical only half of the coordinates are returned.\n * Each item of the array will represent in turn the x and y coordinate.\n * @see {@link getPositions}\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinate\n */\nexports.getRowColCoords = function getRowColCoords (version) {\n  if (version === 1) return []\n\n  const posCount = Math.floor(version / 7) + 2\n  const size = getSymbolSize(version)\n  const intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2\n  const positions = [size - 7] // Last coord is always (size - 7)\n\n  for (let i = 1; i < posCount - 1; i++) {\n    positions[i] = positions[i - 1] - intervals\n  }\n\n  positions.push(6) // First coord is always 6\n\n  return positions.reverse()\n}\n\n/**\n * Returns an array containing the positions of each alignment pattern.\n * Each array's element represent the center point of the pattern as (x, y) coordinates\n *\n * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}\n * and filtering out the items that overlaps with finder pattern\n *\n * @example\n * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.\n * The alignment patterns, therefore, are to be centered on (row, column)\n * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).\n * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns\n * and are not therefore used for alignment patterns.\n *\n * let pos = getPositions(7)\n * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */\nexports.getPositions = function getPositions (version) {\n  const coords = []\n  const pos = exports.getRowColCoords(version)\n  const posLength = pos.length\n\n  for (let i = 0; i < posLength; i++) {\n    for (let j = 0; j < posLength; j++) {\n      // Skip if position is occupied by finder patterns\n      if ((i === 0 && j === 0) || // top-left\n          (i === 0 && j === posLength - 1) || // bottom-left\n          (i === posLength - 1 && j === 0)) { // top-right\n        continue\n      }\n\n      coords.push([pos[i], pos[j]])\n    }\n  }\n\n  return coords\n}\n",
      "start": 1714699771055,
      "end": 1714699771055,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699771055,
      "end": 1714699771055,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699771055,
      "end": 1714699771055,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699771055,
      "end": 1714699771055,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699771055,
      "end": 1714699771055,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699771055,
      "end": 1714699771055,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699771055,
      "end": 1714699771055,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "/**\n * Alignment pattern are fixed reference pattern in defined positions\n * in a matrix symbology, which enables the decode software to re-synchronise\n * the coordinate mapping of the image modules in the event of moderate amounts\n * of distortion of the image.\n *\n * Alignment patterns are present only in QR Code symbols of version 2 or larger\n * and their number depends on the symbol version.\n */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as alignmentPattern } from \"\\u0000/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/alignment-pattern.js?commonjs-exports\";\nimport require$$0 from \"\\u0000/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/utils.js?commonjs-proxy\";\n\n(function (exports) {\n\tconst getSymbolSize = require$$0.getSymbolSize\n\n\t/**\n\t * Calculate the row/column coordinates of the center module of each alignment pattern\n\t * for the specified QR Code version.\n\t *\n\t * The alignment patterns are positioned symmetrically on either side of the diagonal\n\t * running from the top left corner of the symbol to the bottom right corner.\n\t *\n\t * Since positions are simmetrical only half of the coordinates are returned.\n\t * Each item of the array will represent in turn the x and y coordinate.\n\t * @see {@link getPositions}\n\t *\n\t * @param  {Number} version QR Code version\n\t * @return {Array}          Array of coordinate\n\t */\n\texports.getRowColCoords = function getRowColCoords (version) {\n\t  if (version === 1) return []\n\n\t  const posCount = Math.floor(version / 7) + 2\n\t  const size = getSymbolSize(version)\n\t  const intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2\n\t  const positions = [size - 7] // Last coord is always (size - 7)\n\n\t  for (let i = 1; i < posCount - 1; i++) {\n\t    positions[i] = positions[i - 1] - intervals\n\t  }\n\n\t  positions.push(6) // First coord is always 6\n\n\t  return positions.reverse()\n\t}\n\n\t/**\n\t * Returns an array containing the positions of each alignment pattern.\n\t * Each array's element represent the center point of the pattern as (x, y) coordinates\n\t *\n\t * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}\n\t * and filtering out the items that overlaps with finder pattern\n\t *\n\t * @example\n\t * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.\n\t * The alignment patterns, therefore, are to be centered on (row, column)\n\t * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).\n\t * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns\n\t * and are not therefore used for alignment patterns.\n\t *\n\t * let pos = getPositions(7)\n\t * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]\n\t *\n\t * @param  {Number} version QR Code version\n\t * @return {Array}          Array of coordinates\n\t */\n\texports.getPositions = function getPositions (version) {\n\t  const coords = []\n\t  const pos = exports.getRowColCoords(version)\n\t  const posLength = pos.length\n\n\t  for (let i = 0; i < posLength; i++) {\n\t    for (let j = 0; j < posLength; j++) {\n\t      // Skip if position is occupied by finder patterns\n\t      if ((i === 0 && j === 0) || // top-left\n\t          (i === 0 && j === posLength - 1) || // bottom-left\n\t          (i === posLength - 1 && j === 0)) { // top-right\n\t        continue\n\t      }\n\n\t      coords.push([pos[i], pos[j]])\n\t    }\n\t  }\n\n\t  return coords\n\t} \n} (alignmentPattern));\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(alignmentPattern);\nexport { alignmentPattern as __moduleExports };",
      "start": 1714699771055,
      "end": 1714699771072,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;;;;;;;;;CAUA,MAAM,aAAa,GAAG,UAAkB,CAAC,aAAa;AACtD;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,0BAA0B,SAAS,eAAe,EAAE,OAAO,EAAE;CAC7D,EAAE,IAAI,OAAO,KAAK,CAAC,EAAE,OAAO,EAAE;AAC9B;CACA,EAAE,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC;CAC9C,EAAE,MAAM,IAAI,GAAG,aAAa,CAAC,OAAO,CAAC;CACrC,EAAE,MAAM,SAAS,GAAG,IAAI,KAAK,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,EAAE,KAAK,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;CACvF,EAAE,MAAM,SAAS,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC;AAC9B;CACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;CACzC,IAAI,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;CAC/C,GAAG;AACH;CACA,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AACnB;CACA,EAAE,OAAO,SAAS,CAAC,OAAO,EAAE;CAC5B,CAAC;AACD;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,uBAAuB,SAAS,YAAY,EAAE,OAAO,EAAE;CACvD,EAAE,MAAM,MAAM,GAAG,EAAE;CACnB,EAAE,MAAM,GAAG,GAAG,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC;CAC9C,EAAE,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM;AAC9B;CACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;CACtC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;CACxC;CACA,MAAM,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;CAC7B,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,SAAS,GAAG,CAAC,CAAC;CAC1C,WAAW,CAAC,KAAK,SAAS,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;CAC5C,QAAQ,QAAQ;CAChB,OAAO;AACP;CACA,MAAM,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;CACnC,KAAK;CACL,GAAG;AACH;CACA,EAAE,OAAO,MAAM;CACf"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699771072,
      "end": 1714699771072,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699771072,
      "end": 1714699771072,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699771072,
      "end": 1714699771072,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699771072,
      "end": 1714699771072,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699771073,
      "end": 1714699771073,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699771073,
      "end": 1714699771073,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699771073,
      "end": 1714699771073,
      "order": "normal"
    }
  ]
}

{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vant@4.8.4_vue@3.4.19/node_modules/vant/es/time-picker/TimePicker.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { computed, defineComponent, ref, watch } from \"vue\";\nimport { formatValueRange, genOptions, pickerInheritKeys, sharedProps } from \"../date-picker/utils.mjs\";\nimport { createNamespace, extend, isSameValue, makeNumericProp, pick } from \"../utils/index.mjs\";\nimport { Picker } from \"../picker/index.mjs\";\nconst [name] = createNamespace(\"time-picker\");\nconst validateTime = (val) => /^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/.test(val);\nconst fullColumns = [\"hour\", \"minute\", \"second\"];\nconst timePickerProps = extend({}, sharedProps, {\n  minHour: makeNumericProp(0),\n  maxHour: makeNumericProp(23),\n  minMinute: makeNumericProp(0),\n  maxMinute: makeNumericProp(59),\n  minSecond: makeNumericProp(0),\n  maxSecond: makeNumericProp(59),\n  minTime: {\n    type: String,\n    validator: validateTime\n  },\n  maxTime: {\n    type: String,\n    validator: validateTime\n  },\n  columnsType: {\n    type: Array,\n    default: () => [\"hour\", \"minute\"]\n  },\n  filter: Function\n});\nvar stdin_default = defineComponent({\n  name,\n  props: timePickerProps,\n  emits: [\"confirm\", \"cancel\", \"change\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const currentValues = ref(props.modelValue);\n    const getValidTime = (time) => {\n      const timeLimitArr = time.split(\":\");\n      return fullColumns.map((col, i) => props.columnsType.includes(col) ? timeLimitArr[i] : \"00\");\n    };\n    const columns = computed(() => {\n      let {\n        minHour,\n        maxHour,\n        minMinute,\n        maxMinute,\n        minSecond,\n        maxSecond\n      } = props;\n      if (props.minTime || props.maxTime) {\n        const fullTime = {\n          hour: 0,\n          minute: 0,\n          second: 0\n        };\n        props.columnsType.forEach((col, i) => {\n          var _a;\n          fullTime[col] = (_a = currentValues.value[i]) != null ? _a : 0;\n        });\n        const {\n          hour,\n          minute\n        } = fullTime;\n        if (props.minTime) {\n          const [minH, minM, minS] = getValidTime(props.minTime);\n          minHour = minH;\n          minMinute = +hour <= +minHour ? minM : \"00\";\n          minSecond = +hour <= +minHour && +minute <= +minMinute ? minS : \"00\";\n        }\n        if (props.maxTime) {\n          const [maxH, maxM, maxS] = getValidTime(props.maxTime);\n          maxHour = maxH;\n          maxMinute = +hour >= +maxHour ? maxM : \"59\";\n          maxSecond = +hour >= +maxHour && +minute >= +maxMinute ? maxS : \"59\";\n        }\n      }\n      return props.columnsType.map((type) => {\n        const {\n          filter,\n          formatter\n        } = props;\n        switch (type) {\n          case \"hour\":\n            return genOptions(+minHour, +maxHour, type, formatter, filter, currentValues.value);\n          case \"minute\":\n            return genOptions(+minMinute, +maxMinute, type, formatter, filter, currentValues.value);\n          case \"second\":\n            return genOptions(+minSecond, +maxSecond, type, formatter, filter, currentValues.value);\n          default:\n            if (process.env.NODE_ENV !== \"production\") {\n              throw new Error(`[Vant] DatePicker: unsupported columns type: ${type}`);\n            }\n            return [];\n        }\n      });\n    });\n    watch(currentValues, (newValues) => {\n      if (!isSameValue(newValues, props.modelValue)) {\n        emit(\"update:modelValue\", newValues);\n      }\n    });\n    watch(() => props.modelValue, (newValues) => {\n      newValues = formatValueRange(newValues, columns.value);\n      if (!isSameValue(newValues, currentValues.value)) {\n        currentValues.value = newValues;\n      }\n    }, {\n      immediate: true\n    });\n    const onChange = (...args) => emit(\"change\", ...args);\n    const onCancel = (...args) => emit(\"cancel\", ...args);\n    const onConfirm = (...args) => emit(\"confirm\", ...args);\n    return () => _createVNode(Picker, _mergeProps({\n      \"modelValue\": currentValues.value,\n      \"onUpdate:modelValue\": ($event) => currentValues.value = $event,\n      \"columns\": columns.value,\n      \"onChange\": onChange,\n      \"onCancel\": onCancel,\n      \"onConfirm\": onConfirm\n    }, pick(props, pickerInheritKeys)), slots);\n  }\n});\nexport {\n  stdin_default as default,\n  timePickerProps\n};\n",
      "start": 1714699767508,
      "end": 1714699767530,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767530,
      "end": 1714699767530,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767530,
      "end": 1714699767530,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767530,
      "end": 1714699767530,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767530,
      "end": 1714699767530,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767530,
      "end": 1714699767530,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767530,
      "end": 1714699767530,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { computed, defineComponent, ref, watch } from \"vue\";\nimport { formatValueRange, genOptions, pickerInheritKeys, sharedProps } from \"../date-picker/utils.mjs\";\nimport { createNamespace, extend, isSameValue, makeNumericProp, pick } from \"../utils/index.mjs\";\nimport { Picker } from \"../picker/index.mjs\";\nconst [name] = createNamespace(\"time-picker\");\nconst validateTime = (val) => /^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/.test(val);\nconst fullColumns = [\"hour\", \"minute\", \"second\"];\nconst timePickerProps = extend({}, sharedProps, {\n  minHour: makeNumericProp(0),\n  maxHour: makeNumericProp(23),\n  minMinute: makeNumericProp(0),\n  maxMinute: makeNumericProp(59),\n  minSecond: makeNumericProp(0),\n  maxSecond: makeNumericProp(59),\n  minTime: {\n    type: String,\n    validator: validateTime\n  },\n  maxTime: {\n    type: String,\n    validator: validateTime\n  },\n  columnsType: {\n    type: Array,\n    default: () => [\"hour\", \"minute\"]\n  },\n  filter: Function\n});\nvar stdin_default = defineComponent({\n  name,\n  props: timePickerProps,\n  emits: [\"confirm\", \"cancel\", \"change\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const currentValues = ref(props.modelValue);\n    const getValidTime = (time) => {\n      const timeLimitArr = time.split(\":\");\n      return fullColumns.map((col, i) => props.columnsType.includes(col) ? timeLimitArr[i] : \"00\");\n    };\n    const columns = computed(() => {\n      let {\n        minHour,\n        maxHour,\n        minMinute,\n        maxMinute,\n        minSecond,\n        maxSecond\n      } = props;\n      if (props.minTime || props.maxTime) {\n        const fullTime = {\n          hour: 0,\n          minute: 0,\n          second: 0\n        };\n        props.columnsType.forEach((col, i) => {\n          var _a;\n          fullTime[col] = (_a = currentValues.value[i]) != null ? _a : 0;\n        });\n        const {\n          hour,\n          minute\n        } = fullTime;\n        if (props.minTime) {\n          const [minH, minM, minS] = getValidTime(props.minTime);\n          minHour = minH;\n          minMinute = +hour <= +minHour ? minM : \"00\";\n          minSecond = +hour <= +minHour && +minute <= +minMinute ? minS : \"00\";\n        }\n        if (props.maxTime) {\n          const [maxH, maxM, maxS] = getValidTime(props.maxTime);\n          maxHour = maxH;\n          maxMinute = +hour >= +maxHour ? maxM : \"59\";\n          maxSecond = +hour >= +maxHour && +minute >= +maxMinute ? maxS : \"59\";\n        }\n      }\n      return props.columnsType.map((type) => {\n        const {\n          filter,\n          formatter\n        } = props;\n        switch (type) {\n          case \"hour\":\n            return genOptions(+minHour, +maxHour, type, formatter, filter, currentValues.value);\n          case \"minute\":\n            return genOptions(+minMinute, +maxMinute, type, formatter, filter, currentValues.value);\n          case \"second\":\n            return genOptions(+minSecond, +maxSecond, type, formatter, filter, currentValues.value);\n          default:\n            if (process.env.NODE_ENV !== \"production\") {\n              throw new Error(`[Vant] DatePicker: unsupported columns type: ${type}`);\n            }\n            return [];\n        }\n      });\n    });\n    watch(currentValues, (newValues) => {\n      if (!isSameValue(newValues, props.modelValue)) {\n        emit(\"update:modelValue\", newValues);\n      }\n    });\n    watch(() => props.modelValue, (newValues) => {\n      newValues = formatValueRange(newValues, columns.value);\n      if (!isSameValue(newValues, currentValues.value)) {\n        currentValues.value = newValues;\n      }\n    }, {\n      immediate: true\n    });\n    const onChange = (...args) => emit(\"change\", ...args);\n    const onCancel = (...args) => emit(\"cancel\", ...args);\n    const onConfirm = (...args) => emit(\"confirm\", ...args);\n    return () => _createVNode(Picker, _mergeProps({\n      \"modelValue\": currentValues.value,\n      \"onUpdate:modelValue\": ($event) => currentValues.value = $event,\n      \"columns\": columns.value,\n      \"onChange\": onChange,\n      \"onCancel\": onCancel,\n      \"onConfirm\": onConfirm\n    }, pick(props, pickerInheritKeys)), slots);\n  }\n});\nexport {\n  stdin_default as default,\n  timePickerProps\n};\n",
      "start": 1714699767530,
      "end": 1714699767530,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767530,
      "end": 1714699767530,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { computed, defineComponent, ref, watch } from \"vue\";\nimport { formatValueRange, genOptions, pickerInheritKeys, sharedProps } from \"../date-picker/utils.mjs\";\nimport { createNamespace, extend, isSameValue, makeNumericProp, pick } from \"../utils/index.mjs\";\nimport { Picker } from \"../picker/index.mjs\";\nconst [name] = createNamespace(\"time-picker\");\nconst validateTime = (val) => /^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/.test(val);\nconst fullColumns = [\"hour\", \"minute\", \"second\"];\nconst timePickerProps = extend({}, sharedProps, {\n  minHour: makeNumericProp(0),\n  maxHour: makeNumericProp(23),\n  minMinute: makeNumericProp(0),\n  maxMinute: makeNumericProp(59),\n  minSecond: makeNumericProp(0),\n  maxSecond: makeNumericProp(59),\n  minTime: {\n    type: String,\n    validator: validateTime\n  },\n  maxTime: {\n    type: String,\n    validator: validateTime\n  },\n  columnsType: {\n    type: Array,\n    default: () => [\"hour\", \"minute\"]\n  },\n  filter: Function\n});\nvar stdin_default = defineComponent({\n  name,\n  props: timePickerProps,\n  emits: [\"confirm\", \"cancel\", \"change\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const currentValues = ref(props.modelValue);\n    const getValidTime = (time) => {\n      const timeLimitArr = time.split(\":\");\n      return fullColumns.map((col, i) => props.columnsType.includes(col) ? timeLimitArr[i] : \"00\");\n    };\n    const columns = computed(() => {\n      let {\n        minHour,\n        maxHour,\n        minMinute,\n        maxMinute,\n        minSecond,\n        maxSecond\n      } = props;\n      if (props.minTime || props.maxTime) {\n        const fullTime = {\n          hour: 0,\n          minute: 0,\n          second: 0\n        };\n        props.columnsType.forEach((col, i) => {\n          var _a;\n          fullTime[col] = (_a = currentValues.value[i]) != null ? _a : 0;\n        });\n        const {\n          hour,\n          minute\n        } = fullTime;\n        if (props.minTime) {\n          const [minH, minM, minS] = getValidTime(props.minTime);\n          minHour = minH;\n          minMinute = +hour <= +minHour ? minM : \"00\";\n          minSecond = +hour <= +minHour && +minute <= +minMinute ? minS : \"00\";\n        }\n        if (props.maxTime) {\n          const [maxH, maxM, maxS] = getValidTime(props.maxTime);\n          maxHour = maxH;\n          maxMinute = +hour >= +maxHour ? maxM : \"59\";\n          maxSecond = +hour >= +maxHour && +minute >= +maxMinute ? maxS : \"59\";\n        }\n      }\n      return props.columnsType.map((type) => {\n        const {\n          filter,\n          formatter\n        } = props;\n        switch (type) {\n          case \"hour\":\n            return genOptions(+minHour, +maxHour, type, formatter, filter, currentValues.value);\n          case \"minute\":\n            return genOptions(+minMinute, +maxMinute, type, formatter, filter, currentValues.value);\n          case \"second\":\n            return genOptions(+minSecond, +maxSecond, type, formatter, filter, currentValues.value);\n          default:\n            if (true) {\n              throw new Error(`[Vant] DatePicker: unsupported columns type: ${type}`);\n            }\n            return [];\n        }\n      });\n    });\n    watch(currentValues, (newValues) => {\n      if (!isSameValue(newValues, props.modelValue)) {\n        emit(\"update:modelValue\", newValues);\n      }\n    });\n    watch(() => props.modelValue, (newValues) => {\n      newValues = formatValueRange(newValues, columns.value);\n      if (!isSameValue(newValues, currentValues.value)) {\n        currentValues.value = newValues;\n      }\n    }, {\n      immediate: true\n    });\n    const onChange = (...args) => emit(\"change\", ...args);\n    const onCancel = (...args) => emit(\"cancel\", ...args);\n    const onConfirm = (...args) => emit(\"confirm\", ...args);\n    return () => _createVNode(Picker, _mergeProps({\n      \"modelValue\": currentValues.value,\n      \"onUpdate:modelValue\": ($event) => currentValues.value = $event,\n      \"columns\": columns.value,\n      \"onChange\": onChange,\n      \"onCancel\": onCancel,\n      \"onConfirm\": onConfirm\n    }, pick(props, pickerInheritKeys)), slots);\n  }\n});\nexport {\n  stdin_default as default,\n  timePickerProps\n};\n",
      "start": 1714699767530,
      "end": 1714699767641,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1714699767641,
      "end": 1714699767641,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767641,
      "end": 1714699767641,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767641,
      "end": 1714699767641,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767641,
      "end": 1714699767641,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767641,
      "end": 1714699767641,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767641,
      "end": 1714699767641,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767641,
      "end": 1714699767641,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767641,
      "end": 1714699767641,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767641,
      "end": 1714699767641,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767641,
      "end": 1714699767641,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767641,
      "end": 1714699767641,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767641,
      "end": 1714699767641,
      "order": "normal"
    }
  ]
}

{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/table/src/cell.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { h } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { VXETable } from '../../v-x-e-table';\nimport { getFuncText, isEnableConf, formatText, eqEmptyValue } from '../../tools/utils';\nimport { updateCellTitle } from '../../tools/dom';\nimport { createColumn, getRowid } from './util';\nimport { getSlotVNs } from '../../tools/vn';\nfunction renderTitlePrefixIcon(params) {\n    var $table = params.$table, column = params.column;\n    var titlePrefix = column.titlePrefix || column.titleHelp;\n    return titlePrefix ? [\n        h('i', {\n            class: ['vxe-cell-title-prefix-icon', titlePrefix.icon || GlobalConfig.icon.TABLE_TITLE_PREFIX],\n            onMouseenter: function (evnt) {\n                $table.triggerHeaderTitleEvent(evnt, titlePrefix, params);\n            },\n            onMouseleave: function (evnt) {\n                $table.handleTargetLeaveEvent(evnt);\n            }\n        })\n    ] : [];\n}\nfunction renderTitleSuffixIcon(params) {\n    var $table = params.$table, column = params.column;\n    var titleSuffix = column.titleSuffix;\n    return titleSuffix ? [\n        h('i', {\n            class: ['vxe-cell-title-suffix-icon', titleSuffix.icon || GlobalConfig.icon.TABLE_TITLE_SUFFIX],\n            onMouseenter: function (evnt) {\n                $table.triggerHeaderTitleEvent(evnt, titleSuffix, params);\n            },\n            onMouseleave: function (evnt) {\n                $table.handleTargetLeaveEvent(evnt);\n            }\n        })\n    ] : [];\n}\nfunction renderTitleContent(params, content) {\n    var $table = params.$table, column = params.column;\n    var props = $table.props, reactData = $table.reactData;\n    var computeTooltipOpts = $table.getComputeMaps().computeTooltipOpts;\n    var allColumnHeaderOverflow = props.showHeaderOverflow;\n    var type = column.type, showHeaderOverflow = column.showHeaderOverflow;\n    var tooltipOpts = computeTooltipOpts.value;\n    var showAllTip = tooltipOpts.showAll;\n    var headOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;\n    var showTitle = headOverflow === 'title';\n    var showTooltip = headOverflow === true || headOverflow === 'tooltip';\n    var ons = {};\n    if (showTitle || showTooltip || showAllTip) {\n        ons.onMouseenter = function (evnt) {\n            if (reactData._isResize) {\n                return;\n            }\n            if (showTitle) {\n                updateCellTitle(evnt.currentTarget, column);\n            }\n            else if (showTooltip || showAllTip) {\n                $table.triggerHeaderTooltipEvent(evnt, params);\n            }\n        };\n    }\n    if (showTooltip || showAllTip) {\n        ons.onMouseleave = function (evnt) {\n            if (reactData._isResize) {\n                return;\n            }\n            if (showTooltip || showAllTip) {\n                $table.handleTargetLeaveEvent(evnt);\n            }\n        };\n    }\n    return [\n        type === 'html' && XEUtils.isString(content) ? h('span', __assign({ class: 'vxe-cell--title', innerHTML: content }, ons)) : h('span', __assign({ class: 'vxe-cell--title' }, ons), getSlotVNs(content))\n    ];\n}\nfunction getFooterContent(params) {\n    var $table = params.$table, column = params.column, _columnIndex = params._columnIndex, items = params.items;\n    var slots = column.slots, editRender = column.editRender, cellRender = column.cellRender;\n    var renderOpts = editRender || cellRender;\n    var footerSlot = slots ? slots.footer : null;\n    if (footerSlot) {\n        return $table.callSlot(footerSlot, params);\n    }\n    if (renderOpts) {\n        var compConf = VXETable.renderer.get(renderOpts.name);\n        if (compConf && compConf.renderFooter) {\n            return getSlotVNs(compConf.renderFooter(renderOpts, params));\n        }\n    }\n    return [formatText(items[_columnIndex], 1)];\n}\nfunction getDefaultCellLabel(params) {\n    var $table = params.$table, row = params.row, column = params.column;\n    return formatText($table.getCellLabel(row, column), 1);\n}\nexport var Cell = {\n    createColumn: function ($xetable, columnOpts) {\n        var type = columnOpts.type, sortable = columnOpts.sortable, filters = columnOpts.filters, editRender = columnOpts.editRender, treeNode = columnOpts.treeNode;\n        var props = $xetable.props;\n        var editConfig = props.editConfig;\n        var _a = $xetable.getComputeMaps(), computeEditOpts = _a.computeEditOpts, computeCheckboxOpts = _a.computeCheckboxOpts;\n        var checkboxOpts = computeCheckboxOpts.value;\n        var editOpts = computeEditOpts.value;\n        var renConfs = {\n            renderHeader: Cell.renderDefaultHeader,\n            renderCell: treeNode ? Cell.renderTreeCell : Cell.renderDefaultCell,\n            renderFooter: Cell.renderDefaultFooter\n        };\n        switch (type) {\n            case 'seq':\n                renConfs.renderHeader = Cell.renderSeqHeader;\n                renConfs.renderCell = treeNode ? Cell.renderTreeIndexCell : Cell.renderSeqCell;\n                break;\n            case 'radio':\n                renConfs.renderHeader = Cell.renderRadioHeader;\n                renConfs.renderCell = treeNode ? Cell.renderTreeRadioCell : Cell.renderRadioCell;\n                break;\n            case 'checkbox':\n                renConfs.renderHeader = Cell.renderCheckboxHeader;\n                renConfs.renderCell = checkboxOpts.checkField ? (treeNode ? Cell.renderTreeSelectionCellByProp : Cell.renderCheckboxCellByProp) : (treeNode ? Cell.renderTreeSelectionCell : Cell.renderCheckboxCell);\n                break;\n            case 'expand':\n                renConfs.renderCell = Cell.renderExpandCell;\n                renConfs.renderData = Cell.renderExpandData;\n                break;\n            case 'html':\n                renConfs.renderCell = treeNode ? Cell.renderTreeHTMLCell : Cell.renderHTMLCell;\n                if (filters && sortable) {\n                    renConfs.renderHeader = Cell.renderSortAndFilterHeader;\n                }\n                else if (sortable) {\n                    renConfs.renderHeader = Cell.renderSortHeader;\n                }\n                else if (filters) {\n                    renConfs.renderHeader = Cell.renderFilterHeader;\n                }\n                break;\n            default:\n                if (editConfig && editRender) {\n                    renConfs.renderHeader = Cell.renderEditHeader;\n                    renConfs.renderCell = editOpts.mode === 'cell' ? (treeNode ? Cell.renderTreeCellEdit : Cell.renderCellEdit) : (treeNode ? Cell.renderTreeRowEdit : Cell.renderRowEdit);\n                }\n                else if (filters && sortable) {\n                    renConfs.renderHeader = Cell.renderSortAndFilterHeader;\n                }\n                else if (sortable) {\n                    renConfs.renderHeader = Cell.renderSortHeader;\n                }\n                else if (filters) {\n                    renConfs.renderHeader = Cell.renderFilterHeader;\n                }\n        }\n        return createColumn($xetable, columnOpts, renConfs);\n    },\n    /**\n     * 单元格\n     */\n    renderHeaderTitle: function (params) {\n        var $table = params.$table, column = params.column;\n        var slots = column.slots, editRender = column.editRender, cellRender = column.cellRender;\n        var renderOpts = editRender || cellRender;\n        var headerSlot = slots ? slots.header : null;\n        if (headerSlot) {\n            return renderTitleContent(params, $table.callSlot(headerSlot, params));\n        }\n        if (renderOpts) {\n            var compConf = VXETable.renderer.get(renderOpts.name);\n            if (compConf && compConf.renderHeader) {\n                return renderTitleContent(params, getSlotVNs(compConf.renderHeader(renderOpts, params)));\n            }\n        }\n        return renderTitleContent(params, formatText(column.getTitle(), 1));\n    },\n    renderDefaultHeader: function (params) {\n        return renderTitlePrefixIcon(params).concat(Cell.renderHeaderTitle(params)).concat(renderTitleSuffixIcon(params));\n    },\n    renderDefaultCell: function (params) {\n        var $table = params.$table, row = params.row, column = params.column;\n        var slots = column.slots, editRender = column.editRender, cellRender = column.cellRender;\n        var renderOpts = editRender || cellRender;\n        var defaultSlot = slots ? slots.default : null;\n        if (defaultSlot) {\n            return $table.callSlot(defaultSlot, params);\n        }\n        if (renderOpts) {\n            var funName = editRender ? 'renderCell' : 'renderDefault';\n            var compConf = VXETable.renderer.get(renderOpts.name);\n            var compFn = compConf ? compConf[funName] : null;\n            if (compFn) {\n                return getSlotVNs(compFn(renderOpts, Object.assign({ $type: editRender ? 'edit' : 'cell' }, params)));\n            }\n        }\n        var cellValue = $table.getCellLabel(row, column);\n        var cellPlaceholder = editRender ? editRender.placeholder : '';\n        return [\n            h('span', {\n                class: 'vxe-cell--label'\n            }, editRender && eqEmptyValue(cellValue) ? [\n                // 如果设置占位符\n                h('span', {\n                    class: 'vxe-cell--placeholder'\n                }, formatText(getFuncText(cellPlaceholder), 1))\n            ] : formatText(cellValue, 1))\n        ];\n    },\n    renderTreeCell: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderDefaultCell(params));\n    },\n    renderDefaultFooter: function (params) {\n        return [\n            h('span', {\n                class: 'vxe-cell--item'\n            }, getFooterContent(params))\n        ];\n    },\n    /**\n     * 树节点\n     */\n    renderTreeIcon: function (params, cellVNodes) {\n        var $table = params.$table, isHidden = params.isHidden;\n        var reactData = $table.reactData;\n        var computeTreeOpts = $table.getComputeMaps().computeTreeOpts;\n        var treeExpandedMaps = reactData.treeExpandedMaps, treeExpandLazyLoadedMaps = reactData.treeExpandLazyLoadedMaps;\n        var treeOpts = computeTreeOpts.value;\n        var row = params.row, column = params.column, level = params.level;\n        var slots = column.slots;\n        var indent = treeOpts.indent, lazy = treeOpts.lazy, trigger = treeOpts.trigger, iconLoaded = treeOpts.iconLoaded, showIcon = treeOpts.showIcon, iconOpen = treeOpts.iconOpen, iconClose = treeOpts.iconClose;\n        var childrenField = treeOpts.children || treeOpts.childrenField;\n        var hasChildField = treeOpts.hasChild || treeOpts.hasChildField;\n        var rowChilds = row[childrenField];\n        var iconSlot = slots ? slots.icon : null;\n        var hasLazyChilds = false;\n        var isAceived = false;\n        var isLazyLoaded = false;\n        var ons = {};\n        if (iconSlot) {\n            return $table.callSlot(iconSlot, params);\n        }\n        if (!isHidden) {\n            var rowid = getRowid($table, row);\n            isAceived = !!treeExpandedMaps[rowid];\n            if (lazy) {\n                isLazyLoaded = !!treeExpandLazyLoadedMaps[rowid];\n                hasLazyChilds = row[hasChildField];\n            }\n        }\n        if (!trigger || trigger === 'default') {\n            ons.onClick = function (evnt) {\n                evnt.stopPropagation();\n                $table.triggerTreeExpandEvent(evnt, params);\n            };\n        }\n        return [\n            h('div', {\n                class: ['vxe-cell--tree-node', {\n                        'is--active': isAceived\n                    }],\n                style: {\n                    paddingLeft: \"\".concat(level * indent, \"px\")\n                }\n            }, [\n                showIcon && ((rowChilds && rowChilds.length) || hasLazyChilds) ? [\n                    h('div', __assign({ class: 'vxe-tree--btn-wrapper' }, ons), [\n                        h('i', {\n                            class: ['vxe-tree--node-btn', isLazyLoaded ? (iconLoaded || GlobalConfig.icon.TABLE_TREE_LOADED) : (isAceived ? (iconOpen || GlobalConfig.icon.TABLE_TREE_OPEN) : (iconClose || GlobalConfig.icon.TABLE_TREE_CLOSE))]\n                        })\n                    ])\n                ] : null,\n                h('div', {\n                    class: 'vxe-tree-cell'\n                }, cellVNodes)\n            ])\n        ];\n    },\n    /**\n     * 索引\n     */\n    renderSeqHeader: function (params) {\n        var $table = params.$table, column = params.column;\n        var slots = column.slots;\n        var headerSlot = slots ? slots.header : null;\n        return renderTitleContent(params, headerSlot ? $table.callSlot(headerSlot, params) : formatText(column.getTitle(), 1));\n    },\n    renderSeqCell: function (params) {\n        var $table = params.$table, column = params.column;\n        var props = $table.props;\n        var treeConfig = props.treeConfig;\n        var computeSeqOpts = $table.getComputeMaps().computeSeqOpts;\n        var seqOpts = computeSeqOpts.value;\n        var slots = column.slots;\n        var defaultSlot = slots ? slots.default : null;\n        if (defaultSlot) {\n            return $table.callSlot(defaultSlot, params);\n        }\n        var seq = params.seq;\n        var seqMethod = seqOpts.seqMethod;\n        return [formatText(seqMethod ? seqMethod(params) : treeConfig ? seq : (seqOpts.startIndex || 0) + seq, 1)];\n    },\n    renderTreeIndexCell: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderSeqCell(params));\n    },\n    /**\n     * 单选\n     */\n    renderRadioHeader: function (params) {\n        var $table = params.$table, column = params.column;\n        var slots = column.slots;\n        var headerSlot = slots ? slots.header : null;\n        var titleSlot = slots ? slots.title : null;\n        return renderTitleContent(params, headerSlot ? $table.callSlot(headerSlot, params) : [\n            h('span', {\n                class: 'vxe-radio--label'\n            }, titleSlot ? $table.callSlot(titleSlot, params) : formatText(column.getTitle(), 1))\n        ]);\n    },\n    renderRadioCell: function (params) {\n        var $table = params.$table, column = params.column, isHidden = params.isHidden;\n        var reactData = $table.reactData;\n        var computeRadioOpts = $table.getComputeMaps().computeRadioOpts;\n        var selectRadioRow = reactData.selectRadioRow;\n        var radioOpts = computeRadioOpts.value;\n        var slots = column.slots;\n        var labelField = radioOpts.labelField, checkMethod = radioOpts.checkMethod, visibleMethod = radioOpts.visibleMethod;\n        var row = params.row;\n        var defaultSlot = slots ? slots.default : null;\n        var radioSlot = slots ? slots.radio : null;\n        var isChecked = $table.eqRow(row, selectRadioRow);\n        var isVisible = !visibleMethod || visibleMethod({ row: row });\n        var isDisabled = !!checkMethod;\n        var ons;\n        if (!isHidden) {\n            ons = {\n                onClick: function (evnt) {\n                    if (!isDisabled && isVisible) {\n                        evnt.stopPropagation();\n                        $table.triggerRadioRowEvent(evnt, params);\n                    }\n                }\n            };\n            if (checkMethod) {\n                isDisabled = !checkMethod({ row: row });\n            }\n        }\n        var radioParams = __assign(__assign({}, params), { checked: isChecked, disabled: isDisabled, visible: isVisible });\n        if (radioSlot) {\n            return $table.callSlot(radioSlot, radioParams);\n        }\n        var radioVNs = [];\n        if (isVisible) {\n            radioVNs.push(h('span', {\n                class: ['vxe-radio--icon', isChecked ? GlobalConfig.icon.TABLE_RADIO_CHECKED : GlobalConfig.icon.TABLE_RADIO_UNCHECKED]\n            }));\n        }\n        if (defaultSlot || labelField) {\n            radioVNs.push(h('span', {\n                class: 'vxe-radio--label'\n            }, defaultSlot ? $table.callSlot(defaultSlot, radioParams) : XEUtils.get(row, labelField)));\n        }\n        return [\n            h('span', __assign({ class: ['vxe-cell--radio', {\n                        'is--checked': isChecked,\n                        'is--disabled': isDisabled\n                    }] }, ons), radioVNs)\n        ];\n    },\n    renderTreeRadioCell: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderRadioCell(params));\n    },\n    /**\n     * 多选\n     */\n    renderCheckboxHeader: function (params) {\n        var $table = params.$table, column = params.column, isHidden = params.isHidden;\n        var reactData = $table.reactData;\n        var _a = $table.getComputeMaps(), computeIsAllCheckboxDisabled = _a.computeIsAllCheckboxDisabled, computeCheckboxOpts = _a.computeCheckboxOpts;\n        var isAllCheckboxSelected = reactData.isAllSelected, isAllCheckboxIndeterminate = reactData.isIndeterminate;\n        var isAllCheckboxDisabled = computeIsAllCheckboxDisabled.value;\n        var slots = column.slots;\n        var headerSlot = slots ? slots.header : null;\n        var titleSlot = slots ? slots.title : null;\n        var checkboxOpts = computeCheckboxOpts.value;\n        var headerTitle = column.getTitle();\n        var ons;\n        if (!isHidden) {\n            ons = {\n                onClick: function (evnt) {\n                    if (!isAllCheckboxDisabled) {\n                        evnt.stopPropagation();\n                        $table.triggerCheckAllEvent(evnt, !isAllCheckboxSelected);\n                    }\n                }\n            };\n        }\n        var checkboxParams = __assign(__assign({}, params), { checked: isAllCheckboxSelected, disabled: isAllCheckboxDisabled, indeterminate: isAllCheckboxIndeterminate });\n        if (headerSlot) {\n            return renderTitleContent(checkboxParams, $table.callSlot(headerSlot, checkboxParams));\n        }\n        if (checkboxOpts.checkStrictly ? !checkboxOpts.showHeader : checkboxOpts.showHeader === false) {\n            return renderTitleContent(checkboxParams, [\n                h('span', {\n                    class: 'vxe-checkbox--label'\n                }, titleSlot ? $table.callSlot(titleSlot, checkboxParams) : headerTitle)\n            ]);\n        }\n        return renderTitleContent(checkboxParams, [\n            h('span', __assign({ class: ['vxe-cell--checkbox', {\n                        'is--checked': isAllCheckboxSelected,\n                        'is--disabled': isAllCheckboxDisabled,\n                        'is--indeterminate': isAllCheckboxIndeterminate\n                    }], title: GlobalConfig.i18n('vxe.table.allTitle') }, ons), [\n                h('span', {\n                    class: ['vxe-checkbox--icon', isAllCheckboxIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isAllCheckboxSelected ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]\n                })\n            ].concat(titleSlot || headerTitle ? [\n                h('span', {\n                    class: 'vxe-checkbox--label'\n                }, titleSlot ? $table.callSlot(titleSlot, checkboxParams) : headerTitle)\n            ] : []))\n        ]);\n    },\n    renderCheckboxCell: function (params) {\n        var $table = params.$table, row = params.row, column = params.column, isHidden = params.isHidden;\n        var props = $table.props, reactData = $table.reactData;\n        var treeConfig = props.treeConfig;\n        var selectCheckboxMaps = reactData.selectCheckboxMaps, treeIndeterminateMaps = reactData.treeIndeterminateMaps;\n        var computeCheckboxOpts = $table.getComputeMaps().computeCheckboxOpts;\n        var checkboxOpts = computeCheckboxOpts.value;\n        var labelField = checkboxOpts.labelField, checkMethod = checkboxOpts.checkMethod, visibleMethod = checkboxOpts.visibleMethod;\n        var slots = column.slots;\n        var defaultSlot = slots ? slots.default : null;\n        var checkboxSlot = slots ? slots.checkbox : null;\n        var indeterminate = false;\n        var isChecked = false;\n        var isVisible = !visibleMethod || visibleMethod({ row: row });\n        var isDisabled = !!checkMethod;\n        var ons;\n        if (!isHidden) {\n            var rowid = getRowid($table, row);\n            isChecked = !!selectCheckboxMaps[rowid];\n            ons = {\n                onClick: function (evnt) {\n                    if (!isDisabled && isVisible) {\n                        evnt.stopPropagation();\n                        $table.triggerCheckRowEvent(evnt, params, !isChecked);\n                    }\n                }\n            };\n            if (checkMethod) {\n                isDisabled = !checkMethod({ row: row });\n            }\n            if (treeConfig) {\n                indeterminate = !!treeIndeterminateMaps[rowid];\n            }\n        }\n        var checkboxParams = __assign(__assign({}, params), { checked: isChecked, disabled: isDisabled, visible: isVisible, indeterminate: indeterminate });\n        if (checkboxSlot) {\n            return $table.callSlot(checkboxSlot, checkboxParams);\n        }\n        var checkVNs = [];\n        if (isVisible) {\n            checkVNs.push(h('span', {\n                class: ['vxe-checkbox--icon', indeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]\n            }));\n        }\n        if (defaultSlot || labelField) {\n            checkVNs.push(h('span', {\n                class: 'vxe-checkbox--label'\n            }, defaultSlot ? $table.callSlot(defaultSlot, checkboxParams) : XEUtils.get(row, labelField)));\n        }\n        return [\n            h('span', __assign({ class: ['vxe-cell--checkbox', {\n                        'is--checked': isChecked,\n                        'is--disabled': isDisabled,\n                        'is--indeterminate': indeterminate\n                    }] }, ons), checkVNs)\n        ];\n    },\n    renderTreeSelectionCell: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderCheckboxCell(params));\n    },\n    renderCheckboxCellByProp: function (params) {\n        var $table = params.$table, row = params.row, column = params.column, isHidden = params.isHidden;\n        var props = $table.props, reactData = $table.reactData;\n        var treeConfig = props.treeConfig;\n        var treeIndeterminateMaps = reactData.treeIndeterminateMaps;\n        var computeCheckboxOpts = $table.getComputeMaps().computeCheckboxOpts;\n        var checkboxOpts = computeCheckboxOpts.value;\n        var labelField = checkboxOpts.labelField, checkField = checkboxOpts.checkField, checkMethod = checkboxOpts.checkMethod, visibleMethod = checkboxOpts.visibleMethod;\n        var indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField;\n        var slots = column.slots;\n        var defaultSlot = slots ? slots.default : null;\n        var checkboxSlot = slots ? slots.checkbox : null;\n        var isIndeterminate = false;\n        var isChecked = false;\n        var isVisible = !visibleMethod || visibleMethod({ row: row });\n        var isDisabled = !!checkMethod;\n        var ons;\n        if (!isHidden) {\n            var rowid = getRowid($table, row);\n            isChecked = XEUtils.get(row, checkField);\n            ons = {\n                onClick: function (evnt) {\n                    if (!isDisabled && isVisible) {\n                        evnt.stopPropagation();\n                        $table.triggerCheckRowEvent(evnt, params, !isChecked);\n                    }\n                }\n            };\n            if (checkMethod) {\n                isDisabled = !checkMethod({ row: row });\n            }\n            if (treeConfig) {\n                isIndeterminate = !!treeIndeterminateMaps[rowid];\n            }\n        }\n        var checkboxParams = __assign(__assign({}, params), { checked: isChecked, disabled: isDisabled, visible: isVisible, indeterminate: isIndeterminate });\n        if (checkboxSlot) {\n            return $table.callSlot(checkboxSlot, checkboxParams);\n        }\n        var checkVNs = [];\n        if (isVisible) {\n            checkVNs.push(h('span', {\n                class: ['vxe-checkbox--icon', isIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]\n            }));\n            if (defaultSlot || labelField) {\n                checkVNs.push(h('span', {\n                    class: 'vxe-checkbox--label'\n                }, defaultSlot ? $table.callSlot(defaultSlot, checkboxParams) : XEUtils.get(row, labelField)));\n            }\n        }\n        return [\n            h('span', __assign({ class: ['vxe-cell--checkbox', {\n                        'is--checked': isChecked,\n                        'is--disabled': isDisabled,\n                        'is--indeterminate': indeterminateField && !isChecked ? row[indeterminateField] : isIndeterminate\n                    }] }, ons), checkVNs)\n        ];\n    },\n    renderTreeSelectionCellByProp: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderCheckboxCellByProp(params));\n    },\n    /**\n     * 展开行\n     */\n    renderExpandCell: function (params) {\n        var $table = params.$table, isHidden = params.isHidden, row = params.row, column = params.column;\n        var reactData = $table.reactData;\n        var rowExpandedMaps = reactData.rowExpandedMaps, rowExpandLazyLoadedMaps = reactData.rowExpandLazyLoadedMaps;\n        var computeExpandOpts = $table.getComputeMaps().computeExpandOpts;\n        var expandOpts = computeExpandOpts.value;\n        var lazy = expandOpts.lazy, labelField = expandOpts.labelField, iconLoaded = expandOpts.iconLoaded, showIcon = expandOpts.showIcon, iconOpen = expandOpts.iconOpen, iconClose = expandOpts.iconClose, visibleMethod = expandOpts.visibleMethod;\n        var slots = column.slots;\n        var defaultSlot = slots ? slots.default : null;\n        var iconSlot = slots ? slots.icon : null;\n        var isAceived = false;\n        var isLazyLoaded = false;\n        if (iconSlot) {\n            return $table.callSlot(iconSlot, params);\n        }\n        if (!isHidden) {\n            var rowid = getRowid($table, row);\n            isAceived = !!rowExpandedMaps[rowid];\n            if (lazy) {\n                isLazyLoaded = !!rowExpandLazyLoadedMaps[rowid];\n            }\n        }\n        return [\n            showIcon && (!visibleMethod || visibleMethod(params)) ? h('span', {\n                class: ['vxe-table--expanded', {\n                        'is--active': isAceived\n                    }],\n                onClick: function (evnt) {\n                    evnt.stopPropagation();\n                    $table.triggerRowExpandEvent(evnt, params);\n                }\n            }, [\n                h('i', {\n                    class: ['vxe-table--expand-btn', isLazyLoaded ? (iconLoaded || GlobalConfig.icon.TABLE_EXPAND_LOADED) : (isAceived ? (iconOpen || GlobalConfig.icon.TABLE_EXPAND_OPEN) : (iconClose || GlobalConfig.icon.TABLE_EXPAND_CLOSE))]\n                })\n            ]) : null,\n            defaultSlot || labelField ? h('span', {\n                class: 'vxe-table--expand-label'\n            }, defaultSlot ? $table.callSlot(defaultSlot, params) : XEUtils.get(row, labelField)) : null\n        ];\n    },\n    renderExpandData: function (params) {\n        var $table = params.$table, column = params.column;\n        var slots = column.slots, contentRender = column.contentRender;\n        var contentSlot = slots ? slots.content : null;\n        if (contentSlot) {\n            return $table.callSlot(contentSlot, params);\n        }\n        if (contentRender) {\n            var compConf = VXETable.renderer.get(contentRender.name);\n            if (compConf && compConf.renderExpand) {\n                return getSlotVNs(compConf.renderExpand(contentRender, params));\n            }\n        }\n        return [];\n    },\n    /**\n     * HTML 标签\n     */\n    renderHTMLCell: function (params) {\n        var $table = params.$table, column = params.column;\n        var slots = column.slots;\n        var defaultSlot = slots ? slots.default : null;\n        if (defaultSlot) {\n            return $table.callSlot(defaultSlot, params);\n        }\n        return [\n            h('span', {\n                class: 'vxe-cell--html',\n                innerHTML: getDefaultCellLabel(params)\n            })\n        ];\n    },\n    renderTreeHTMLCell: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderHTMLCell(params));\n    },\n    /**\n     * 排序和筛选\n     */\n    renderSortAndFilterHeader: function (params) {\n        return Cell.renderDefaultHeader(params)\n            .concat(Cell.renderSortIcon(params))\n            .concat(Cell.renderFilterIcon(params));\n    },\n    /**\n     * 排序\n     */\n    renderSortHeader: function (params) {\n        return Cell.renderDefaultHeader(params).concat(Cell.renderSortIcon(params));\n    },\n    renderSortIcon: function (params) {\n        var $table = params.$table, column = params.column;\n        var computeSortOpts = $table.getComputeMaps().computeSortOpts;\n        var sortOpts = computeSortOpts.value;\n        var showIcon = sortOpts.showIcon, iconLayout = sortOpts.iconLayout, iconAsc = sortOpts.iconAsc, iconDesc = sortOpts.iconDesc;\n        var order = column.order;\n        if (showIcon) {\n            return [\n                h('span', {\n                    class: ['vxe-cell--sort', \"vxe-cell--sort-\".concat(iconLayout, \"-layout\")]\n                }, [\n                    h('i', {\n                        class: ['vxe-sort--asc-btn', iconAsc || GlobalConfig.icon.TABLE_SORT_ASC, {\n                                'sort--active': order === 'asc'\n                            }],\n                        title: GlobalConfig.i18n('vxe.table.sortAsc'),\n                        onClick: function (evnt) {\n                            evnt.stopPropagation();\n                            $table.triggerSortEvent(evnt, column, 'asc');\n                        }\n                    }),\n                    h('i', {\n                        class: ['vxe-sort--desc-btn', iconDesc || GlobalConfig.icon.TABLE_SORT_DESC, {\n                                'sort--active': order === 'desc'\n                            }],\n                        title: GlobalConfig.i18n('vxe.table.sortDesc'),\n                        onClick: function (evnt) {\n                            evnt.stopPropagation();\n                            $table.triggerSortEvent(evnt, column, 'desc');\n                        }\n                    })\n                ])\n            ];\n        }\n        return [];\n    },\n    /**\n     * 筛选\n     */\n    renderFilterHeader: function (params) {\n        return Cell.renderDefaultHeader(params).concat(Cell.renderFilterIcon(params));\n    },\n    renderFilterIcon: function (params) {\n        var $table = params.$table, column = params.column, hasFilter = params.hasFilter;\n        var reactData = $table.reactData;\n        var filterStore = reactData.filterStore;\n        var computeFilterOpts = $table.getComputeMaps().computeFilterOpts;\n        var filterOpts = computeFilterOpts.value;\n        var showIcon = filterOpts.showIcon, iconNone = filterOpts.iconNone, iconMatch = filterOpts.iconMatch;\n        return showIcon ? [\n            h('span', {\n                class: ['vxe-cell--filter', {\n                        'is--active': filterStore.visible && filterStore.column === column\n                    }]\n            }, [\n                h('i', {\n                    class: ['vxe-filter--btn', hasFilter ? (iconMatch || GlobalConfig.icon.TABLE_FILTER_MATCH) : (iconNone || GlobalConfig.icon.TABLE_FILTER_NONE)],\n                    title: GlobalConfig.i18n('vxe.table.filter'),\n                    onClick: function (evnt) {\n                        if ($table.triggerFilterEvent) {\n                            $table.triggerFilterEvent(evnt, params.column, params);\n                        }\n                    }\n                })\n            ])\n        ] : [];\n    },\n    /**\n     * 可编辑\n     */\n    renderEditHeader: function (params) {\n        var $table = params.$table, column = params.column;\n        var props = $table.props;\n        var computeEditOpts = $table.getComputeMaps().computeEditOpts;\n        var editConfig = props.editConfig, editRules = props.editRules;\n        var editOpts = computeEditOpts.value;\n        var sortable = column.sortable, filters = column.filters, editRender = column.editRender;\n        var isRequired = false;\n        if (editRules) {\n            var columnRules = XEUtils.get(editRules, column.field);\n            if (columnRules) {\n                isRequired = columnRules.some(function (rule) { return rule.required; });\n            }\n        }\n        return (isEnableConf(editConfig) ? [\n            isRequired && editOpts.showAsterisk ? h('i', {\n                class: 'vxe-cell--required-icon'\n            }) : null,\n            isEnableConf(editRender) && editOpts.showIcon ? h('i', {\n                class: ['vxe-cell--edit-icon', editOpts.icon || GlobalConfig.icon.TABLE_EDIT]\n            }) : null\n        ] : []).concat(Cell.renderDefaultHeader(params))\n            .concat(sortable ? Cell.renderSortIcon(params) : [])\n            .concat(filters ? Cell.renderFilterIcon(params) : []);\n    },\n    // 行格编辑模式\n    renderRowEdit: function (params) {\n        var $table = params.$table, column = params.column;\n        var reactData = $table.reactData;\n        var editStore = reactData.editStore;\n        var actived = editStore.actived;\n        var editRender = column.editRender;\n        return Cell.runRenderer(params, isEnableConf(editRender) && actived && actived.row === params.row);\n    },\n    renderTreeRowEdit: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderRowEdit(params));\n    },\n    // 单元格编辑模式\n    renderCellEdit: function (params) {\n        var $table = params.$table, column = params.column;\n        var reactData = $table.reactData;\n        var editStore = reactData.editStore;\n        var actived = editStore.actived;\n        var editRender = column.editRender;\n        return Cell.runRenderer(params, isEnableConf(editRender) && actived && actived.row === params.row && actived.column === params.column);\n    },\n    renderTreeCellEdit: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderCellEdit(params));\n    },\n    runRenderer: function (params, isEdit) {\n        var $table = params.$table, column = params.column;\n        var slots = column.slots, editRender = column.editRender, formatter = column.formatter;\n        var defaultSlot = slots ? slots.default : null;\n        var editSlot = slots ? slots.edit : null;\n        var compConf = VXETable.renderer.get(editRender.name);\n        if (isEdit) {\n            if (editSlot) {\n                return $table.callSlot(editSlot, params);\n            }\n            if (compConf && compConf.renderEdit) {\n                return getSlotVNs(compConf.renderEdit(editRender, Object.assign({ $type: 'edit' }, params)));\n            }\n            return [];\n        }\n        if (defaultSlot) {\n            return $table.callSlot(defaultSlot, params);\n        }\n        if (formatter) {\n            return [\n                h('span', {\n                    class: 'vxe-cell--label'\n                }, getDefaultCellLabel(params))\n            ];\n        }\n        return Cell.renderDefaultCell(params);\n    }\n};\nexport default Cell;\n",
      "start": 1714699768230,
      "end": 1714699768276,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768276,
      "end": 1714699768276,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768276,
      "end": 1714699768276,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768276,
      "end": 1714699768276,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768276,
      "end": 1714699768276,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768276,
      "end": 1714699768276,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768276,
      "end": 1714699768276,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { h } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { VXETable } from '../../v-x-e-table';\nimport { getFuncText, isEnableConf, formatText, eqEmptyValue } from '../../tools/utils';\nimport { updateCellTitle } from '../../tools/dom';\nimport { createColumn, getRowid } from './util';\nimport { getSlotVNs } from '../../tools/vn';\nfunction renderTitlePrefixIcon(params) {\n    var $table = params.$table, column = params.column;\n    var titlePrefix = column.titlePrefix || column.titleHelp;\n    return titlePrefix ? [\n        h('i', {\n            class: ['vxe-cell-title-prefix-icon', titlePrefix.icon || GlobalConfig.icon.TABLE_TITLE_PREFIX],\n            onMouseenter: function (evnt) {\n                $table.triggerHeaderTitleEvent(evnt, titlePrefix, params);\n            },\n            onMouseleave: function (evnt) {\n                $table.handleTargetLeaveEvent(evnt);\n            }\n        })\n    ] : [];\n}\nfunction renderTitleSuffixIcon(params) {\n    var $table = params.$table, column = params.column;\n    var titleSuffix = column.titleSuffix;\n    return titleSuffix ? [\n        h('i', {\n            class: ['vxe-cell-title-suffix-icon', titleSuffix.icon || GlobalConfig.icon.TABLE_TITLE_SUFFIX],\n            onMouseenter: function (evnt) {\n                $table.triggerHeaderTitleEvent(evnt, titleSuffix, params);\n            },\n            onMouseleave: function (evnt) {\n                $table.handleTargetLeaveEvent(evnt);\n            }\n        })\n    ] : [];\n}\nfunction renderTitleContent(params, content) {\n    var $table = params.$table, column = params.column;\n    var props = $table.props, reactData = $table.reactData;\n    var computeTooltipOpts = $table.getComputeMaps().computeTooltipOpts;\n    var allColumnHeaderOverflow = props.showHeaderOverflow;\n    var type = column.type, showHeaderOverflow = column.showHeaderOverflow;\n    var tooltipOpts = computeTooltipOpts.value;\n    var showAllTip = tooltipOpts.showAll;\n    var headOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;\n    var showTitle = headOverflow === 'title';\n    var showTooltip = headOverflow === true || headOverflow === 'tooltip';\n    var ons = {};\n    if (showTitle || showTooltip || showAllTip) {\n        ons.onMouseenter = function (evnt) {\n            if (reactData._isResize) {\n                return;\n            }\n            if (showTitle) {\n                updateCellTitle(evnt.currentTarget, column);\n            }\n            else if (showTooltip || showAllTip) {\n                $table.triggerHeaderTooltipEvent(evnt, params);\n            }\n        };\n    }\n    if (showTooltip || showAllTip) {\n        ons.onMouseleave = function (evnt) {\n            if (reactData._isResize) {\n                return;\n            }\n            if (showTooltip || showAllTip) {\n                $table.handleTargetLeaveEvent(evnt);\n            }\n        };\n    }\n    return [\n        type === 'html' && XEUtils.isString(content) ? h('span', __assign({ class: 'vxe-cell--title', innerHTML: content }, ons)) : h('span', __assign({ class: 'vxe-cell--title' }, ons), getSlotVNs(content))\n    ];\n}\nfunction getFooterContent(params) {\n    var $table = params.$table, column = params.column, _columnIndex = params._columnIndex, items = params.items;\n    var slots = column.slots, editRender = column.editRender, cellRender = column.cellRender;\n    var renderOpts = editRender || cellRender;\n    var footerSlot = slots ? slots.footer : null;\n    if (footerSlot) {\n        return $table.callSlot(footerSlot, params);\n    }\n    if (renderOpts) {\n        var compConf = VXETable.renderer.get(renderOpts.name);\n        if (compConf && compConf.renderFooter) {\n            return getSlotVNs(compConf.renderFooter(renderOpts, params));\n        }\n    }\n    return [formatText(items[_columnIndex], 1)];\n}\nfunction getDefaultCellLabel(params) {\n    var $table = params.$table, row = params.row, column = params.column;\n    return formatText($table.getCellLabel(row, column), 1);\n}\nexport var Cell = {\n    createColumn: function ($xetable, columnOpts) {\n        var type = columnOpts.type, sortable = columnOpts.sortable, filters = columnOpts.filters, editRender = columnOpts.editRender, treeNode = columnOpts.treeNode;\n        var props = $xetable.props;\n        var editConfig = props.editConfig;\n        var _a = $xetable.getComputeMaps(), computeEditOpts = _a.computeEditOpts, computeCheckboxOpts = _a.computeCheckboxOpts;\n        var checkboxOpts = computeCheckboxOpts.value;\n        var editOpts = computeEditOpts.value;\n        var renConfs = {\n            renderHeader: Cell.renderDefaultHeader,\n            renderCell: treeNode ? Cell.renderTreeCell : Cell.renderDefaultCell,\n            renderFooter: Cell.renderDefaultFooter\n        };\n        switch (type) {\n            case 'seq':\n                renConfs.renderHeader = Cell.renderSeqHeader;\n                renConfs.renderCell = treeNode ? Cell.renderTreeIndexCell : Cell.renderSeqCell;\n                break;\n            case 'radio':\n                renConfs.renderHeader = Cell.renderRadioHeader;\n                renConfs.renderCell = treeNode ? Cell.renderTreeRadioCell : Cell.renderRadioCell;\n                break;\n            case 'checkbox':\n                renConfs.renderHeader = Cell.renderCheckboxHeader;\n                renConfs.renderCell = checkboxOpts.checkField ? (treeNode ? Cell.renderTreeSelectionCellByProp : Cell.renderCheckboxCellByProp) : (treeNode ? Cell.renderTreeSelectionCell : Cell.renderCheckboxCell);\n                break;\n            case 'expand':\n                renConfs.renderCell = Cell.renderExpandCell;\n                renConfs.renderData = Cell.renderExpandData;\n                break;\n            case 'html':\n                renConfs.renderCell = treeNode ? Cell.renderTreeHTMLCell : Cell.renderHTMLCell;\n                if (filters && sortable) {\n                    renConfs.renderHeader = Cell.renderSortAndFilterHeader;\n                }\n                else if (sortable) {\n                    renConfs.renderHeader = Cell.renderSortHeader;\n                }\n                else if (filters) {\n                    renConfs.renderHeader = Cell.renderFilterHeader;\n                }\n                break;\n            default:\n                if (editConfig && editRender) {\n                    renConfs.renderHeader = Cell.renderEditHeader;\n                    renConfs.renderCell = editOpts.mode === 'cell' ? (treeNode ? Cell.renderTreeCellEdit : Cell.renderCellEdit) : (treeNode ? Cell.renderTreeRowEdit : Cell.renderRowEdit);\n                }\n                else if (filters && sortable) {\n                    renConfs.renderHeader = Cell.renderSortAndFilterHeader;\n                }\n                else if (sortable) {\n                    renConfs.renderHeader = Cell.renderSortHeader;\n                }\n                else if (filters) {\n                    renConfs.renderHeader = Cell.renderFilterHeader;\n                }\n        }\n        return createColumn($xetable, columnOpts, renConfs);\n    },\n    /**\n     * 单元格\n     */\n    renderHeaderTitle: function (params) {\n        var $table = params.$table, column = params.column;\n        var slots = column.slots, editRender = column.editRender, cellRender = column.cellRender;\n        var renderOpts = editRender || cellRender;\n        var headerSlot = slots ? slots.header : null;\n        if (headerSlot) {\n            return renderTitleContent(params, $table.callSlot(headerSlot, params));\n        }\n        if (renderOpts) {\n            var compConf = VXETable.renderer.get(renderOpts.name);\n            if (compConf && compConf.renderHeader) {\n                return renderTitleContent(params, getSlotVNs(compConf.renderHeader(renderOpts, params)));\n            }\n        }\n        return renderTitleContent(params, formatText(column.getTitle(), 1));\n    },\n    renderDefaultHeader: function (params) {\n        return renderTitlePrefixIcon(params).concat(Cell.renderHeaderTitle(params)).concat(renderTitleSuffixIcon(params));\n    },\n    renderDefaultCell: function (params) {\n        var $table = params.$table, row = params.row, column = params.column;\n        var slots = column.slots, editRender = column.editRender, cellRender = column.cellRender;\n        var renderOpts = editRender || cellRender;\n        var defaultSlot = slots ? slots.default : null;\n        if (defaultSlot) {\n            return $table.callSlot(defaultSlot, params);\n        }\n        if (renderOpts) {\n            var funName = editRender ? 'renderCell' : 'renderDefault';\n            var compConf = VXETable.renderer.get(renderOpts.name);\n            var compFn = compConf ? compConf[funName] : null;\n            if (compFn) {\n                return getSlotVNs(compFn(renderOpts, Object.assign({ $type: editRender ? 'edit' : 'cell' }, params)));\n            }\n        }\n        var cellValue = $table.getCellLabel(row, column);\n        var cellPlaceholder = editRender ? editRender.placeholder : '';\n        return [\n            h('span', {\n                class: 'vxe-cell--label'\n            }, editRender && eqEmptyValue(cellValue) ? [\n                // 如果设置占位符\n                h('span', {\n                    class: 'vxe-cell--placeholder'\n                }, formatText(getFuncText(cellPlaceholder), 1))\n            ] : formatText(cellValue, 1))\n        ];\n    },\n    renderTreeCell: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderDefaultCell(params));\n    },\n    renderDefaultFooter: function (params) {\n        return [\n            h('span', {\n                class: 'vxe-cell--item'\n            }, getFooterContent(params))\n        ];\n    },\n    /**\n     * 树节点\n     */\n    renderTreeIcon: function (params, cellVNodes) {\n        var $table = params.$table, isHidden = params.isHidden;\n        var reactData = $table.reactData;\n        var computeTreeOpts = $table.getComputeMaps().computeTreeOpts;\n        var treeExpandedMaps = reactData.treeExpandedMaps, treeExpandLazyLoadedMaps = reactData.treeExpandLazyLoadedMaps;\n        var treeOpts = computeTreeOpts.value;\n        var row = params.row, column = params.column, level = params.level;\n        var slots = column.slots;\n        var indent = treeOpts.indent, lazy = treeOpts.lazy, trigger = treeOpts.trigger, iconLoaded = treeOpts.iconLoaded, showIcon = treeOpts.showIcon, iconOpen = treeOpts.iconOpen, iconClose = treeOpts.iconClose;\n        var childrenField = treeOpts.children || treeOpts.childrenField;\n        var hasChildField = treeOpts.hasChild || treeOpts.hasChildField;\n        var rowChilds = row[childrenField];\n        var iconSlot = slots ? slots.icon : null;\n        var hasLazyChilds = false;\n        var isAceived = false;\n        var isLazyLoaded = false;\n        var ons = {};\n        if (iconSlot) {\n            return $table.callSlot(iconSlot, params);\n        }\n        if (!isHidden) {\n            var rowid = getRowid($table, row);\n            isAceived = !!treeExpandedMaps[rowid];\n            if (lazy) {\n                isLazyLoaded = !!treeExpandLazyLoadedMaps[rowid];\n                hasLazyChilds = row[hasChildField];\n            }\n        }\n        if (!trigger || trigger === 'default') {\n            ons.onClick = function (evnt) {\n                evnt.stopPropagation();\n                $table.triggerTreeExpandEvent(evnt, params);\n            };\n        }\n        return [\n            h('div', {\n                class: ['vxe-cell--tree-node', {\n                        'is--active': isAceived\n                    }],\n                style: {\n                    paddingLeft: \"\".concat(level * indent, \"px\")\n                }\n            }, [\n                showIcon && ((rowChilds && rowChilds.length) || hasLazyChilds) ? [\n                    h('div', __assign({ class: 'vxe-tree--btn-wrapper' }, ons), [\n                        h('i', {\n                            class: ['vxe-tree--node-btn', isLazyLoaded ? (iconLoaded || GlobalConfig.icon.TABLE_TREE_LOADED) : (isAceived ? (iconOpen || GlobalConfig.icon.TABLE_TREE_OPEN) : (iconClose || GlobalConfig.icon.TABLE_TREE_CLOSE))]\n                        })\n                    ])\n                ] : null,\n                h('div', {\n                    class: 'vxe-tree-cell'\n                }, cellVNodes)\n            ])\n        ];\n    },\n    /**\n     * 索引\n     */\n    renderSeqHeader: function (params) {\n        var $table = params.$table, column = params.column;\n        var slots = column.slots;\n        var headerSlot = slots ? slots.header : null;\n        return renderTitleContent(params, headerSlot ? $table.callSlot(headerSlot, params) : formatText(column.getTitle(), 1));\n    },\n    renderSeqCell: function (params) {\n        var $table = params.$table, column = params.column;\n        var props = $table.props;\n        var treeConfig = props.treeConfig;\n        var computeSeqOpts = $table.getComputeMaps().computeSeqOpts;\n        var seqOpts = computeSeqOpts.value;\n        var slots = column.slots;\n        var defaultSlot = slots ? slots.default : null;\n        if (defaultSlot) {\n            return $table.callSlot(defaultSlot, params);\n        }\n        var seq = params.seq;\n        var seqMethod = seqOpts.seqMethod;\n        return [formatText(seqMethod ? seqMethod(params) : treeConfig ? seq : (seqOpts.startIndex || 0) + seq, 1)];\n    },\n    renderTreeIndexCell: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderSeqCell(params));\n    },\n    /**\n     * 单选\n     */\n    renderRadioHeader: function (params) {\n        var $table = params.$table, column = params.column;\n        var slots = column.slots;\n        var headerSlot = slots ? slots.header : null;\n        var titleSlot = slots ? slots.title : null;\n        return renderTitleContent(params, headerSlot ? $table.callSlot(headerSlot, params) : [\n            h('span', {\n                class: 'vxe-radio--label'\n            }, titleSlot ? $table.callSlot(titleSlot, params) : formatText(column.getTitle(), 1))\n        ]);\n    },\n    renderRadioCell: function (params) {\n        var $table = params.$table, column = params.column, isHidden = params.isHidden;\n        var reactData = $table.reactData;\n        var computeRadioOpts = $table.getComputeMaps().computeRadioOpts;\n        var selectRadioRow = reactData.selectRadioRow;\n        var radioOpts = computeRadioOpts.value;\n        var slots = column.slots;\n        var labelField = radioOpts.labelField, checkMethod = radioOpts.checkMethod, visibleMethod = radioOpts.visibleMethod;\n        var row = params.row;\n        var defaultSlot = slots ? slots.default : null;\n        var radioSlot = slots ? slots.radio : null;\n        var isChecked = $table.eqRow(row, selectRadioRow);\n        var isVisible = !visibleMethod || visibleMethod({ row: row });\n        var isDisabled = !!checkMethod;\n        var ons;\n        if (!isHidden) {\n            ons = {\n                onClick: function (evnt) {\n                    if (!isDisabled && isVisible) {\n                        evnt.stopPropagation();\n                        $table.triggerRadioRowEvent(evnt, params);\n                    }\n                }\n            };\n            if (checkMethod) {\n                isDisabled = !checkMethod({ row: row });\n            }\n        }\n        var radioParams = __assign(__assign({}, params), { checked: isChecked, disabled: isDisabled, visible: isVisible });\n        if (radioSlot) {\n            return $table.callSlot(radioSlot, radioParams);\n        }\n        var radioVNs = [];\n        if (isVisible) {\n            radioVNs.push(h('span', {\n                class: ['vxe-radio--icon', isChecked ? GlobalConfig.icon.TABLE_RADIO_CHECKED : GlobalConfig.icon.TABLE_RADIO_UNCHECKED]\n            }));\n        }\n        if (defaultSlot || labelField) {\n            radioVNs.push(h('span', {\n                class: 'vxe-radio--label'\n            }, defaultSlot ? $table.callSlot(defaultSlot, radioParams) : XEUtils.get(row, labelField)));\n        }\n        return [\n            h('span', __assign({ class: ['vxe-cell--radio', {\n                        'is--checked': isChecked,\n                        'is--disabled': isDisabled\n                    }] }, ons), radioVNs)\n        ];\n    },\n    renderTreeRadioCell: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderRadioCell(params));\n    },\n    /**\n     * 多选\n     */\n    renderCheckboxHeader: function (params) {\n        var $table = params.$table, column = params.column, isHidden = params.isHidden;\n        var reactData = $table.reactData;\n        var _a = $table.getComputeMaps(), computeIsAllCheckboxDisabled = _a.computeIsAllCheckboxDisabled, computeCheckboxOpts = _a.computeCheckboxOpts;\n        var isAllCheckboxSelected = reactData.isAllSelected, isAllCheckboxIndeterminate = reactData.isIndeterminate;\n        var isAllCheckboxDisabled = computeIsAllCheckboxDisabled.value;\n        var slots = column.slots;\n        var headerSlot = slots ? slots.header : null;\n        var titleSlot = slots ? slots.title : null;\n        var checkboxOpts = computeCheckboxOpts.value;\n        var headerTitle = column.getTitle();\n        var ons;\n        if (!isHidden) {\n            ons = {\n                onClick: function (evnt) {\n                    if (!isAllCheckboxDisabled) {\n                        evnt.stopPropagation();\n                        $table.triggerCheckAllEvent(evnt, !isAllCheckboxSelected);\n                    }\n                }\n            };\n        }\n        var checkboxParams = __assign(__assign({}, params), { checked: isAllCheckboxSelected, disabled: isAllCheckboxDisabled, indeterminate: isAllCheckboxIndeterminate });\n        if (headerSlot) {\n            return renderTitleContent(checkboxParams, $table.callSlot(headerSlot, checkboxParams));\n        }\n        if (checkboxOpts.checkStrictly ? !checkboxOpts.showHeader : checkboxOpts.showHeader === false) {\n            return renderTitleContent(checkboxParams, [\n                h('span', {\n                    class: 'vxe-checkbox--label'\n                }, titleSlot ? $table.callSlot(titleSlot, checkboxParams) : headerTitle)\n            ]);\n        }\n        return renderTitleContent(checkboxParams, [\n            h('span', __assign({ class: ['vxe-cell--checkbox', {\n                        'is--checked': isAllCheckboxSelected,\n                        'is--disabled': isAllCheckboxDisabled,\n                        'is--indeterminate': isAllCheckboxIndeterminate\n                    }], title: GlobalConfig.i18n('vxe.table.allTitle') }, ons), [\n                h('span', {\n                    class: ['vxe-checkbox--icon', isAllCheckboxIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isAllCheckboxSelected ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]\n                })\n            ].concat(titleSlot || headerTitle ? [\n                h('span', {\n                    class: 'vxe-checkbox--label'\n                }, titleSlot ? $table.callSlot(titleSlot, checkboxParams) : headerTitle)\n            ] : []))\n        ]);\n    },\n    renderCheckboxCell: function (params) {\n        var $table = params.$table, row = params.row, column = params.column, isHidden = params.isHidden;\n        var props = $table.props, reactData = $table.reactData;\n        var treeConfig = props.treeConfig;\n        var selectCheckboxMaps = reactData.selectCheckboxMaps, treeIndeterminateMaps = reactData.treeIndeterminateMaps;\n        var computeCheckboxOpts = $table.getComputeMaps().computeCheckboxOpts;\n        var checkboxOpts = computeCheckboxOpts.value;\n        var labelField = checkboxOpts.labelField, checkMethod = checkboxOpts.checkMethod, visibleMethod = checkboxOpts.visibleMethod;\n        var slots = column.slots;\n        var defaultSlot = slots ? slots.default : null;\n        var checkboxSlot = slots ? slots.checkbox : null;\n        var indeterminate = false;\n        var isChecked = false;\n        var isVisible = !visibleMethod || visibleMethod({ row: row });\n        var isDisabled = !!checkMethod;\n        var ons;\n        if (!isHidden) {\n            var rowid = getRowid($table, row);\n            isChecked = !!selectCheckboxMaps[rowid];\n            ons = {\n                onClick: function (evnt) {\n                    if (!isDisabled && isVisible) {\n                        evnt.stopPropagation();\n                        $table.triggerCheckRowEvent(evnt, params, !isChecked);\n                    }\n                }\n            };\n            if (checkMethod) {\n                isDisabled = !checkMethod({ row: row });\n            }\n            if (treeConfig) {\n                indeterminate = !!treeIndeterminateMaps[rowid];\n            }\n        }\n        var checkboxParams = __assign(__assign({}, params), { checked: isChecked, disabled: isDisabled, visible: isVisible, indeterminate: indeterminate });\n        if (checkboxSlot) {\n            return $table.callSlot(checkboxSlot, checkboxParams);\n        }\n        var checkVNs = [];\n        if (isVisible) {\n            checkVNs.push(h('span', {\n                class: ['vxe-checkbox--icon', indeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]\n            }));\n        }\n        if (defaultSlot || labelField) {\n            checkVNs.push(h('span', {\n                class: 'vxe-checkbox--label'\n            }, defaultSlot ? $table.callSlot(defaultSlot, checkboxParams) : XEUtils.get(row, labelField)));\n        }\n        return [\n            h('span', __assign({ class: ['vxe-cell--checkbox', {\n                        'is--checked': isChecked,\n                        'is--disabled': isDisabled,\n                        'is--indeterminate': indeterminate\n                    }] }, ons), checkVNs)\n        ];\n    },\n    renderTreeSelectionCell: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderCheckboxCell(params));\n    },\n    renderCheckboxCellByProp: function (params) {\n        var $table = params.$table, row = params.row, column = params.column, isHidden = params.isHidden;\n        var props = $table.props, reactData = $table.reactData;\n        var treeConfig = props.treeConfig;\n        var treeIndeterminateMaps = reactData.treeIndeterminateMaps;\n        var computeCheckboxOpts = $table.getComputeMaps().computeCheckboxOpts;\n        var checkboxOpts = computeCheckboxOpts.value;\n        var labelField = checkboxOpts.labelField, checkField = checkboxOpts.checkField, checkMethod = checkboxOpts.checkMethod, visibleMethod = checkboxOpts.visibleMethod;\n        var indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField;\n        var slots = column.slots;\n        var defaultSlot = slots ? slots.default : null;\n        var checkboxSlot = slots ? slots.checkbox : null;\n        var isIndeterminate = false;\n        var isChecked = false;\n        var isVisible = !visibleMethod || visibleMethod({ row: row });\n        var isDisabled = !!checkMethod;\n        var ons;\n        if (!isHidden) {\n            var rowid = getRowid($table, row);\n            isChecked = XEUtils.get(row, checkField);\n            ons = {\n                onClick: function (evnt) {\n                    if (!isDisabled && isVisible) {\n                        evnt.stopPropagation();\n                        $table.triggerCheckRowEvent(evnt, params, !isChecked);\n                    }\n                }\n            };\n            if (checkMethod) {\n                isDisabled = !checkMethod({ row: row });\n            }\n            if (treeConfig) {\n                isIndeterminate = !!treeIndeterminateMaps[rowid];\n            }\n        }\n        var checkboxParams = __assign(__assign({}, params), { checked: isChecked, disabled: isDisabled, visible: isVisible, indeterminate: isIndeterminate });\n        if (checkboxSlot) {\n            return $table.callSlot(checkboxSlot, checkboxParams);\n        }\n        var checkVNs = [];\n        if (isVisible) {\n            checkVNs.push(h('span', {\n                class: ['vxe-checkbox--icon', isIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]\n            }));\n            if (defaultSlot || labelField) {\n                checkVNs.push(h('span', {\n                    class: 'vxe-checkbox--label'\n                }, defaultSlot ? $table.callSlot(defaultSlot, checkboxParams) : XEUtils.get(row, labelField)));\n            }\n        }\n        return [\n            h('span', __assign({ class: ['vxe-cell--checkbox', {\n                        'is--checked': isChecked,\n                        'is--disabled': isDisabled,\n                        'is--indeterminate': indeterminateField && !isChecked ? row[indeterminateField] : isIndeterminate\n                    }] }, ons), checkVNs)\n        ];\n    },\n    renderTreeSelectionCellByProp: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderCheckboxCellByProp(params));\n    },\n    /**\n     * 展开行\n     */\n    renderExpandCell: function (params) {\n        var $table = params.$table, isHidden = params.isHidden, row = params.row, column = params.column;\n        var reactData = $table.reactData;\n        var rowExpandedMaps = reactData.rowExpandedMaps, rowExpandLazyLoadedMaps = reactData.rowExpandLazyLoadedMaps;\n        var computeExpandOpts = $table.getComputeMaps().computeExpandOpts;\n        var expandOpts = computeExpandOpts.value;\n        var lazy = expandOpts.lazy, labelField = expandOpts.labelField, iconLoaded = expandOpts.iconLoaded, showIcon = expandOpts.showIcon, iconOpen = expandOpts.iconOpen, iconClose = expandOpts.iconClose, visibleMethod = expandOpts.visibleMethod;\n        var slots = column.slots;\n        var defaultSlot = slots ? slots.default : null;\n        var iconSlot = slots ? slots.icon : null;\n        var isAceived = false;\n        var isLazyLoaded = false;\n        if (iconSlot) {\n            return $table.callSlot(iconSlot, params);\n        }\n        if (!isHidden) {\n            var rowid = getRowid($table, row);\n            isAceived = !!rowExpandedMaps[rowid];\n            if (lazy) {\n                isLazyLoaded = !!rowExpandLazyLoadedMaps[rowid];\n            }\n        }\n        return [\n            showIcon && (!visibleMethod || visibleMethod(params)) ? h('span', {\n                class: ['vxe-table--expanded', {\n                        'is--active': isAceived\n                    }],\n                onClick: function (evnt) {\n                    evnt.stopPropagation();\n                    $table.triggerRowExpandEvent(evnt, params);\n                }\n            }, [\n                h('i', {\n                    class: ['vxe-table--expand-btn', isLazyLoaded ? (iconLoaded || GlobalConfig.icon.TABLE_EXPAND_LOADED) : (isAceived ? (iconOpen || GlobalConfig.icon.TABLE_EXPAND_OPEN) : (iconClose || GlobalConfig.icon.TABLE_EXPAND_CLOSE))]\n                })\n            ]) : null,\n            defaultSlot || labelField ? h('span', {\n                class: 'vxe-table--expand-label'\n            }, defaultSlot ? $table.callSlot(defaultSlot, params) : XEUtils.get(row, labelField)) : null\n        ];\n    },\n    renderExpandData: function (params) {\n        var $table = params.$table, column = params.column;\n        var slots = column.slots, contentRender = column.contentRender;\n        var contentSlot = slots ? slots.content : null;\n        if (contentSlot) {\n            return $table.callSlot(contentSlot, params);\n        }\n        if (contentRender) {\n            var compConf = VXETable.renderer.get(contentRender.name);\n            if (compConf && compConf.renderExpand) {\n                return getSlotVNs(compConf.renderExpand(contentRender, params));\n            }\n        }\n        return [];\n    },\n    /**\n     * HTML 标签\n     */\n    renderHTMLCell: function (params) {\n        var $table = params.$table, column = params.column;\n        var slots = column.slots;\n        var defaultSlot = slots ? slots.default : null;\n        if (defaultSlot) {\n            return $table.callSlot(defaultSlot, params);\n        }\n        return [\n            h('span', {\n                class: 'vxe-cell--html',\n                innerHTML: getDefaultCellLabel(params)\n            })\n        ];\n    },\n    renderTreeHTMLCell: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderHTMLCell(params));\n    },\n    /**\n     * 排序和筛选\n     */\n    renderSortAndFilterHeader: function (params) {\n        return Cell.renderDefaultHeader(params)\n            .concat(Cell.renderSortIcon(params))\n            .concat(Cell.renderFilterIcon(params));\n    },\n    /**\n     * 排序\n     */\n    renderSortHeader: function (params) {\n        return Cell.renderDefaultHeader(params).concat(Cell.renderSortIcon(params));\n    },\n    renderSortIcon: function (params) {\n        var $table = params.$table, column = params.column;\n        var computeSortOpts = $table.getComputeMaps().computeSortOpts;\n        var sortOpts = computeSortOpts.value;\n        var showIcon = sortOpts.showIcon, iconLayout = sortOpts.iconLayout, iconAsc = sortOpts.iconAsc, iconDesc = sortOpts.iconDesc;\n        var order = column.order;\n        if (showIcon) {\n            return [\n                h('span', {\n                    class: ['vxe-cell--sort', \"vxe-cell--sort-\".concat(iconLayout, \"-layout\")]\n                }, [\n                    h('i', {\n                        class: ['vxe-sort--asc-btn', iconAsc || GlobalConfig.icon.TABLE_SORT_ASC, {\n                                'sort--active': order === 'asc'\n                            }],\n                        title: GlobalConfig.i18n('vxe.table.sortAsc'),\n                        onClick: function (evnt) {\n                            evnt.stopPropagation();\n                            $table.triggerSortEvent(evnt, column, 'asc');\n                        }\n                    }),\n                    h('i', {\n                        class: ['vxe-sort--desc-btn', iconDesc || GlobalConfig.icon.TABLE_SORT_DESC, {\n                                'sort--active': order === 'desc'\n                            }],\n                        title: GlobalConfig.i18n('vxe.table.sortDesc'),\n                        onClick: function (evnt) {\n                            evnt.stopPropagation();\n                            $table.triggerSortEvent(evnt, column, 'desc');\n                        }\n                    })\n                ])\n            ];\n        }\n        return [];\n    },\n    /**\n     * 筛选\n     */\n    renderFilterHeader: function (params) {\n        return Cell.renderDefaultHeader(params).concat(Cell.renderFilterIcon(params));\n    },\n    renderFilterIcon: function (params) {\n        var $table = params.$table, column = params.column, hasFilter = params.hasFilter;\n        var reactData = $table.reactData;\n        var filterStore = reactData.filterStore;\n        var computeFilterOpts = $table.getComputeMaps().computeFilterOpts;\n        var filterOpts = computeFilterOpts.value;\n        var showIcon = filterOpts.showIcon, iconNone = filterOpts.iconNone, iconMatch = filterOpts.iconMatch;\n        return showIcon ? [\n            h('span', {\n                class: ['vxe-cell--filter', {\n                        'is--active': filterStore.visible && filterStore.column === column\n                    }]\n            }, [\n                h('i', {\n                    class: ['vxe-filter--btn', hasFilter ? (iconMatch || GlobalConfig.icon.TABLE_FILTER_MATCH) : (iconNone || GlobalConfig.icon.TABLE_FILTER_NONE)],\n                    title: GlobalConfig.i18n('vxe.table.filter'),\n                    onClick: function (evnt) {\n                        if ($table.triggerFilterEvent) {\n                            $table.triggerFilterEvent(evnt, params.column, params);\n                        }\n                    }\n                })\n            ])\n        ] : [];\n    },\n    /**\n     * 可编辑\n     */\n    renderEditHeader: function (params) {\n        var $table = params.$table, column = params.column;\n        var props = $table.props;\n        var computeEditOpts = $table.getComputeMaps().computeEditOpts;\n        var editConfig = props.editConfig, editRules = props.editRules;\n        var editOpts = computeEditOpts.value;\n        var sortable = column.sortable, filters = column.filters, editRender = column.editRender;\n        var isRequired = false;\n        if (editRules) {\n            var columnRules = XEUtils.get(editRules, column.field);\n            if (columnRules) {\n                isRequired = columnRules.some(function (rule) { return rule.required; });\n            }\n        }\n        return (isEnableConf(editConfig) ? [\n            isRequired && editOpts.showAsterisk ? h('i', {\n                class: 'vxe-cell--required-icon'\n            }) : null,\n            isEnableConf(editRender) && editOpts.showIcon ? h('i', {\n                class: ['vxe-cell--edit-icon', editOpts.icon || GlobalConfig.icon.TABLE_EDIT]\n            }) : null\n        ] : []).concat(Cell.renderDefaultHeader(params))\n            .concat(sortable ? Cell.renderSortIcon(params) : [])\n            .concat(filters ? Cell.renderFilterIcon(params) : []);\n    },\n    // 行格编辑模式\n    renderRowEdit: function (params) {\n        var $table = params.$table, column = params.column;\n        var reactData = $table.reactData;\n        var editStore = reactData.editStore;\n        var actived = editStore.actived;\n        var editRender = column.editRender;\n        return Cell.runRenderer(params, isEnableConf(editRender) && actived && actived.row === params.row);\n    },\n    renderTreeRowEdit: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderRowEdit(params));\n    },\n    // 单元格编辑模式\n    renderCellEdit: function (params) {\n        var $table = params.$table, column = params.column;\n        var reactData = $table.reactData;\n        var editStore = reactData.editStore;\n        var actived = editStore.actived;\n        var editRender = column.editRender;\n        return Cell.runRenderer(params, isEnableConf(editRender) && actived && actived.row === params.row && actived.column === params.column);\n    },\n    renderTreeCellEdit: function (params) {\n        return Cell.renderTreeIcon(params, Cell.renderCellEdit(params));\n    },\n    runRenderer: function (params, isEdit) {\n        var $table = params.$table, column = params.column;\n        var slots = column.slots, editRender = column.editRender, formatter = column.formatter;\n        var defaultSlot = slots ? slots.default : null;\n        var editSlot = slots ? slots.edit : null;\n        var compConf = VXETable.renderer.get(editRender.name);\n        if (isEdit) {\n            if (editSlot) {\n                return $table.callSlot(editSlot, params);\n            }\n            if (compConf && compConf.renderEdit) {\n                return getSlotVNs(compConf.renderEdit(editRender, Object.assign({ $type: 'edit' }, params)));\n            }\n            return [];\n        }\n        if (defaultSlot) {\n            return $table.callSlot(defaultSlot, params);\n        }\n        if (formatter) {\n            return [\n                h('span', {\n                    class: 'vxe-cell--label'\n                }, getDefaultCellLabel(params))\n            ];\n        }\n        return Cell.renderDefaultCell(params);\n    }\n};\nexport default Cell;\n",
      "start": 1714699768276,
      "end": 1714699768276,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768276,
      "end": 1714699768276,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699768276,
      "end": 1714699768276,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699768276,
      "end": 1714699768276,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699768276,
      "end": 1714699768276,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699768276,
      "end": 1714699768276,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699768276,
      "end": 1714699768276,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699768276,
      "end": 1714699768278,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699768278,
      "end": 1714699768278,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699768278,
      "end": 1714699768278,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699768278,
      "end": 1714699768278,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699768278,
      "end": 1714699768278,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699768278,
      "end": 1714699768278,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699768278,
      "end": 1714699768278,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699768278,
      "end": 1714699768278,
      "order": "normal"
    }
  ]
}

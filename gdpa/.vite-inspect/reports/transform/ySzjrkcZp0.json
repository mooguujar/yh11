{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vant@4.8.4_vue@3.4.19/node_modules/vant/es/lazyload/vue-lazyload/lazy-image.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { useRect } from \"@vant/use\";\nimport { loadImageAsync } from \"./util.mjs\";\nimport { noop } from \"../../utils/index.mjs\";\nimport { h } from \"vue\";\nvar stdin_default = (lazyManager) => ({\n  props: {\n    src: [String, Object],\n    tag: {\n      type: String,\n      default: \"img\"\n    }\n  },\n  render() {\n    var _a, _b;\n    return h(\n      this.tag,\n      {\n        src: this.renderSrc\n      },\n      (_b = (_a = this.$slots).default) == null ? void 0 : _b.call(_a)\n    );\n  },\n  data() {\n    return {\n      el: null,\n      options: {\n        src: \"\",\n        error: \"\",\n        loading: \"\",\n        attempt: lazyManager.options.attempt\n      },\n      state: {\n        loaded: false,\n        error: false,\n        attempt: 0\n      },\n      renderSrc: \"\"\n    };\n  },\n  watch: {\n    src() {\n      this.init();\n      lazyManager.addLazyBox(this);\n      lazyManager.lazyLoadHandler();\n    }\n  },\n  created() {\n    this.init();\n  },\n  mounted() {\n    this.el = this.$el;\n    lazyManager.addLazyBox(this);\n    lazyManager.lazyLoadHandler();\n  },\n  beforeUnmount() {\n    lazyManager.removeComponent(this);\n  },\n  methods: {\n    init() {\n      const { src, loading, error } = lazyManager.valueFormatter(this.src);\n      this.state.loaded = false;\n      this.options.src = src;\n      this.options.error = error;\n      this.options.loading = loading;\n      this.renderSrc = this.options.loading;\n    },\n    checkInView() {\n      const rect = useRect(this.$el);\n      return rect.top < window.innerHeight * lazyManager.options.preLoad && rect.bottom > 0 && rect.left < window.innerWidth * lazyManager.options.preLoad && rect.right > 0;\n    },\n    load(onFinish = noop) {\n      if (this.state.attempt > this.options.attempt - 1 && this.state.error) {\n        if (process.env.NODE_ENV !== \"production\" && !lazyManager.options.silent) {\n          console.log(\n            `[@vant/lazyload] ${this.options.src} tried too more than ${this.options.attempt} times`\n          );\n        }\n        onFinish();\n        return;\n      }\n      const { src } = this.options;\n      loadImageAsync(\n        { src },\n        ({ src: src2 }) => {\n          this.renderSrc = src2;\n          this.state.loaded = true;\n        },\n        () => {\n          this.state.attempt++;\n          this.renderSrc = this.options.error;\n          this.state.error = true;\n        }\n      );\n    }\n  }\n});\nexport {\n  stdin_default as default\n};\n",
      "start": 1714699768213,
      "end": 1714699768244,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699768244,
      "end": 1714699768244,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699768244,
      "end": 1714699768244,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699768244,
      "end": 1714699768244,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699768244,
      "end": 1714699768244,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699768244,
      "end": 1714699768244,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699768244,
      "end": 1714699768244,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import { useRect } from \"@vant/use\";\nimport { loadImageAsync } from \"./util.mjs\";\nimport { noop } from \"../../utils/index.mjs\";\nimport { h } from \"vue\";\nvar stdin_default = (lazyManager) => ({\n  props: {\n    src: [String, Object],\n    tag: {\n      type: String,\n      default: \"img\"\n    }\n  },\n  render() {\n    var _a, _b;\n    return h(\n      this.tag,\n      {\n        src: this.renderSrc\n      },\n      (_b = (_a = this.$slots).default) == null ? void 0 : _b.call(_a)\n    );\n  },\n  data() {\n    return {\n      el: null,\n      options: {\n        src: \"\",\n        error: \"\",\n        loading: \"\",\n        attempt: lazyManager.options.attempt\n      },\n      state: {\n        loaded: false,\n        error: false,\n        attempt: 0\n      },\n      renderSrc: \"\"\n    };\n  },\n  watch: {\n    src() {\n      this.init();\n      lazyManager.addLazyBox(this);\n      lazyManager.lazyLoadHandler();\n    }\n  },\n  created() {\n    this.init();\n  },\n  mounted() {\n    this.el = this.$el;\n    lazyManager.addLazyBox(this);\n    lazyManager.lazyLoadHandler();\n  },\n  beforeUnmount() {\n    lazyManager.removeComponent(this);\n  },\n  methods: {\n    init() {\n      const { src, loading, error } = lazyManager.valueFormatter(this.src);\n      this.state.loaded = false;\n      this.options.src = src;\n      this.options.error = error;\n      this.options.loading = loading;\n      this.renderSrc = this.options.loading;\n    },\n    checkInView() {\n      const rect = useRect(this.$el);\n      return rect.top < window.innerHeight * lazyManager.options.preLoad && rect.bottom > 0 && rect.left < window.innerWidth * lazyManager.options.preLoad && rect.right > 0;\n    },\n    load(onFinish = noop) {\n      if (this.state.attempt > this.options.attempt - 1 && this.state.error) {\n        if (process.env.NODE_ENV !== \"production\" && !lazyManager.options.silent) {\n          console.log(\n            `[@vant/lazyload] ${this.options.src} tried too more than ${this.options.attempt} times`\n          );\n        }\n        onFinish();\n        return;\n      }\n      const { src } = this.options;\n      loadImageAsync(\n        { src },\n        ({ src: src2 }) => {\n          this.renderSrc = src2;\n          this.state.loaded = true;\n        },\n        () => {\n          this.state.attempt++;\n          this.renderSrc = this.options.error;\n          this.state.error = true;\n        }\n      );\n    }\n  }\n});\nexport {\n  stdin_default as default\n};\n",
      "start": 1714699768244,
      "end": 1714699768244,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699768244,
      "end": 1714699768244,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { useRect } from \"@vant/use\";\nimport { loadImageAsync } from \"./util.mjs\";\nimport { noop } from \"../../utils/index.mjs\";\nimport { h } from \"vue\";\nvar stdin_default = (lazyManager) => ({\n  props: {\n    src: [String, Object],\n    tag: {\n      type: String,\n      default: \"img\"\n    }\n  },\n  render() {\n    var _a, _b;\n    return h(\n      this.tag,\n      {\n        src: this.renderSrc\n      },\n      (_b = (_a = this.$slots).default) == null ? void 0 : _b.call(_a)\n    );\n  },\n  data() {\n    return {\n      el: null,\n      options: {\n        src: \"\",\n        error: \"\",\n        loading: \"\",\n        attempt: lazyManager.options.attempt\n      },\n      state: {\n        loaded: false,\n        error: false,\n        attempt: 0\n      },\n      renderSrc: \"\"\n    };\n  },\n  watch: {\n    src() {\n      this.init();\n      lazyManager.addLazyBox(this);\n      lazyManager.lazyLoadHandler();\n    }\n  },\n  created() {\n    this.init();\n  },\n  mounted() {\n    this.el = this.$el;\n    lazyManager.addLazyBox(this);\n    lazyManager.lazyLoadHandler();\n  },\n  beforeUnmount() {\n    lazyManager.removeComponent(this);\n  },\n  methods: {\n    init() {\n      const { src, loading, error } = lazyManager.valueFormatter(this.src);\n      this.state.loaded = false;\n      this.options.src = src;\n      this.options.error = error;\n      this.options.loading = loading;\n      this.renderSrc = this.options.loading;\n    },\n    checkInView() {\n      const rect = useRect(this.$el);\n      return rect.top < window.innerHeight * lazyManager.options.preLoad && rect.bottom > 0 && rect.left < window.innerWidth * lazyManager.options.preLoad && rect.right > 0;\n    },\n    load(onFinish = noop) {\n      if (this.state.attempt > this.options.attempt - 1 && this.state.error) {\n        if (!lazyManager.options.silent) {\n          console.log(\n            `[@vant/lazyload] ${this.options.src} tried too more than ${this.options.attempt} times`\n          );\n        }\n        onFinish();\n        return;\n      }\n      const { src } = this.options;\n      loadImageAsync(\n        { src },\n        ({ src: src2 }) => {\n          this.renderSrc = src2;\n          this.state.loaded = true;\n        },\n        () => {\n          this.state.attempt++;\n          this.renderSrc = this.options.error;\n          this.state.error = true;\n        }\n      );\n    }\n  }\n});\nexport {\n  stdin_default as default\n};\n",
      "start": 1714699768244,
      "end": 1714699769066,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1714699769066,
      "end": 1714699769066,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699769066,
      "end": 1714699769066,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699769066,
      "end": 1714699769066,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699769066,
      "end": 1714699769066,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699769066,
      "end": 1714699769066,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699769066,
      "end": 1714699769066,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699769066,
      "end": 1714699769066,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699769066,
      "end": 1714699769066,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699769066,
      "end": 1714699769066,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699769066,
      "end": 1714699769066,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699769066,
      "end": 1714699769066,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699769066,
      "end": 1714699769066,
      "order": "normal"
    }
  ]
}

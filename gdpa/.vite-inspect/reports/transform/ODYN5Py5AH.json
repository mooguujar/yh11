{
  "resolvedId": "/Users/afeng/Desktop/work/gdpayh5-web/node_modules/.pnpm/vxe-table@4.5.21_vue@3.4.19_xe-utils@3.5.24/node_modules/vxe-table/es/button/src/button.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { defineComponent, h, ref, computed, Teleport, onUnmounted, reactive, nextTick, onMounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { useSize } from '../../hooks/size';\nimport { getAbsolutePos, getEventTargetNode } from '../../tools/dom';\nimport { getFuncText, getLastZIndex, nextZIndex } from '../../tools/utils';\nimport { GlobalEvent } from '../../tools/event';\nexport default defineComponent({\n    name: 'VxeButton',\n    props: {\n        /**\n         * 按钮类型\n         */\n        type: String,\n        className: [String, Function],\n        popupClassName: [String, Function],\n        /**\n         * 按钮尺寸\n         */\n        size: { type: String, default: function () { return GlobalConfig.button.size || GlobalConfig.size; } },\n        /**\n         * 用来标识这一项\n         */\n        name: [String, Number],\n        /**\n         * 按钮内容\n         */\n        content: String,\n        /**\n         * 固定显示下拉面板的方向\n         */\n        placement: String,\n        /**\n         * 按钮状态\n         */\n        status: String,\n        /**\n         * 按钮的图标\n         */\n        icon: String,\n        /**\n         * 圆角边框\n         */\n        round: Boolean,\n        /**\n         * 圆角按钮\n         */\n        circle: Boolean,\n        /**\n         * 是否禁用\n         */\n        disabled: Boolean,\n        /**\n         * 是否加载中\n         */\n        loading: Boolean,\n        /**\n         * 在下拉面板关闭时销毁内容\n         */\n        destroyOnClose: Boolean,\n        /**\n         * 是否将弹框容器插入于 body 内\n         */\n        transfer: { type: Boolean, default: function () { return GlobalConfig.button.transfer; } }\n    },\n    emits: [\n        'click',\n        'dropdown-click'\n    ],\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var xID = XEUtils.uniqueId();\n        var computeSize = useSize(props);\n        var reactData = reactive({\n            inited: false,\n            showPanel: false,\n            animatVisible: false,\n            panelIndex: 0,\n            panelStyle: {},\n            panelPlacement: ''\n        });\n        var internalData = {\n            showTime: null\n        };\n        var refElem = ref();\n        var refButton = ref();\n        var refBtnPanel = ref();\n        var refMaps = {\n            refElem: refElem\n        };\n        var $xebutton = {\n            xID: xID,\n            props: props,\n            context: context,\n            reactData: reactData,\n            internalData: internalData,\n            getRefMaps: function () { return refMaps; }\n        };\n        var buttonMethods = {};\n        var computeIsFormBtn = computed(function () {\n            var type = props.type;\n            if (type) {\n                return ['submit', 'reset', 'button'].indexOf(type) > -1;\n            }\n            return false;\n        });\n        var computeBtnType = computed(function () {\n            var type = props.type;\n            return type && type === 'text' ? type : 'button';\n        });\n        var updateZindex = function () {\n            if (reactData.panelIndex < getLastZIndex()) {\n                reactData.panelIndex = nextZIndex();\n            }\n        };\n        var updatePlacement = function () {\n            return nextTick().then(function () {\n                var transfer = props.transfer, placement = props.placement;\n                var panelIndex = reactData.panelIndex;\n                var targetElem = refButton.value;\n                var panelElem = refBtnPanel.value;\n                if (panelElem && targetElem) {\n                    var targetHeight = targetElem.offsetHeight;\n                    var targetWidth = targetElem.offsetWidth;\n                    var panelHeight = panelElem.offsetHeight;\n                    var panelWidth = panelElem.offsetWidth;\n                    var marginSize = 5;\n                    var panelStyle = {\n                        zIndex: panelIndex\n                    };\n                    var _a = getAbsolutePos(targetElem), top_1 = _a.top, left = _a.left, boundingTop = _a.boundingTop, visibleHeight = _a.visibleHeight, visibleWidth = _a.visibleWidth;\n                    var panelPlacement = 'bottom';\n                    if (transfer) {\n                        var btnLeft = left + targetWidth - panelWidth;\n                        var btnTop = top_1 + targetHeight;\n                        if (placement === 'top') {\n                            panelPlacement = 'top';\n                            btnTop = top_1 - panelHeight;\n                        }\n                        else if (!placement) {\n                            // 如果下面不够放，则向上\n                            if (boundingTop + targetHeight + panelHeight + marginSize > visibleHeight) {\n                                panelPlacement = 'top';\n                                btnTop = top_1 - panelHeight;\n                            }\n                            // 如果上面不够放，则向下（优先）\n                            if (btnTop < marginSize) {\n                                panelPlacement = 'bottom';\n                                btnTop = top_1 + targetHeight;\n                            }\n                        }\n                        // 如果溢出右边\n                        if (btnLeft + panelWidth + marginSize > visibleWidth) {\n                            btnLeft -= btnLeft + panelWidth + marginSize - visibleWidth;\n                        }\n                        // 如果溢出左边\n                        if (btnLeft < marginSize) {\n                            btnLeft = marginSize;\n                        }\n                        Object.assign(panelStyle, {\n                            left: \"\".concat(btnLeft, \"px\"),\n                            right: 'auto',\n                            top: \"\".concat(btnTop, \"px\"),\n                            minWidth: \"\".concat(targetWidth, \"px\")\n                        });\n                    }\n                    else {\n                        if (placement === 'top') {\n                            panelPlacement = 'top';\n                            panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                        }\n                        else if (!placement) {\n                            // 如果下面不够放，则向上\n                            if (boundingTop + targetHeight + panelHeight > visibleHeight) {\n                                // 如果上面不够放，则向下（优先）\n                                if (boundingTop - targetHeight - panelHeight > marginSize) {\n                                    panelPlacement = 'top';\n                                    panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                                }\n                            }\n                        }\n                    }\n                    reactData.panelStyle = panelStyle;\n                    reactData.panelPlacement = panelPlacement;\n                    return nextTick();\n                }\n            });\n        };\n        var clickEvent = function (evnt) {\n            buttonMethods.dispatchEvent('click', { $event: evnt }, evnt);\n        };\n        var mousedownDropdownEvent = function (evnt) {\n            var isLeftBtn = evnt.button === 0;\n            if (isLeftBtn) {\n                evnt.stopPropagation();\n            }\n        };\n        var clickDropdownEvent = function (evnt) {\n            var dropdownElem = evnt.currentTarget;\n            var panelElem = refBtnPanel.value;\n            var _a = getEventTargetNode(evnt, dropdownElem, 'vxe-button'), flag = _a.flag, targetElem = _a.targetElem;\n            if (flag) {\n                if (panelElem) {\n                    panelElem.dataset.active = 'N';\n                }\n                reactData.showPanel = false;\n                setTimeout(function () {\n                    if (!panelElem || panelElem.dataset.active !== 'Y') {\n                        reactData.animatVisible = false;\n                    }\n                }, 350);\n                buttonMethods.dispatchEvent('dropdown-click', { name: targetElem.getAttribute('name'), $event: evnt }, evnt);\n            }\n        };\n        var mouseenterEvent = function () {\n            var panelElem = refBtnPanel.value;\n            if (panelElem) {\n                panelElem.dataset.active = 'Y';\n                reactData.animatVisible = true;\n                setTimeout(function () {\n                    if (panelElem.dataset.active === 'Y') {\n                        reactData.showPanel = true;\n                        updateZindex();\n                        updatePlacement();\n                        setTimeout(function () {\n                            if (reactData.showPanel) {\n                                updatePlacement();\n                            }\n                        }, 50);\n                    }\n                }, 20);\n            }\n        };\n        var mouseenterTargetEvent = function () {\n            var panelElem = refBtnPanel.value;\n            if (panelElem) {\n                panelElem.dataset.active = 'Y';\n                if (!reactData.inited) {\n                    reactData.inited = true;\n                }\n                internalData.showTime = setTimeout(function () {\n                    if (panelElem.dataset.active === 'Y') {\n                        mouseenterEvent();\n                    }\n                    else {\n                        reactData.animatVisible = false;\n                    }\n                }, 250);\n            }\n        };\n        var closePanel = function () {\n            var panelElem = refBtnPanel.value;\n            clearTimeout(internalData.showTime);\n            if (panelElem) {\n                panelElem.dataset.active = 'N';\n                setTimeout(function () {\n                    if (panelElem.dataset.active !== 'Y') {\n                        reactData.showPanel = false;\n                        setTimeout(function () {\n                            if (panelElem.dataset.active !== 'Y') {\n                                reactData.animatVisible = false;\n                            }\n                        }, 350);\n                    }\n                }, 100);\n            }\n            else {\n                reactData.animatVisible = false;\n                reactData.showPanel = false;\n            }\n        };\n        var mouseleaveEvent = function () {\n            closePanel();\n        };\n        var renderContent = function () {\n            var content = props.content, icon = props.icon, loading = props.loading;\n            var contVNs = [];\n            if (loading) {\n                contVNs.push(h('i', {\n                    class: ['vxe-button--loading-icon', GlobalConfig.icon.BUTTON_LOADING]\n                }));\n            }\n            else if (slots.icon) {\n                contVNs.push(h('span', {\n                    class: 'vxe-button--custom-icon'\n                }, slots.icon({})));\n            }\n            else if (icon) {\n                contVNs.push(h('i', {\n                    class: ['vxe-button--icon', icon]\n                }));\n            }\n            if (slots.default) {\n                contVNs.push(h('span', {\n                    class: 'vxe-button--content'\n                }, slots.default({})));\n            }\n            else if (content) {\n                contVNs.push(h('span', {\n                    class: 'vxe-button--content'\n                }, getFuncText(content)));\n            }\n            return contVNs;\n        };\n        buttonMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $button: $xebutton, $event: evnt }, params));\n            },\n            focus: function () {\n                var btnElem = refButton.value;\n                btnElem.focus();\n                return nextTick();\n            },\n            blur: function () {\n                var btnElem = refButton.value;\n                btnElem.blur();\n                return nextTick();\n            }\n        };\n        Object.assign($xebutton, buttonMethods);\n        onMounted(function () {\n            GlobalEvent.on($xebutton, 'mousewheel', function (evnt) {\n                var panelElem = refBtnPanel.value;\n                if (reactData.showPanel && !getEventTargetNode(evnt, panelElem).flag) {\n                    closePanel();\n                }\n            });\n        });\n        onUnmounted(function () {\n            GlobalEvent.off($xebutton, 'mousewheel');\n        });\n        var renderVN = function () {\n            var _a, _b, _c, _d;\n            var className = props.className, popupClassName = props.popupClassName, transfer = props.transfer, type = props.type, round = props.round, circle = props.circle, destroyOnClose = props.destroyOnClose, status = props.status, name = props.name, disabled = props.disabled, loading = props.loading;\n            var inited = reactData.inited, showPanel = reactData.showPanel;\n            var isFormBtn = computeIsFormBtn.value;\n            var btnType = computeBtnType.value;\n            var vSize = computeSize.value;\n            if (slots.dropdowns) {\n                return h('div', {\n                    ref: refElem,\n                    class: ['vxe-button--dropdown', className ? (XEUtils.isFunction(className) ? className({ $button: $xebutton }) : className) : '', (_a = {},\n                            _a[\"size--\".concat(vSize)] = vSize,\n                            _a['is--active'] = showPanel,\n                            _a)]\n                }, [\n                    h('button', {\n                        ref: refButton,\n                        class: ['vxe-button', \"type--\".concat(btnType), (_b = {},\n                                _b[\"size--\".concat(vSize)] = vSize,\n                                _b[\"theme--\".concat(status)] = status,\n                                _b['is--round'] = round,\n                                _b['is--circle'] = circle,\n                                _b['is--disabled'] = disabled || loading,\n                                _b['is--loading'] = loading,\n                                _b)],\n                        name: name,\n                        type: isFormBtn ? type : 'button',\n                        disabled: disabled || loading,\n                        onMouseenter: mouseenterTargetEvent,\n                        onMouseleave: mouseleaveEvent,\n                        onClick: clickEvent\n                    }, renderContent().concat([\n                        h('i', {\n                            class: \"vxe-button--dropdown-arrow \".concat(GlobalConfig.icon.BUTTON_DROPDOWN)\n                        })\n                    ])),\n                    h(Teleport, {\n                        to: 'body',\n                        disabled: transfer ? !inited : true\n                    }, [\n                        h('div', {\n                            ref: refBtnPanel,\n                            class: ['vxe-button--dropdown-panel', popupClassName ? (XEUtils.isFunction(popupClassName) ? popupClassName({ $button: $xebutton }) : popupClassName) : '', (_c = {},\n                                    _c[\"size--\".concat(vSize)] = vSize,\n                                    _c['animat--leave'] = reactData.animatVisible,\n                                    _c['animat--enter'] = showPanel,\n                                    _c)],\n                            placement: reactData.panelPlacement,\n                            style: reactData.panelStyle\n                        }, inited ? [\n                            h('div', {\n                                class: 'vxe-button--dropdown-wrapper',\n                                onMousedown: mousedownDropdownEvent,\n                                onClick: clickDropdownEvent,\n                                onMouseenter: mouseenterEvent,\n                                onMouseleave: mouseleaveEvent\n                            }, destroyOnClose && !showPanel ? [] : slots.dropdowns({}))\n                        ] : [])\n                    ])\n                ]);\n            }\n            return h('button', {\n                ref: refButton,\n                class: ['vxe-button', \"type--\".concat(btnType), (_d = {},\n                        _d[\"size--\".concat(vSize)] = vSize,\n                        _d[\"theme--\".concat(status)] = status,\n                        _d['is--round'] = round,\n                        _d['is--circle'] = circle,\n                        _d['is--disabled'] = disabled || loading,\n                        _d['is--loading'] = loading,\n                        _d)],\n                name: name,\n                type: isFormBtn ? type : 'button',\n                disabled: disabled || loading,\n                onClick: clickEvent\n            }, renderContent());\n        };\n        $xebutton.renderVN = renderVN;\n        return $xebutton;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767749,
      "end": 1714699767804,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1714699767804,
      "end": 1714699767804,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714699767804,
      "end": 1714699767804,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714699767804,
      "end": 1714699767804,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714699767804,
      "end": 1714699767804,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714699767804,
      "end": 1714699767804,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714699767804,
      "end": 1714699767804,
      "order": "normal"
    },
    {
      "name": "vite-plugin-vconsole",
      "result": "import { defineComponent, h, ref, computed, Teleport, onUnmounted, reactive, nextTick, onMounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { useSize } from '../../hooks/size';\nimport { getAbsolutePos, getEventTargetNode } from '../../tools/dom';\nimport { getFuncText, getLastZIndex, nextZIndex } from '../../tools/utils';\nimport { GlobalEvent } from '../../tools/event';\nexport default defineComponent({\n    name: 'VxeButton',\n    props: {\n        /**\n         * 按钮类型\n         */\n        type: String,\n        className: [String, Function],\n        popupClassName: [String, Function],\n        /**\n         * 按钮尺寸\n         */\n        size: { type: String, default: function () { return GlobalConfig.button.size || GlobalConfig.size; } },\n        /**\n         * 用来标识这一项\n         */\n        name: [String, Number],\n        /**\n         * 按钮内容\n         */\n        content: String,\n        /**\n         * 固定显示下拉面板的方向\n         */\n        placement: String,\n        /**\n         * 按钮状态\n         */\n        status: String,\n        /**\n         * 按钮的图标\n         */\n        icon: String,\n        /**\n         * 圆角边框\n         */\n        round: Boolean,\n        /**\n         * 圆角按钮\n         */\n        circle: Boolean,\n        /**\n         * 是否禁用\n         */\n        disabled: Boolean,\n        /**\n         * 是否加载中\n         */\n        loading: Boolean,\n        /**\n         * 在下拉面板关闭时销毁内容\n         */\n        destroyOnClose: Boolean,\n        /**\n         * 是否将弹框容器插入于 body 内\n         */\n        transfer: { type: Boolean, default: function () { return GlobalConfig.button.transfer; } }\n    },\n    emits: [\n        'click',\n        'dropdown-click'\n    ],\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var xID = XEUtils.uniqueId();\n        var computeSize = useSize(props);\n        var reactData = reactive({\n            inited: false,\n            showPanel: false,\n            animatVisible: false,\n            panelIndex: 0,\n            panelStyle: {},\n            panelPlacement: ''\n        });\n        var internalData = {\n            showTime: null\n        };\n        var refElem = ref();\n        var refButton = ref();\n        var refBtnPanel = ref();\n        var refMaps = {\n            refElem: refElem\n        };\n        var $xebutton = {\n            xID: xID,\n            props: props,\n            context: context,\n            reactData: reactData,\n            internalData: internalData,\n            getRefMaps: function () { return refMaps; }\n        };\n        var buttonMethods = {};\n        var computeIsFormBtn = computed(function () {\n            var type = props.type;\n            if (type) {\n                return ['submit', 'reset', 'button'].indexOf(type) > -1;\n            }\n            return false;\n        });\n        var computeBtnType = computed(function () {\n            var type = props.type;\n            return type && type === 'text' ? type : 'button';\n        });\n        var updateZindex = function () {\n            if (reactData.panelIndex < getLastZIndex()) {\n                reactData.panelIndex = nextZIndex();\n            }\n        };\n        var updatePlacement = function () {\n            return nextTick().then(function () {\n                var transfer = props.transfer, placement = props.placement;\n                var panelIndex = reactData.panelIndex;\n                var targetElem = refButton.value;\n                var panelElem = refBtnPanel.value;\n                if (panelElem && targetElem) {\n                    var targetHeight = targetElem.offsetHeight;\n                    var targetWidth = targetElem.offsetWidth;\n                    var panelHeight = panelElem.offsetHeight;\n                    var panelWidth = panelElem.offsetWidth;\n                    var marginSize = 5;\n                    var panelStyle = {\n                        zIndex: panelIndex\n                    };\n                    var _a = getAbsolutePos(targetElem), top_1 = _a.top, left = _a.left, boundingTop = _a.boundingTop, visibleHeight = _a.visibleHeight, visibleWidth = _a.visibleWidth;\n                    var panelPlacement = 'bottom';\n                    if (transfer) {\n                        var btnLeft = left + targetWidth - panelWidth;\n                        var btnTop = top_1 + targetHeight;\n                        if (placement === 'top') {\n                            panelPlacement = 'top';\n                            btnTop = top_1 - panelHeight;\n                        }\n                        else if (!placement) {\n                            // 如果下面不够放，则向上\n                            if (boundingTop + targetHeight + panelHeight + marginSize > visibleHeight) {\n                                panelPlacement = 'top';\n                                btnTop = top_1 - panelHeight;\n                            }\n                            // 如果上面不够放，则向下（优先）\n                            if (btnTop < marginSize) {\n                                panelPlacement = 'bottom';\n                                btnTop = top_1 + targetHeight;\n                            }\n                        }\n                        // 如果溢出右边\n                        if (btnLeft + panelWidth + marginSize > visibleWidth) {\n                            btnLeft -= btnLeft + panelWidth + marginSize - visibleWidth;\n                        }\n                        // 如果溢出左边\n                        if (btnLeft < marginSize) {\n                            btnLeft = marginSize;\n                        }\n                        Object.assign(panelStyle, {\n                            left: \"\".concat(btnLeft, \"px\"),\n                            right: 'auto',\n                            top: \"\".concat(btnTop, \"px\"),\n                            minWidth: \"\".concat(targetWidth, \"px\")\n                        });\n                    }\n                    else {\n                        if (placement === 'top') {\n                            panelPlacement = 'top';\n                            panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                        }\n                        else if (!placement) {\n                            // 如果下面不够放，则向上\n                            if (boundingTop + targetHeight + panelHeight > visibleHeight) {\n                                // 如果上面不够放，则向下（优先）\n                                if (boundingTop - targetHeight - panelHeight > marginSize) {\n                                    panelPlacement = 'top';\n                                    panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                                }\n                            }\n                        }\n                    }\n                    reactData.panelStyle = panelStyle;\n                    reactData.panelPlacement = panelPlacement;\n                    return nextTick();\n                }\n            });\n        };\n        var clickEvent = function (evnt) {\n            buttonMethods.dispatchEvent('click', { $event: evnt }, evnt);\n        };\n        var mousedownDropdownEvent = function (evnt) {\n            var isLeftBtn = evnt.button === 0;\n            if (isLeftBtn) {\n                evnt.stopPropagation();\n            }\n        };\n        var clickDropdownEvent = function (evnt) {\n            var dropdownElem = evnt.currentTarget;\n            var panelElem = refBtnPanel.value;\n            var _a = getEventTargetNode(evnt, dropdownElem, 'vxe-button'), flag = _a.flag, targetElem = _a.targetElem;\n            if (flag) {\n                if (panelElem) {\n                    panelElem.dataset.active = 'N';\n                }\n                reactData.showPanel = false;\n                setTimeout(function () {\n                    if (!panelElem || panelElem.dataset.active !== 'Y') {\n                        reactData.animatVisible = false;\n                    }\n                }, 350);\n                buttonMethods.dispatchEvent('dropdown-click', { name: targetElem.getAttribute('name'), $event: evnt }, evnt);\n            }\n        };\n        var mouseenterEvent = function () {\n            var panelElem = refBtnPanel.value;\n            if (panelElem) {\n                panelElem.dataset.active = 'Y';\n                reactData.animatVisible = true;\n                setTimeout(function () {\n                    if (panelElem.dataset.active === 'Y') {\n                        reactData.showPanel = true;\n                        updateZindex();\n                        updatePlacement();\n                        setTimeout(function () {\n                            if (reactData.showPanel) {\n                                updatePlacement();\n                            }\n                        }, 50);\n                    }\n                }, 20);\n            }\n        };\n        var mouseenterTargetEvent = function () {\n            var panelElem = refBtnPanel.value;\n            if (panelElem) {\n                panelElem.dataset.active = 'Y';\n                if (!reactData.inited) {\n                    reactData.inited = true;\n                }\n                internalData.showTime = setTimeout(function () {\n                    if (panelElem.dataset.active === 'Y') {\n                        mouseenterEvent();\n                    }\n                    else {\n                        reactData.animatVisible = false;\n                    }\n                }, 250);\n            }\n        };\n        var closePanel = function () {\n            var panelElem = refBtnPanel.value;\n            clearTimeout(internalData.showTime);\n            if (panelElem) {\n                panelElem.dataset.active = 'N';\n                setTimeout(function () {\n                    if (panelElem.dataset.active !== 'Y') {\n                        reactData.showPanel = false;\n                        setTimeout(function () {\n                            if (panelElem.dataset.active !== 'Y') {\n                                reactData.animatVisible = false;\n                            }\n                        }, 350);\n                    }\n                }, 100);\n            }\n            else {\n                reactData.animatVisible = false;\n                reactData.showPanel = false;\n            }\n        };\n        var mouseleaveEvent = function () {\n            closePanel();\n        };\n        var renderContent = function () {\n            var content = props.content, icon = props.icon, loading = props.loading;\n            var contVNs = [];\n            if (loading) {\n                contVNs.push(h('i', {\n                    class: ['vxe-button--loading-icon', GlobalConfig.icon.BUTTON_LOADING]\n                }));\n            }\n            else if (slots.icon) {\n                contVNs.push(h('span', {\n                    class: 'vxe-button--custom-icon'\n                }, slots.icon({})));\n            }\n            else if (icon) {\n                contVNs.push(h('i', {\n                    class: ['vxe-button--icon', icon]\n                }));\n            }\n            if (slots.default) {\n                contVNs.push(h('span', {\n                    class: 'vxe-button--content'\n                }, slots.default({})));\n            }\n            else if (content) {\n                contVNs.push(h('span', {\n                    class: 'vxe-button--content'\n                }, getFuncText(content)));\n            }\n            return contVNs;\n        };\n        buttonMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $button: $xebutton, $event: evnt }, params));\n            },\n            focus: function () {\n                var btnElem = refButton.value;\n                btnElem.focus();\n                return nextTick();\n            },\n            blur: function () {\n                var btnElem = refButton.value;\n                btnElem.blur();\n                return nextTick();\n            }\n        };\n        Object.assign($xebutton, buttonMethods);\n        onMounted(function () {\n            GlobalEvent.on($xebutton, 'mousewheel', function (evnt) {\n                var panelElem = refBtnPanel.value;\n                if (reactData.showPanel && !getEventTargetNode(evnt, panelElem).flag) {\n                    closePanel();\n                }\n            });\n        });\n        onUnmounted(function () {\n            GlobalEvent.off($xebutton, 'mousewheel');\n        });\n        var renderVN = function () {\n            var _a, _b, _c, _d;\n            var className = props.className, popupClassName = props.popupClassName, transfer = props.transfer, type = props.type, round = props.round, circle = props.circle, destroyOnClose = props.destroyOnClose, status = props.status, name = props.name, disabled = props.disabled, loading = props.loading;\n            var inited = reactData.inited, showPanel = reactData.showPanel;\n            var isFormBtn = computeIsFormBtn.value;\n            var btnType = computeBtnType.value;\n            var vSize = computeSize.value;\n            if (slots.dropdowns) {\n                return h('div', {\n                    ref: refElem,\n                    class: ['vxe-button--dropdown', className ? (XEUtils.isFunction(className) ? className({ $button: $xebutton }) : className) : '', (_a = {},\n                            _a[\"size--\".concat(vSize)] = vSize,\n                            _a['is--active'] = showPanel,\n                            _a)]\n                }, [\n                    h('button', {\n                        ref: refButton,\n                        class: ['vxe-button', \"type--\".concat(btnType), (_b = {},\n                                _b[\"size--\".concat(vSize)] = vSize,\n                                _b[\"theme--\".concat(status)] = status,\n                                _b['is--round'] = round,\n                                _b['is--circle'] = circle,\n                                _b['is--disabled'] = disabled || loading,\n                                _b['is--loading'] = loading,\n                                _b)],\n                        name: name,\n                        type: isFormBtn ? type : 'button',\n                        disabled: disabled || loading,\n                        onMouseenter: mouseenterTargetEvent,\n                        onMouseleave: mouseleaveEvent,\n                        onClick: clickEvent\n                    }, renderContent().concat([\n                        h('i', {\n                            class: \"vxe-button--dropdown-arrow \".concat(GlobalConfig.icon.BUTTON_DROPDOWN)\n                        })\n                    ])),\n                    h(Teleport, {\n                        to: 'body',\n                        disabled: transfer ? !inited : true\n                    }, [\n                        h('div', {\n                            ref: refBtnPanel,\n                            class: ['vxe-button--dropdown-panel', popupClassName ? (XEUtils.isFunction(popupClassName) ? popupClassName({ $button: $xebutton }) : popupClassName) : '', (_c = {},\n                                    _c[\"size--\".concat(vSize)] = vSize,\n                                    _c['animat--leave'] = reactData.animatVisible,\n                                    _c['animat--enter'] = showPanel,\n                                    _c)],\n                            placement: reactData.panelPlacement,\n                            style: reactData.panelStyle\n                        }, inited ? [\n                            h('div', {\n                                class: 'vxe-button--dropdown-wrapper',\n                                onMousedown: mousedownDropdownEvent,\n                                onClick: clickDropdownEvent,\n                                onMouseenter: mouseenterEvent,\n                                onMouseleave: mouseleaveEvent\n                            }, destroyOnClose && !showPanel ? [] : slots.dropdowns({}))\n                        ] : [])\n                    ])\n                ]);\n            }\n            return h('button', {\n                ref: refButton,\n                class: ['vxe-button', \"type--\".concat(btnType), (_d = {},\n                        _d[\"size--\".concat(vSize)] = vSize,\n                        _d[\"theme--\".concat(status)] = status,\n                        _d['is--round'] = round,\n                        _d['is--circle'] = circle,\n                        _d['is--disabled'] = disabled || loading,\n                        _d['is--loading'] = loading,\n                        _d)],\n                name: name,\n                type: isFormBtn ? type : 'button',\n                disabled: disabled || loading,\n                onClick: clickEvent\n            }, renderContent());\n        };\n        $xebutton.renderVN = renderVN;\n        return $xebutton;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n",
      "start": 1714699767804,
      "end": 1714699767804,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "esbuild",
      "start": 1714699767804,
      "end": 1714699767804,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714699767804,
      "end": 1714699767804,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714699767804,
      "end": 1714699767804,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714699767804,
      "end": 1714699767804,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714699767804,
      "end": 1714699767804,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714699767804,
      "end": 1714699767804,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714699767804,
      "end": 1714699767805,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714699767805,
      "end": 1714699767805,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714699767805,
      "end": 1714699767805,
      "order": "normal"
    },
    {
      "name": "unplugin-auto-import",
      "start": 1714699767805,
      "end": 1714699767805,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1714699767805,
      "end": 1714699767805,
      "order": "post"
    },
    {
      "name": "vite:style-import",
      "start": 1714699767805,
      "end": 1714699767805,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714699767805,
      "end": 1714699767805,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714699767805,
      "end": 1714699767805,
      "order": "normal"
    }
  ]
}
